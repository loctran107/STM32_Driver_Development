/*
 * STM32F407xx_SPI_Driver.h
 *
 *  Created on: Aug 28, 2020
 *      Author: Donavan Tran
 *      Description: This header file contains specific details and implementations
 *      			 of the SPI peripheral interface
 */

#ifndef INC_STM32F407XX_SPI_DRIVER_H_
#define INC_STM32F407XX_SPI_DRIVER_H_
#include "stm32f407xx.h"

/*****************SPECIFIC MACROS FOR SPI*********************/

/*
 * @SPI_DEVICE_MODE
 */
#define SPI_MASTER_MODE				0U
#define SPI_SLAVE_MODE				1U

/*
 * @SPI_BUS
 */
#define SPI_FULL_DUPLX				0U
#define SPI_HALF_DUPLX				1U
#define SPI_SIMPLEX					2U

/*
 * DFF SET or RESET
 */
#define DFF_8_BIT					0U
#define DFF_16_BIT					1U

/*
 * CPOL SET or RESET
 */
#define	CPOL_SET					SET
#define DFF_RESET					RESET

/*
 * CPHA SET or RESET
 */
#define CPHA_SET					SET
#define CPHA_RESET					RESET
/*************************************************************/

/*
 * SPI configuration structure
 */
typedef struct {
	uint8_t  SclkSpeed;
	uint8_t  DeviceMode;	//@SPI_DEVICE_MODE
	uint8_t  BusConfig;		//@SPI_BUS
	uint8_t  SSM;			//Slave Select Management
	uint8_t  DFF;   		//Data Frame Format
	uint8_t  CPOL;  		//Clock Polarity
	uint8_t  CPHA;  		//Clock Phase
} SPI_Config_t;


/*
 * SPI Handle structure
 */
typedef struct {
	SPI_Reg_t*		pSPIx;
	SPI_Config_t	SPI_Config;
} SPI_Handle_t;

/********************************SPI FUNCTION API DECLARATION*************************/

/*
 * Peripheral clock control
 */
void SPI_PeriClkCtrl(SPI_Reg_t* pSPIx, uint8_t EnOrDi);

/*
 * GPIO initialization and de-initialization
 * Parameter: Pointer to the GPIO Handle Structure
 */
void SPI_Init(SPI_Handle_t* pSPIHandler);

/* Consult the RCC Peripheral reset registers for more details*/
void SPI_DeInit(SPI_Reg_t* pSPIx);

/*
 * SPI Send and Receive API
 * Note: blocking is non-interrupt-based and non-blocking is interrupt-based send and receive method
 */
//Blocking-based API
void SPI_SendData(SPI_Reg_t* pSPIx, uint8_t* pTxBuffer, uint32_t len); //Note: it is a standard practice to define len as uint32_t
void SPI_ReceiveData(SPI_Reg_t* pSPIx, uint8_t* pRxBuffer, uint32_t len);


/*
 * GPIO Interrupt Configuration and Handling
 */
void SPI_IRQITConfig(uint8_t IRQNumber, uint8_t EnOrDi);
void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriorityValue);
void SPI_IRQHandling(SPI_Handlt_t* pSPIHandler);

#endif /* INC_STM32F407XX_SPI_DRIVER_H_ */
