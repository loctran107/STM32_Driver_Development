
STM32F407xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013f0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08001598  08001598  00011598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001614  08001614  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001614  08001614  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001614  08001614  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001614  08001614  00011614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001618  08001618  00011618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800161c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000064  08001680  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08001680  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003247  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000896  00000000  00000000  000232db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000198  00000000  00000000  00023b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000150  00000000  00000000  00023d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003c4f  00000000  00000000  00023e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001daa  00000000  00000000  00027aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000e001  00000000  00000000  00029859  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003785a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c98  00000000  00000000  000378d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000064 	.word	0x20000064
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001580 	.word	0x08001580

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000068 	.word	0x20000068
 80001e4:	08001580 	.word	0x08001580

080001e8 <LEDEnable>:

void delay() {
	for (uint32_t i = 0; i < 1000000; i++);
}

void LEDEnable(GPIO_Handle_t* GPIO_LED) {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	//Enable the LED
	//GPIO_Handle_t GPIO_LED;
	GPIO_LED->pGPIOx = GPIOD;
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	4a0c      	ldr	r2, [pc, #48]	; (8000224 <LEDEnable+0x3c>)
 80001f4:	601a      	str	r2, [r3, #0]
	GPIO_LED->GPIOx_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80001fc:	605a      	str	r2, [r3, #4]
	GPIO_LED->GPIOx_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2202      	movs	r2, #2
 8000202:	60da      	str	r2, [r3, #12]
	GPIO_LED->GPIOx_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PU_PD;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2200      	movs	r2, #0
 8000208:	611a      	str	r2, [r3, #16]
	GPIO_LED->GPIOx_PinConfig.GPIO_PinMode = GPIO_OUTPUT_MODE;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2201      	movs	r2, #1
 800020e:	609a      	str	r2, [r3, #8]
	GPIO_LED->GPIOx_PinConfig.GPIO_PinOPType = GPIO_PUSH_PULL;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2200      	movs	r2, #0
 8000214:	615a      	str	r2, [r3, #20]
	GPIO_Init(GPIO_LED);
 8000216:	6878      	ldr	r0, [r7, #4]
 8000218:	f000 fa44 	bl	80006a4 <GPIO_Init>
}
 800021c:	bf00      	nop
 800021e:	3708      	adds	r7, #8
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	40020c00 	.word	0x40020c00

08000228 <ButtonEnable>:

void ButtonEnable(GPIO_Handle_t* GPIO_Button) {
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	//Enable the Button
	//GPIO_Handle_t GPIO_Button;
	GPIO_Button->pGPIOx = GPIOA;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a09      	ldr	r2, [pc, #36]	; (8000258 <ButtonEnable+0x30>)
 8000234:	601a      	str	r2, [r3, #0]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2201      	movs	r2, #1
 800023a:	605a      	str	r2, [r3, #4]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PU_PD;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2200      	movs	r2, #0
 8000240:	611a      	str	r2, [r3, #16]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinMode = GPIO_INPUT_MODE;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
	GPIO_Init(GPIO_Button);
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f000 fa2b 	bl	80006a4 <GPIO_Init>
}
 800024e:	bf00      	nop
 8000250:	3708      	adds	r7, #8
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	40020000 	.word	0x40020000

0800025c <main>:
/*
 * Write the program that handles the on board LED using on board
 * button
 */
int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b090      	sub	sp, #64	; 0x40
 8000260:	af00      	add	r7, sp, #0
	//Setting up the on board LED configuration

	//Enable the GPIO peripheral clock for on board LED and button
	GPIO_PeriClkCtrl(GPIOD, ENABLE);
 8000262:	2101      	movs	r1, #1
 8000264:	481a      	ldr	r0, [pc, #104]	; (80002d0 <main+0x74>)
 8000266:	f000 f90f 	bl	8000488 <GPIO_PeriClkCtrl>
	GPIO_PeriClkCtrl(GPIOA, ENABLE);
 800026a:	2101      	movs	r1, #1
 800026c:	4819      	ldr	r0, [pc, #100]	; (80002d4 <main+0x78>)
 800026e:	f000 f90b 	bl	8000488 <GPIO_PeriClkCtrl>

	//On-board hardware enable
	GPIO_Handle_t GPIO_LED, GPIO_Button;
	LEDEnable(&GPIO_LED);
 8000272:	f107 0320 	add.w	r3, r7, #32
 8000276:	4618      	mov	r0, r3
 8000278:	f7ff ffb6 	bl	80001e8 <LEDEnable>
	ButtonEnable(&GPIO_Button);
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	4618      	mov	r0, r3
 8000280:	f7ff ffd2 	bl	8000228 <ButtonEnable>

	//handle the LED pressing application
	while (1) {
		if (GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0)) { //Button is pressed
 8000284:	2101      	movs	r1, #1
 8000286:	4813      	ldr	r0, [pc, #76]	; (80002d4 <main+0x78>)
 8000288:	f000 fb3a 	bl	8000900 <GPIO_ReadFromInputPin>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d015      	beq.n	80002be <main+0x62>
			GPIO_WriteToOutputPin(GPIOD, GPIO_LED.GPIOx_PinConfig.GPIO_PinNumber, 1);
 8000292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000294:	b29b      	uxth	r3, r3
 8000296:	2201      	movs	r2, #1
 8000298:	4619      	mov	r1, r3
 800029a:	480d      	ldr	r0, [pc, #52]	; (80002d0 <main+0x74>)
 800029c:	f000 fb46 	bl	800092c <GPIO_WriteToOutputPin>
			FILE* fp; //create a file descriptor
			fp = fopen("command.txt", "w+");
 80002a0:	490d      	ldr	r1, [pc, #52]	; (80002d8 <main+0x7c>)
 80002a2:	480e      	ldr	r0, [pc, #56]	; (80002dc <main+0x80>)
 80002a4:	f000 fd5a 	bl	8000d5c <fopen>
 80002a8:	63f8      	str	r0, [r7, #60]	; 0x3c
			fputs("Start", fp);
 80002aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80002ac:	2205      	movs	r2, #5
 80002ae:	2101      	movs	r1, #1
 80002b0:	480b      	ldr	r0, [pc, #44]	; (80002e0 <main+0x84>)
 80002b2:	f000 fe59 	bl	8000f68 <fwrite>
			fclose(fp);
 80002b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80002b8:	f000 fbaa 	bl	8000a10 <fclose>
 80002bc:	e7e2      	b.n	8000284 <main+0x28>
		} else {
			GPIO_WriteToOutputPin(GPIOD, GPIO_LED.GPIOx_PinConfig.GPIO_PinNumber, 0);
 80002be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002c0:	b29b      	uxth	r3, r3
 80002c2:	2200      	movs	r2, #0
 80002c4:	4619      	mov	r1, r3
 80002c6:	4802      	ldr	r0, [pc, #8]	; (80002d0 <main+0x74>)
 80002c8:	f000 fb30 	bl	800092c <GPIO_WriteToOutputPin>
		if (GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0)) { //Button is pressed
 80002cc:	e7da      	b.n	8000284 <main+0x28>
 80002ce:	bf00      	nop
 80002d0:	40020c00 	.word	0x40020c00
 80002d4:	40020000 	.word	0x40020000
 80002d8:	08001598 	.word	0x08001598
 80002dc:	0800159c 	.word	0x0800159c
 80002e0:	080015a8 	.word	0x080015a8

080002e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	60b9      	str	r1, [r7, #8]
 80002ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002f0:	2300      	movs	r3, #0
 80002f2:	617b      	str	r3, [r7, #20]
 80002f4:	e00a      	b.n	800030c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80002f6:	f3af 8000 	nop.w
 80002fa:	4601      	mov	r1, r0
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	1c5a      	adds	r2, r3, #1
 8000300:	60ba      	str	r2, [r7, #8]
 8000302:	b2ca      	uxtb	r2, r1
 8000304:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000306:	697b      	ldr	r3, [r7, #20]
 8000308:	3301      	adds	r3, #1
 800030a:	617b      	str	r3, [r7, #20]
 800030c:	697a      	ldr	r2, [r7, #20]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	429a      	cmp	r2, r3
 8000312:	dbf0      	blt.n	80002f6 <_read+0x12>
	}

return len;
 8000314:	687b      	ldr	r3, [r7, #4]
}
 8000316:	4618      	mov	r0, r3
 8000318:	3718      	adds	r7, #24
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}

0800031e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800031e:	b580      	push	{r7, lr}
 8000320:	b086      	sub	sp, #24
 8000322:	af00      	add	r7, sp, #0
 8000324:	60f8      	str	r0, [r7, #12]
 8000326:	60b9      	str	r1, [r7, #8]
 8000328:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800032a:	2300      	movs	r3, #0
 800032c:	617b      	str	r3, [r7, #20]
 800032e:	e009      	b.n	8000344 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	1c5a      	adds	r2, r3, #1
 8000334:	60ba      	str	r2, [r7, #8]
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	4618      	mov	r0, r3
 800033a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800033e:	697b      	ldr	r3, [r7, #20]
 8000340:	3301      	adds	r3, #1
 8000342:	617b      	str	r3, [r7, #20]
 8000344:	697a      	ldr	r2, [r7, #20]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	429a      	cmp	r2, r3
 800034a:	dbf1      	blt.n	8000330 <_write+0x12>
	}
	return len;
 800034c:	687b      	ldr	r3, [r7, #4]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3718      	adds	r7, #24
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}

08000356 <_close>:

int _close(int file)
{
 8000356:	b480      	push	{r7}
 8000358:	b083      	sub	sp, #12
 800035a:	af00      	add	r7, sp, #0
 800035c:	6078      	str	r0, [r7, #4]
	return -1;
 800035e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000362:	4618      	mov	r0, r3
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr

0800036e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
 8000376:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800037e:	605a      	str	r2, [r3, #4]
	return 0;
 8000380:	2300      	movs	r3, #0
}
 8000382:	4618      	mov	r0, r3
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr

0800038e <_isatty>:

int _isatty(int file)
{
 800038e:	b480      	push	{r7}
 8000390:	b083      	sub	sp, #12
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
	return 1;
 8000396:	2301      	movs	r3, #1
}
 8000398:	4618      	mov	r0, r3
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b085      	sub	sp, #20
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
	return 0;
 80003b0:	2300      	movs	r3, #0
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3714      	adds	r7, #20
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <_open>:

int _open(char *path, int flags, ...)
{
 80003be:	b40e      	push	{r1, r2, r3}
 80003c0:	b480      	push	{r7}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 80003c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	b003      	add	sp, #12
 80003d8:	4770      	bx	lr
	...

080003dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80003e4:	4b11      	ldr	r3, [pc, #68]	; (800042c <_sbrk+0x50>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d102      	bne.n	80003f2 <_sbrk+0x16>
		heap_end = &end;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <_sbrk+0x50>)
 80003ee:	4a10      	ldr	r2, [pc, #64]	; (8000430 <_sbrk+0x54>)
 80003f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <_sbrk+0x50>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <_sbrk+0x50>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4413      	add	r3, r2
 8000400:	466a      	mov	r2, sp
 8000402:	4293      	cmp	r3, r2
 8000404:	d907      	bls.n	8000416 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000406:	f000 faab 	bl	8000960 <__errno>
 800040a:	4602      	mov	r2, r0
 800040c:	230c      	movs	r3, #12
 800040e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000410:	f04f 33ff 	mov.w	r3, #4294967295
 8000414:	e006      	b.n	8000424 <_sbrk+0x48>
	}

	heap_end += incr;
 8000416:	4b05      	ldr	r3, [pc, #20]	; (800042c <_sbrk+0x50>)
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4413      	add	r3, r2
 800041e:	4a03      	ldr	r2, [pc, #12]	; (800042c <_sbrk+0x50>)
 8000420:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000422:	68fb      	ldr	r3, [r7, #12]
}
 8000424:	4618      	mov	r0, r3
 8000426:	3710      	adds	r7, #16
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000080 	.word	0x20000080
 8000430:	20000090 	.word	0x20000090

08000434 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000434:	480d      	ldr	r0, [pc, #52]	; (800046c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000436:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000438:	480d      	ldr	r0, [pc, #52]	; (8000470 <LoopForever+0x6>)
  ldr r1, =_edata
 800043a:	490e      	ldr	r1, [pc, #56]	; (8000474 <LoopForever+0xa>)
  ldr r2, =_sidata
 800043c:	4a0e      	ldr	r2, [pc, #56]	; (8000478 <LoopForever+0xe>)
  movs r3, #0
 800043e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000440:	e002      	b.n	8000448 <LoopCopyDataInit>

08000442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000446:	3304      	adds	r3, #4

08000448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800044c:	d3f9      	bcc.n	8000442 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044e:	4a0b      	ldr	r2, [pc, #44]	; (800047c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000450:	4c0b      	ldr	r4, [pc, #44]	; (8000480 <LoopForever+0x16>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000454:	e001      	b.n	800045a <LoopFillZerobss>

08000456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000458:	3204      	adds	r2, #4

0800045a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800045c:	d3fb      	bcc.n	8000456 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800045e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000462:	f000 fd8f 	bl	8000f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000466:	f7ff fef9 	bl	800025c <main>

0800046a <LoopForever>:

LoopForever:
    b LoopForever
 800046a:	e7fe      	b.n	800046a <LoopForever>
  ldr   r0, =_estack
 800046c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000474:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000478:	0800161c 	.word	0x0800161c
  ldr r2, =_sbss
 800047c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000480:	20000090 	.word	0x20000090

08000484 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000484:	e7fe      	b.n	8000484 <ADC_IRQHandler>
	...

08000488 <GPIO_PeriClkCtrl>:
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void GPIO_PeriClkCtrl(GPIO_Reg_t* pGPIOx, uint8_t EnOrDi) {
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	460b      	mov	r3, r1
 8000492:	70fb      	strb	r3, [r7, #3]

	//Enable or disable the GPIO clock peripherals
	if (EnOrDi) {
 8000494:	78fb      	ldrb	r3, [r7, #3]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d074      	beq.n	8000584 <GPIO_PeriClkCtrl+0xfc>
		//Special note: switch cannot be used for pointer, only integer
		GPIO_PCLK_EN(pGPIOx);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a76      	ldr	r2, [pc, #472]	; (8000678 <GPIO_PeriClkCtrl+0x1f0>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d106      	bne.n	80004b0 <GPIO_PeriClkCtrl+0x28>
 80004a2:	4b76      	ldr	r3, [pc, #472]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 80004a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a6:	4a75      	ldr	r2, [pc, #468]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6313      	str	r3, [r2, #48]	; 0x30
	} else {
		GPIO_PCLK_DI(pGPIOx);
	}
}
 80004ae:	e0dd      	b.n	800066c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a73      	ldr	r2, [pc, #460]	; (8000680 <GPIO_PeriClkCtrl+0x1f8>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d106      	bne.n	80004c6 <GPIO_PeriClkCtrl+0x3e>
 80004b8:	4b70      	ldr	r3, [pc, #448]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004bc:	4a6f      	ldr	r2, [pc, #444]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 80004be:	f043 0302 	orr.w	r3, r3, #2
 80004c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c4:	e0d2      	b.n	800066c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4a6e      	ldr	r2, [pc, #440]	; (8000684 <GPIO_PeriClkCtrl+0x1fc>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d106      	bne.n	80004dc <GPIO_PeriClkCtrl+0x54>
 80004ce:	4b6b      	ldr	r3, [pc, #428]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d2:	4a6a      	ldr	r2, [pc, #424]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 80004d4:	f043 0304 	orr.w	r3, r3, #4
 80004d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004da:	e0c7      	b.n	800066c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a6a      	ldr	r2, [pc, #424]	; (8000688 <GPIO_PeriClkCtrl+0x200>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d106      	bne.n	80004f2 <GPIO_PeriClkCtrl+0x6a>
 80004e4:	4b65      	ldr	r3, [pc, #404]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 80004e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e8:	4a64      	ldr	r2, [pc, #400]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 80004ea:	f043 0308 	orr.w	r3, r3, #8
 80004ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f0:	e0bc      	b.n	800066c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a65      	ldr	r2, [pc, #404]	; (800068c <GPIO_PeriClkCtrl+0x204>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d106      	bne.n	8000508 <GPIO_PeriClkCtrl+0x80>
 80004fa:	4b60      	ldr	r3, [pc, #384]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4a5f      	ldr	r2, [pc, #380]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 8000500:	f043 0310 	orr.w	r3, r3, #16
 8000504:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000506:	e0b1      	b.n	800066c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a61      	ldr	r2, [pc, #388]	; (8000690 <GPIO_PeriClkCtrl+0x208>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d106      	bne.n	800051e <GPIO_PeriClkCtrl+0x96>
 8000510:	4b5a      	ldr	r3, [pc, #360]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 8000512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000514:	4a59      	ldr	r2, [pc, #356]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 8000516:	f043 0320 	orr.w	r3, r3, #32
 800051a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800051c:	e0a6      	b.n	800066c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a5c      	ldr	r2, [pc, #368]	; (8000694 <GPIO_PeriClkCtrl+0x20c>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d106      	bne.n	8000534 <GPIO_PeriClkCtrl+0xac>
 8000526:	4b55      	ldr	r3, [pc, #340]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a54      	ldr	r2, [pc, #336]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 800052c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000532:	e09b      	b.n	800066c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4a58      	ldr	r2, [pc, #352]	; (8000698 <GPIO_PeriClkCtrl+0x210>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d106      	bne.n	800054a <GPIO_PeriClkCtrl+0xc2>
 800053c:	4b4f      	ldr	r3, [pc, #316]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 800053e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000540:	4a4e      	ldr	r2, [pc, #312]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 8000542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000546:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000548:	e090      	b.n	800066c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4a53      	ldr	r2, [pc, #332]	; (800069c <GPIO_PeriClkCtrl+0x214>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d106      	bne.n	8000560 <GPIO_PeriClkCtrl+0xd8>
 8000552:	4b4a      	ldr	r3, [pc, #296]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a49      	ldr	r2, [pc, #292]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 8000558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800055e:	e085      	b.n	800066c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4a4f      	ldr	r2, [pc, #316]	; (80006a0 <GPIO_PeriClkCtrl+0x218>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d106      	bne.n	8000576 <GPIO_PeriClkCtrl+0xee>
 8000568:	4b44      	ldr	r3, [pc, #272]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 800056a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056c:	4a43      	ldr	r2, [pc, #268]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 800056e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000572:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000574:	e07a      	b.n	800066c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000576:	4b41      	ldr	r3, [pc, #260]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	4a40      	ldr	r2, [pc, #256]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 800057c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000580:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000582:	e073      	b.n	800066c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a3c      	ldr	r2, [pc, #240]	; (8000678 <GPIO_PeriClkCtrl+0x1f0>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d106      	bne.n	800059a <GPIO_PeriClkCtrl+0x112>
 800058c:	4b3b      	ldr	r3, [pc, #236]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 800058e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000590:	4a3a      	ldr	r2, [pc, #232]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 8000592:	f023 0301 	bic.w	r3, r3, #1
 8000596:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000598:	e068      	b.n	800066c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a38      	ldr	r2, [pc, #224]	; (8000680 <GPIO_PeriClkCtrl+0x1f8>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d106      	bne.n	80005b0 <GPIO_PeriClkCtrl+0x128>
 80005a2:	4b36      	ldr	r3, [pc, #216]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a35      	ldr	r2, [pc, #212]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 80005a8:	f023 0302 	bic.w	r3, r3, #2
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ae:	e05d      	b.n	800066c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4a34      	ldr	r2, [pc, #208]	; (8000684 <GPIO_PeriClkCtrl+0x1fc>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d106      	bne.n	80005c6 <GPIO_PeriClkCtrl+0x13e>
 80005b8:	4b30      	ldr	r3, [pc, #192]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 80005ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005bc:	4a2f      	ldr	r2, [pc, #188]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 80005be:	f023 0304 	bic.w	r3, r3, #4
 80005c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c4:	e052      	b.n	800066c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4a2f      	ldr	r2, [pc, #188]	; (8000688 <GPIO_PeriClkCtrl+0x200>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d106      	bne.n	80005dc <GPIO_PeriClkCtrl+0x154>
 80005ce:	4b2b      	ldr	r3, [pc, #172]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a2a      	ldr	r2, [pc, #168]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 80005d4:	f023 0308 	bic.w	r3, r3, #8
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005da:	e047      	b.n	800066c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4a2b      	ldr	r2, [pc, #172]	; (800068c <GPIO_PeriClkCtrl+0x204>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d106      	bne.n	80005f2 <GPIO_PeriClkCtrl+0x16a>
 80005e4:	4b25      	ldr	r3, [pc, #148]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 80005e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e8:	4a24      	ldr	r2, [pc, #144]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 80005ea:	f023 0310 	bic.w	r3, r3, #16
 80005ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005f0:	e03c      	b.n	800066c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4a26      	ldr	r2, [pc, #152]	; (8000690 <GPIO_PeriClkCtrl+0x208>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d106      	bne.n	8000608 <GPIO_PeriClkCtrl+0x180>
 80005fa:	4b20      	ldr	r3, [pc, #128]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a1f      	ldr	r2, [pc, #124]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 8000600:	f023 0320 	bic.w	r3, r3, #32
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000606:	e031      	b.n	800066c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a22      	ldr	r2, [pc, #136]	; (8000694 <GPIO_PeriClkCtrl+0x20c>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <GPIO_PeriClkCtrl+0x196>
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 8000612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000614:	4a19      	ldr	r2, [pc, #100]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 8000616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800061a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800061c:	e026      	b.n	800066c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a1d      	ldr	r2, [pc, #116]	; (8000698 <GPIO_PeriClkCtrl+0x210>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <GPIO_PeriClkCtrl+0x1ac>
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a14      	ldr	r2, [pc, #80]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 800062c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000632:	e01b      	b.n	800066c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a19      	ldr	r2, [pc, #100]	; (800069c <GPIO_PeriClkCtrl+0x214>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <GPIO_PeriClkCtrl+0x1c2>
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000640:	4a0e      	ldr	r2, [pc, #56]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 8000642:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000646:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000648:	e010      	b.n	800066c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <GPIO_PeriClkCtrl+0x218>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d106      	bne.n	8000660 <GPIO_PeriClkCtrl+0x1d8>
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a09      	ldr	r2, [pc, #36]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 8000658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800065e:	e005      	b.n	800066c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000664:	4a05      	ldr	r2, [pc, #20]	; (800067c <GPIO_PeriClkCtrl+0x1f4>)
 8000666:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800066a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	40020000 	.word	0x40020000
 800067c:	40023800 	.word	0x40023800
 8000680:	40020400 	.word	0x40020400
 8000684:	40020800 	.word	0x40020800
 8000688:	40020c00 	.word	0x40020c00
 800068c:	40020100 	.word	0x40020100
 8000690:	40021400 	.word	0x40021400
 8000694:	40021800 	.word	0x40021800
 8000698:	40021c00 	.word	0x40021c00
 800069c:	40022000 	.word	0x40022000
 80006a0:	40022400 	.word	0x40022400

080006a4 <GPIO_Init>:
 * @param[in]			-
 *
 * @return				- none
 * @note				- none
 */
void GPIO_Init(GPIO_Handle_t* pGPIOHandler) {
 80006a4:	b5b0      	push	{r4, r5, r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

	//uint32_t temp;
	GPIO_Reg_t* GPIOx = pGPIOHandler->pGPIOx;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	623b      	str	r3, [r7, #32]
	GPIO_PinConfig_t GPIOx_PinConf = pGPIOHandler->GPIOx_PinConfig;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f107 0408 	add.w	r4, r7, #8
 80006b8:	1d1d      	adds	r5, r3, #4
 80006ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80006c2:	e884 0003 	stmia.w	r4, {r0, r1}

	//Enable the GPIO Clock
	GPIO_PeriClkCtrl(GPIOx, ENABLE);
 80006c6:	2101      	movs	r1, #1
 80006c8:	6a38      	ldr	r0, [r7, #32]
 80006ca:	f7ff fedd 	bl	8000488 <GPIO_PeriClkCtrl>

	/*Note: before setting the bits: make sure those registers are clear */
	//Clearing the registers
	//Setting the bits register
	for (uint16_t i = 0U; i < GPIO_PIN_NUMBER; i++) {
 80006ce:	2300      	movs	r3, #0
 80006d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80006d2:	e0f7      	b.n	80008c4 <GPIO_Init+0x220>

		//Check if the ith bit is set
		if (GPIOx_PinConf.GPIO_PinNumber & (1 << i)) {
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80006d8:	2101      	movs	r1, #1
 80006da:	fa01 f202 	lsl.w	r2, r1, r2
 80006de:	4013      	ands	r3, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	f000 80ec 	beq.w	80008be <GPIO_Init+0x21a>

			//Handle the GPIO pin alternate function mode and GPIO output mode
			if (GPIOx_PinConf.GPIO_PinMode == GPIO_ALT_FUNC_MODE || GPIOx_PinConf.GPIO_PinMode == GPIO_OUTPUT_MODE) {
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	d002      	beq.n	80006f2 <GPIO_Init+0x4e>
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d12c      	bne.n	800074c <GPIO_Init+0xa8>
				if (i < (GPIO_PIN_NUMBER / 2)) {
 80006f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006f4:	2b07      	cmp	r3, #7
 80006f6:	d80a      	bhi.n	800070e <GPIO_Init+0x6a>
					GPIOx->AFR[0] |= (GPIOx_PinConf.GPIO_PinAltFuncMode << i * 4U);
 80006f8:	6a3b      	ldr	r3, [r7, #32]
 80006fa:	6a1a      	ldr	r2, [r3, #32]
 80006fc:	69f9      	ldr	r1, [r7, #28]
 80006fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	fa01 f303 	lsl.w	r3, r1, r3
 8000706:	431a      	orrs	r2, r3
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	621a      	str	r2, [r3, #32]
 800070c:	e00b      	b.n	8000726 <GPIO_Init+0x82>
				} else {
					GPIOx->AFR[1] |= (GPIOx_PinConf.GPIO_PinAltFuncMode << (i % (GPIO_PIN_NUMBER / 2)) * 4U);
 800070e:	6a3b      	ldr	r3, [r7, #32]
 8000710:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000712:	69f9      	ldr	r1, [r7, #28]
 8000714:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	fa01 f303 	lsl.w	r3, r1, r3
 8000720:	431a      	orrs	r2, r3
 8000722:	6a3b      	ldr	r3, [r7, #32]
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
				}

				//Configure the OTYPER register
				GPIOx->OTYPER |= (GPIOx_PinConf.GPIO_PinOPType << i);
 8000726:	6a3b      	ldr	r3, [r7, #32]
 8000728:	685a      	ldr	r2, [r3, #4]
 800072a:	69b9      	ldr	r1, [r7, #24]
 800072c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800072e:	fa01 f303 	lsl.w	r3, r1, r3
 8000732:	431a      	orrs	r2, r3
 8000734:	6a3b      	ldr	r3, [r7, #32]
 8000736:	605a      	str	r2, [r3, #4]

				//Configure the OSPEED register
				GPIOx->OSPEEDR |= (GPIOx_PinConf.GPIO_PinSpeed << i * 2U);
 8000738:	6a3b      	ldr	r3, [r7, #32]
 800073a:	689a      	ldr	r2, [r3, #8]
 800073c:	6939      	ldr	r1, [r7, #16]
 800073e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	431a      	orrs	r2, r3
 8000748:	6a3b      	ldr	r3, [r7, #32]
 800074a:	609a      	str	r2, [r3, #8]
			}

			//Handle the GPIO pin interrupt mode
			if ((GPIOx_PinConf.GPIO_PinMode == GPIO_IT_FT_MODE) || (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RT_MODE)
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	2b04      	cmp	r3, #4
 8000750:	d006      	beq.n	8000760 <GPIO_Init+0xbc>
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	2b05      	cmp	r3, #5
 8000756:	d003      	beq.n	8000760 <GPIO_Init+0xbc>
				|| (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RFT_MODE)) {
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	2b06      	cmp	r3, #6
 800075c:	f040 809b 	bne.w	8000896 <GPIO_Init+0x1f2>

				//Enable the clock for SYSCFG registers
				SYSCFG_PCLK_EN();
 8000760:	4b5c      	ldr	r3, [pc, #368]	; (80008d4 <GPIO_Init+0x230>)
 8000762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000764:	4a5b      	ldr	r2, [pc, #364]	; (80008d4 <GPIO_Init+0x230>)
 8000766:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076a:	6453      	str	r3, [r2, #68]	; 0x44

				//Handling the falling edge cases
				if (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_FT_MODE) {
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2b04      	cmp	r3, #4
 8000770:	d115      	bne.n	800079e <GPIO_Init+0xfa>
					//Configure the FTSR
					EXTI->FTSR |= (1 << i);
 8000772:	4b59      	ldr	r3, [pc, #356]	; (80008d8 <GPIO_Init+0x234>)
 8000774:	68db      	ldr	r3, [r3, #12]
 8000776:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000778:	2101      	movs	r1, #1
 800077a:	fa01 f202 	lsl.w	r2, r1, r2
 800077e:	4611      	mov	r1, r2
 8000780:	4a55      	ldr	r2, [pc, #340]	; (80008d8 <GPIO_Init+0x234>)
 8000782:	430b      	orrs	r3, r1
 8000784:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~(1 << i); //Clear the corresponding RTSR bit
 8000786:	4b54      	ldr	r3, [pc, #336]	; (80008d8 <GPIO_Init+0x234>)
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800078c:	2101      	movs	r1, #1
 800078e:	fa01 f202 	lsl.w	r2, r1, r2
 8000792:	43d2      	mvns	r2, r2
 8000794:	4611      	mov	r1, r2
 8000796:	4a50      	ldr	r2, [pc, #320]	; (80008d8 <GPIO_Init+0x234>)
 8000798:	400b      	ands	r3, r1
 800079a:	6093      	str	r3, [r2, #8]
 800079c:	e02c      	b.n	80007f8 <GPIO_Init+0x154>
				} else if (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RT_MODE) {
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	2b05      	cmp	r3, #5
 80007a2:	d115      	bne.n	80007d0 <GPIO_Init+0x12c>
					//Configure the RTSR
					EXTI->RTSR |= (1 << i);
 80007a4:	4b4c      	ldr	r3, [pc, #304]	; (80008d8 <GPIO_Init+0x234>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80007aa:	2101      	movs	r1, #1
 80007ac:	fa01 f202 	lsl.w	r2, r1, r2
 80007b0:	4611      	mov	r1, r2
 80007b2:	4a49      	ldr	r2, [pc, #292]	; (80008d8 <GPIO_Init+0x234>)
 80007b4:	430b      	orrs	r3, r1
 80007b6:	6093      	str	r3, [r2, #8]
					EXTI->FTSR &= ~(1 << i); //Clear the corresponding FTSR bit
 80007b8:	4b47      	ldr	r3, [pc, #284]	; (80008d8 <GPIO_Init+0x234>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80007be:	2101      	movs	r1, #1
 80007c0:	fa01 f202 	lsl.w	r2, r1, r2
 80007c4:	43d2      	mvns	r2, r2
 80007c6:	4611      	mov	r1, r2
 80007c8:	4a43      	ldr	r2, [pc, #268]	; (80008d8 <GPIO_Init+0x234>)
 80007ca:	400b      	ands	r3, r1
 80007cc:	60d3      	str	r3, [r2, #12]
 80007ce:	e013      	b.n	80007f8 <GPIO_Init+0x154>
				}  else {
					//Configure both the FTSR and RTSR
					EXTI->FTSR |= (1 << i);
 80007d0:	4b41      	ldr	r3, [pc, #260]	; (80008d8 <GPIO_Init+0x234>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80007d6:	2101      	movs	r1, #1
 80007d8:	fa01 f202 	lsl.w	r2, r1, r2
 80007dc:	4611      	mov	r1, r2
 80007de:	4a3e      	ldr	r2, [pc, #248]	; (80008d8 <GPIO_Init+0x234>)
 80007e0:	430b      	orrs	r3, r1
 80007e2:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR |= (1 << i);
 80007e4:	4b3c      	ldr	r3, [pc, #240]	; (80008d8 <GPIO_Init+0x234>)
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80007ea:	2101      	movs	r1, #1
 80007ec:	fa01 f202 	lsl.w	r2, r1, r2
 80007f0:	4611      	mov	r1, r2
 80007f2:	4a39      	ldr	r2, [pc, #228]	; (80008d8 <GPIO_Init+0x234>)
 80007f4:	430b      	orrs	r3, r1
 80007f6:	6093      	str	r3, [r2, #8]
				//Configure the GPIO port selection in SYSCFG_EXTICR
				//Rule: int quotient = n >> z
				//		int remainder = n & (~(~(int) 0) << z)
				//In this case, since we always want z = 2, as we divide by 4,
				//the term ~(~(int) 0) << z) = 0x03U
				SYSCFG->EXTICR[i >> 2U] |= GPIO_PORT_INDEX(GPIOx) << ((i & 0x03U) * 4U);
 80007f8:	4a38      	ldr	r2, [pc, #224]	; (80008dc <GPIO_Init+0x238>)
 80007fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007fc:	089b      	lsrs	r3, r3, #2
 80007fe:	b29b      	uxth	r3, r3
 8000800:	3302      	adds	r3, #2
 8000802:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000806:	6a3b      	ldr	r3, [r7, #32]
 8000808:	4935      	ldr	r1, [pc, #212]	; (80008e0 <GPIO_Init+0x23c>)
 800080a:	428b      	cmp	r3, r1
 800080c:	d02b      	beq.n	8000866 <GPIO_Init+0x1c2>
 800080e:	6a3b      	ldr	r3, [r7, #32]
 8000810:	4934      	ldr	r1, [pc, #208]	; (80008e4 <GPIO_Init+0x240>)
 8000812:	428b      	cmp	r3, r1
 8000814:	d025      	beq.n	8000862 <GPIO_Init+0x1be>
 8000816:	6a3b      	ldr	r3, [r7, #32]
 8000818:	4933      	ldr	r1, [pc, #204]	; (80008e8 <GPIO_Init+0x244>)
 800081a:	428b      	cmp	r3, r1
 800081c:	d01f      	beq.n	800085e <GPIO_Init+0x1ba>
 800081e:	6a3b      	ldr	r3, [r7, #32]
 8000820:	4932      	ldr	r1, [pc, #200]	; (80008ec <GPIO_Init+0x248>)
 8000822:	428b      	cmp	r3, r1
 8000824:	d019      	beq.n	800085a <GPIO_Init+0x1b6>
 8000826:	6a3b      	ldr	r3, [r7, #32]
 8000828:	4931      	ldr	r1, [pc, #196]	; (80008f0 <GPIO_Init+0x24c>)
 800082a:	428b      	cmp	r3, r1
 800082c:	d013      	beq.n	8000856 <GPIO_Init+0x1b2>
 800082e:	6a3b      	ldr	r3, [r7, #32]
 8000830:	4930      	ldr	r1, [pc, #192]	; (80008f4 <GPIO_Init+0x250>)
 8000832:	428b      	cmp	r3, r1
 8000834:	d00d      	beq.n	8000852 <GPIO_Init+0x1ae>
 8000836:	6a3b      	ldr	r3, [r7, #32]
 8000838:	492f      	ldr	r1, [pc, #188]	; (80008f8 <GPIO_Init+0x254>)
 800083a:	428b      	cmp	r3, r1
 800083c:	d007      	beq.n	800084e <GPIO_Init+0x1aa>
 800083e:	6a3b      	ldr	r3, [r7, #32]
 8000840:	492e      	ldr	r1, [pc, #184]	; (80008fc <GPIO_Init+0x258>)
 8000842:	428b      	cmp	r3, r1
 8000844:	d101      	bne.n	800084a <GPIO_Init+0x1a6>
 8000846:	2307      	movs	r3, #7
 8000848:	e00e      	b.n	8000868 <GPIO_Init+0x1c4>
 800084a:	2308      	movs	r3, #8
 800084c:	e00c      	b.n	8000868 <GPIO_Init+0x1c4>
 800084e:	2306      	movs	r3, #6
 8000850:	e00a      	b.n	8000868 <GPIO_Init+0x1c4>
 8000852:	2305      	movs	r3, #5
 8000854:	e008      	b.n	8000868 <GPIO_Init+0x1c4>
 8000856:	2304      	movs	r3, #4
 8000858:	e006      	b.n	8000868 <GPIO_Init+0x1c4>
 800085a:	2303      	movs	r3, #3
 800085c:	e004      	b.n	8000868 <GPIO_Init+0x1c4>
 800085e:	2302      	movs	r3, #2
 8000860:	e002      	b.n	8000868 <GPIO_Init+0x1c4>
 8000862:	2301      	movs	r3, #1
 8000864:	e000      	b.n	8000868 <GPIO_Init+0x1c4>
 8000866:	2300      	movs	r3, #0
 8000868:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800086a:	f001 0103 	and.w	r1, r1, #3
 800086e:	0089      	lsls	r1, r1, #2
 8000870:	408b      	lsls	r3, r1
 8000872:	481a      	ldr	r0, [pc, #104]	; (80008dc <GPIO_Init+0x238>)
 8000874:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8000876:	0889      	lsrs	r1, r1, #2
 8000878:	b289      	uxth	r1, r1
 800087a:	431a      	orrs	r2, r3
 800087c:	1c8b      	adds	r3, r1, #2
 800087e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

				//Enable the EXTI interrupt delivery using IMR
				EXTI->IMR |= (1 << i);
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <GPIO_Init+0x234>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000888:	2101      	movs	r1, #1
 800088a:	fa01 f202 	lsl.w	r2, r1, r2
 800088e:	4611      	mov	r1, r2
 8000890:	4a11      	ldr	r2, [pc, #68]	; (80008d8 <GPIO_Init+0x234>)
 8000892:	430b      	orrs	r3, r1
 8000894:	6013      	str	r3, [r2, #0]
			}

			//Handle the MODER register
			GPIOx->MODER |= (GPIOx_PinConf.GPIO_PinMode << i * 2U);
 8000896:	6a3b      	ldr	r3, [r7, #32]
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	68f9      	ldr	r1, [r7, #12]
 800089c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	fa01 f303 	lsl.w	r3, r1, r3
 80008a4:	431a      	orrs	r2, r3
 80008a6:	6a3b      	ldr	r3, [r7, #32]
 80008a8:	601a      	str	r2, [r3, #0]

			//Handle the PuPdCtrl Register
			GPIOx->PUPDR |= (GPIOx_PinConf.GPIO_PinPuPdCtrl << i * 2U);
 80008aa:	6a3b      	ldr	r3, [r7, #32]
 80008ac:	68da      	ldr	r2, [r3, #12]
 80008ae:	6979      	ldr	r1, [r7, #20]
 80008b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	fa01 f303 	lsl.w	r3, r1, r3
 80008b8:	431a      	orrs	r2, r3
 80008ba:	6a3b      	ldr	r3, [r7, #32]
 80008bc:	60da      	str	r2, [r3, #12]
	for (uint16_t i = 0U; i < GPIO_PIN_NUMBER; i++) {
 80008be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008c0:	3301      	adds	r3, #1
 80008c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80008c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008c6:	2b0f      	cmp	r3, #15
 80008c8:	f67f af04 	bls.w	80006d4 <GPIO_Init+0x30>
		}
	}
}
 80008cc:	bf00      	nop
 80008ce:	3728      	adds	r7, #40	; 0x28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bdb0      	pop	{r4, r5, r7, pc}
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40013c00 	.word	0x40013c00
 80008dc:	40013800 	.word	0x40013800
 80008e0:	40020000 	.word	0x40020000
 80008e4:	40020400 	.word	0x40020400
 80008e8:	40020800 	.word	0x40020800
 80008ec:	40020c00 	.word	0x40020c00
 80008f0:	40020100 	.word	0x40020100
 80008f4:	40021400 	.word	0x40021400
 80008f8:	40021800 	.word	0x40021800
 80008fc:	40021c00 	.word	0x40021c00

08000900 <GPIO_ReadFromInputPin>:
 * @param[in]			- The pin number
 *
 * @return				- unsigned 8 bit integer
 * @note				- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_Reg_t* pGPIOx, uint16_t pinNumber) {
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	460b      	mov	r3, r1
 800090a:	807b      	strh	r3, [r7, #2]
	//value = (uint8_t) ((pGPIOx->IDR & (1 << pinNumber)) >> pinNumber);
	/*or value = (uint8_t) ((pGPIOx->IDR >> pinNumber) & 0x1);*/
	return ((pGPIOx->IDR & pinNumber) == pinNumber) ? 1 : 0;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	691a      	ldr	r2, [r3, #16]
 8000910:	887b      	ldrh	r3, [r7, #2]
 8000912:	401a      	ands	r2, r3
 8000914:	887b      	ldrh	r3, [r7, #2]
 8000916:	429a      	cmp	r2, r3
 8000918:	bf0c      	ite	eq
 800091a:	2301      	moveq	r3, #1
 800091c:	2300      	movne	r3, #0
 800091e:	b2db      	uxtb	r3, r3
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <GPIO_WriteToOutputPin>:
 * @param[in]			- unsigned 8 bit integer pin number
 * @param[in] 			- unsigned 8 bit integer value
 * @return				- none
 * @note				- none
 */
void GPIO_WriteToOutputPin(GPIO_Reg_t* pGPIOx, uint16_t pinNumber, uint8_t value) {
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	807b      	strh	r3, [r7, #2]
 8000938:	4613      	mov	r3, r2
 800093a:	707b      	strb	r3, [r7, #1]
	if (value) {
 800093c:	787b      	ldrb	r3, [r7, #1]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d003      	beq.n	800094a <GPIO_WriteToOutputPin+0x1e>
		pGPIOx->BSRR = pinNumber;
 8000942:	887a      	ldrh	r2, [r7, #2]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	619a      	str	r2, [r3, #24]
	} else {
		pGPIOx->BSRR = pinNumber << GPIO_PIN_NUMBER;
	}
}
 8000948:	e004      	b.n	8000954 <GPIO_WriteToOutputPin+0x28>
		pGPIOx->BSRR = pinNumber << GPIO_PIN_NUMBER;
 800094a:	887b      	ldrh	r3, [r7, #2]
 800094c:	041b      	lsls	r3, r3, #16
 800094e:	461a      	mov	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	619a      	str	r2, [r3, #24]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <__errno>:
 8000960:	4b01      	ldr	r3, [pc, #4]	; (8000968 <__errno+0x8>)
 8000962:	6818      	ldr	r0, [r3, #0]
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000000 	.word	0x20000000

0800096c <_fclose_r>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	4605      	mov	r5, r0
 8000970:	460c      	mov	r4, r1
 8000972:	b911      	cbnz	r1, 800097a <_fclose_r+0xe>
 8000974:	2600      	movs	r6, #0
 8000976:	4630      	mov	r0, r6
 8000978:	bd70      	pop	{r4, r5, r6, pc}
 800097a:	b118      	cbz	r0, 8000984 <_fclose_r+0x18>
 800097c:	6983      	ldr	r3, [r0, #24]
 800097e:	b90b      	cbnz	r3, 8000984 <_fclose_r+0x18>
 8000980:	f000 f93e 	bl	8000c00 <__sinit>
 8000984:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <_fclose_r+0x98>)
 8000986:	429c      	cmp	r4, r3
 8000988:	d132      	bne.n	80009f0 <_fclose_r+0x84>
 800098a:	686c      	ldr	r4, [r5, #4]
 800098c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d0ef      	beq.n	8000974 <_fclose_r+0x8>
 8000994:	4621      	mov	r1, r4
 8000996:	4628      	mov	r0, r5
 8000998:	f000 f842 	bl	8000a20 <__sflush_r>
 800099c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800099e:	4606      	mov	r6, r0
 80009a0:	b133      	cbz	r3, 80009b0 <_fclose_r+0x44>
 80009a2:	6a21      	ldr	r1, [r4, #32]
 80009a4:	4628      	mov	r0, r5
 80009a6:	4798      	blx	r3
 80009a8:	2800      	cmp	r0, #0
 80009aa:	bfb8      	it	lt
 80009ac:	f04f 36ff 	movlt.w	r6, #4294967295
 80009b0:	89a3      	ldrh	r3, [r4, #12]
 80009b2:	061b      	lsls	r3, r3, #24
 80009b4:	d503      	bpl.n	80009be <_fclose_r+0x52>
 80009b6:	6921      	ldr	r1, [r4, #16]
 80009b8:	4628      	mov	r0, r5
 80009ba:	f000 fb73 	bl	80010a4 <_free_r>
 80009be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009c0:	b141      	cbz	r1, 80009d4 <_fclose_r+0x68>
 80009c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009c6:	4299      	cmp	r1, r3
 80009c8:	d002      	beq.n	80009d0 <_fclose_r+0x64>
 80009ca:	4628      	mov	r0, r5
 80009cc:	f000 fb6a 	bl	80010a4 <_free_r>
 80009d0:	2300      	movs	r3, #0
 80009d2:	6363      	str	r3, [r4, #52]	; 0x34
 80009d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80009d6:	b121      	cbz	r1, 80009e2 <_fclose_r+0x76>
 80009d8:	4628      	mov	r0, r5
 80009da:	f000 fb63 	bl	80010a4 <_free_r>
 80009de:	2300      	movs	r3, #0
 80009e0:	64a3      	str	r3, [r4, #72]	; 0x48
 80009e2:	f000 f979 	bl	8000cd8 <__sfp_lock_acquire>
 80009e6:	2300      	movs	r3, #0
 80009e8:	81a3      	strh	r3, [r4, #12]
 80009ea:	f000 f976 	bl	8000cda <__sfp_lock_release>
 80009ee:	e7c2      	b.n	8000976 <_fclose_r+0xa>
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <_fclose_r+0x9c>)
 80009f2:	429c      	cmp	r4, r3
 80009f4:	d101      	bne.n	80009fa <_fclose_r+0x8e>
 80009f6:	68ac      	ldr	r4, [r5, #8]
 80009f8:	e7c8      	b.n	800098c <_fclose_r+0x20>
 80009fa:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <_fclose_r+0xa0>)
 80009fc:	429c      	cmp	r4, r3
 80009fe:	bf08      	it	eq
 8000a00:	68ec      	ldreq	r4, [r5, #12]
 8000a02:	e7c3      	b.n	800098c <_fclose_r+0x20>
 8000a04:	080015d0 	.word	0x080015d0
 8000a08:	080015f0 	.word	0x080015f0
 8000a0c:	080015b0 	.word	0x080015b0

08000a10 <fclose>:
 8000a10:	4b02      	ldr	r3, [pc, #8]	; (8000a1c <fclose+0xc>)
 8000a12:	4601      	mov	r1, r0
 8000a14:	6818      	ldr	r0, [r3, #0]
 8000a16:	f7ff bfa9 	b.w	800096c <_fclose_r>
 8000a1a:	bf00      	nop
 8000a1c:	20000000 	.word	0x20000000

08000a20 <__sflush_r>:
 8000a20:	898a      	ldrh	r2, [r1, #12]
 8000a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a26:	4605      	mov	r5, r0
 8000a28:	0710      	lsls	r0, r2, #28
 8000a2a:	460c      	mov	r4, r1
 8000a2c:	d458      	bmi.n	8000ae0 <__sflush_r+0xc0>
 8000a2e:	684b      	ldr	r3, [r1, #4]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	dc05      	bgt.n	8000a40 <__sflush_r+0x20>
 8000a34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	dc02      	bgt.n	8000a40 <__sflush_r+0x20>
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	d0f9      	beq.n	8000a3a <__sflush_r+0x1a>
 8000a46:	2300      	movs	r3, #0
 8000a48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000a4c:	682f      	ldr	r7, [r5, #0]
 8000a4e:	6a21      	ldr	r1, [r4, #32]
 8000a50:	602b      	str	r3, [r5, #0]
 8000a52:	d032      	beq.n	8000aba <__sflush_r+0x9a>
 8000a54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000a56:	89a3      	ldrh	r3, [r4, #12]
 8000a58:	075a      	lsls	r2, r3, #29
 8000a5a:	d505      	bpl.n	8000a68 <__sflush_r+0x48>
 8000a5c:	6863      	ldr	r3, [r4, #4]
 8000a5e:	1ac0      	subs	r0, r0, r3
 8000a60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a62:	b10b      	cbz	r3, 8000a68 <__sflush_r+0x48>
 8000a64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a66:	1ac0      	subs	r0, r0, r3
 8000a68:	2300      	movs	r3, #0
 8000a6a:	4602      	mov	r2, r0
 8000a6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a6e:	6a21      	ldr	r1, [r4, #32]
 8000a70:	4628      	mov	r0, r5
 8000a72:	47b0      	blx	r6
 8000a74:	1c43      	adds	r3, r0, #1
 8000a76:	89a3      	ldrh	r3, [r4, #12]
 8000a78:	d106      	bne.n	8000a88 <__sflush_r+0x68>
 8000a7a:	6829      	ldr	r1, [r5, #0]
 8000a7c:	291d      	cmp	r1, #29
 8000a7e:	d848      	bhi.n	8000b12 <__sflush_r+0xf2>
 8000a80:	4a29      	ldr	r2, [pc, #164]	; (8000b28 <__sflush_r+0x108>)
 8000a82:	40ca      	lsrs	r2, r1
 8000a84:	07d6      	lsls	r6, r2, #31
 8000a86:	d544      	bpl.n	8000b12 <__sflush_r+0xf2>
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6062      	str	r2, [r4, #4]
 8000a8c:	04d9      	lsls	r1, r3, #19
 8000a8e:	6922      	ldr	r2, [r4, #16]
 8000a90:	6022      	str	r2, [r4, #0]
 8000a92:	d504      	bpl.n	8000a9e <__sflush_r+0x7e>
 8000a94:	1c42      	adds	r2, r0, #1
 8000a96:	d101      	bne.n	8000a9c <__sflush_r+0x7c>
 8000a98:	682b      	ldr	r3, [r5, #0]
 8000a9a:	b903      	cbnz	r3, 8000a9e <__sflush_r+0x7e>
 8000a9c:	6560      	str	r0, [r4, #84]	; 0x54
 8000a9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000aa0:	602f      	str	r7, [r5, #0]
 8000aa2:	2900      	cmp	r1, #0
 8000aa4:	d0c9      	beq.n	8000a3a <__sflush_r+0x1a>
 8000aa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000aaa:	4299      	cmp	r1, r3
 8000aac:	d002      	beq.n	8000ab4 <__sflush_r+0x94>
 8000aae:	4628      	mov	r0, r5
 8000ab0:	f000 faf8 	bl	80010a4 <_free_r>
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	6360      	str	r0, [r4, #52]	; 0x34
 8000ab8:	e7c0      	b.n	8000a3c <__sflush_r+0x1c>
 8000aba:	2301      	movs	r3, #1
 8000abc:	4628      	mov	r0, r5
 8000abe:	47b0      	blx	r6
 8000ac0:	1c41      	adds	r1, r0, #1
 8000ac2:	d1c8      	bne.n	8000a56 <__sflush_r+0x36>
 8000ac4:	682b      	ldr	r3, [r5, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d0c5      	beq.n	8000a56 <__sflush_r+0x36>
 8000aca:	2b1d      	cmp	r3, #29
 8000acc:	d001      	beq.n	8000ad2 <__sflush_r+0xb2>
 8000ace:	2b16      	cmp	r3, #22
 8000ad0:	d101      	bne.n	8000ad6 <__sflush_r+0xb6>
 8000ad2:	602f      	str	r7, [r5, #0]
 8000ad4:	e7b1      	b.n	8000a3a <__sflush_r+0x1a>
 8000ad6:	89a3      	ldrh	r3, [r4, #12]
 8000ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000adc:	81a3      	strh	r3, [r4, #12]
 8000ade:	e7ad      	b.n	8000a3c <__sflush_r+0x1c>
 8000ae0:	690f      	ldr	r7, [r1, #16]
 8000ae2:	2f00      	cmp	r7, #0
 8000ae4:	d0a9      	beq.n	8000a3a <__sflush_r+0x1a>
 8000ae6:	0793      	lsls	r3, r2, #30
 8000ae8:	680e      	ldr	r6, [r1, #0]
 8000aea:	bf08      	it	eq
 8000aec:	694b      	ldreq	r3, [r1, #20]
 8000aee:	600f      	str	r7, [r1, #0]
 8000af0:	bf18      	it	ne
 8000af2:	2300      	movne	r3, #0
 8000af4:	eba6 0807 	sub.w	r8, r6, r7
 8000af8:	608b      	str	r3, [r1, #8]
 8000afa:	f1b8 0f00 	cmp.w	r8, #0
 8000afe:	dd9c      	ble.n	8000a3a <__sflush_r+0x1a>
 8000b00:	4643      	mov	r3, r8
 8000b02:	463a      	mov	r2, r7
 8000b04:	6a21      	ldr	r1, [r4, #32]
 8000b06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000b08:	4628      	mov	r0, r5
 8000b0a:	47b0      	blx	r6
 8000b0c:	2800      	cmp	r0, #0
 8000b0e:	dc06      	bgt.n	8000b1e <__sflush_r+0xfe>
 8000b10:	89a3      	ldrh	r3, [r4, #12]
 8000b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b16:	81a3      	strh	r3, [r4, #12]
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	e78e      	b.n	8000a3c <__sflush_r+0x1c>
 8000b1e:	4407      	add	r7, r0
 8000b20:	eba8 0800 	sub.w	r8, r8, r0
 8000b24:	e7e9      	b.n	8000afa <__sflush_r+0xda>
 8000b26:	bf00      	nop
 8000b28:	20400001 	.word	0x20400001

08000b2c <_fflush_r>:
 8000b2c:	b538      	push	{r3, r4, r5, lr}
 8000b2e:	690b      	ldr	r3, [r1, #16]
 8000b30:	4605      	mov	r5, r0
 8000b32:	460c      	mov	r4, r1
 8000b34:	b1db      	cbz	r3, 8000b6e <_fflush_r+0x42>
 8000b36:	b118      	cbz	r0, 8000b40 <_fflush_r+0x14>
 8000b38:	6983      	ldr	r3, [r0, #24]
 8000b3a:	b90b      	cbnz	r3, 8000b40 <_fflush_r+0x14>
 8000b3c:	f000 f860 	bl	8000c00 <__sinit>
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <_fflush_r+0x48>)
 8000b42:	429c      	cmp	r4, r3
 8000b44:	d109      	bne.n	8000b5a <_fflush_r+0x2e>
 8000b46:	686c      	ldr	r4, [r5, #4]
 8000b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b4c:	b17b      	cbz	r3, 8000b6e <_fflush_r+0x42>
 8000b4e:	4621      	mov	r1, r4
 8000b50:	4628      	mov	r0, r5
 8000b52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b56:	f7ff bf63 	b.w	8000a20 <__sflush_r>
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <_fflush_r+0x4c>)
 8000b5c:	429c      	cmp	r4, r3
 8000b5e:	d101      	bne.n	8000b64 <_fflush_r+0x38>
 8000b60:	68ac      	ldr	r4, [r5, #8]
 8000b62:	e7f1      	b.n	8000b48 <_fflush_r+0x1c>
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <_fflush_r+0x50>)
 8000b66:	429c      	cmp	r4, r3
 8000b68:	bf08      	it	eq
 8000b6a:	68ec      	ldreq	r4, [r5, #12]
 8000b6c:	e7ec      	b.n	8000b48 <_fflush_r+0x1c>
 8000b6e:	2000      	movs	r0, #0
 8000b70:	bd38      	pop	{r3, r4, r5, pc}
 8000b72:	bf00      	nop
 8000b74:	080015d0 	.word	0x080015d0
 8000b78:	080015f0 	.word	0x080015f0
 8000b7c:	080015b0 	.word	0x080015b0

08000b80 <std>:
 8000b80:	2300      	movs	r3, #0
 8000b82:	b510      	push	{r4, lr}
 8000b84:	4604      	mov	r4, r0
 8000b86:	e9c0 3300 	strd	r3, r3, [r0]
 8000b8a:	6083      	str	r3, [r0, #8]
 8000b8c:	8181      	strh	r1, [r0, #12]
 8000b8e:	6643      	str	r3, [r0, #100]	; 0x64
 8000b90:	81c2      	strh	r2, [r0, #14]
 8000b92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b96:	6183      	str	r3, [r0, #24]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	2208      	movs	r2, #8
 8000b9c:	305c      	adds	r0, #92	; 0x5c
 8000b9e:	f000 fa79 	bl	8001094 <memset>
 8000ba2:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <std+0x38>)
 8000ba4:	6263      	str	r3, [r4, #36]	; 0x24
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <std+0x3c>)
 8000ba8:	62a3      	str	r3, [r4, #40]	; 0x28
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <std+0x40>)
 8000bac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <std+0x44>)
 8000bb0:	6224      	str	r4, [r4, #32]
 8000bb2:	6323      	str	r3, [r4, #48]	; 0x30
 8000bb4:	bd10      	pop	{r4, pc}
 8000bb6:	bf00      	nop
 8000bb8:	08001239 	.word	0x08001239
 8000bbc:	0800125b 	.word	0x0800125b
 8000bc0:	08001293 	.word	0x08001293
 8000bc4:	080012b7 	.word	0x080012b7

08000bc8 <_cleanup_r>:
 8000bc8:	4901      	ldr	r1, [pc, #4]	; (8000bd0 <_cleanup_r+0x8>)
 8000bca:	f000 b961 	b.w	8000e90 <_fwalk_reent>
 8000bce:	bf00      	nop
 8000bd0:	08000b2d 	.word	0x08000b2d

08000bd4 <__sfmoreglue>:
 8000bd4:	b570      	push	{r4, r5, r6, lr}
 8000bd6:	1e4a      	subs	r2, r1, #1
 8000bd8:	2568      	movs	r5, #104	; 0x68
 8000bda:	4355      	muls	r5, r2
 8000bdc:	460e      	mov	r6, r1
 8000bde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000be2:	f000 faad 	bl	8001140 <_malloc_r>
 8000be6:	4604      	mov	r4, r0
 8000be8:	b140      	cbz	r0, 8000bfc <__sfmoreglue+0x28>
 8000bea:	2100      	movs	r1, #0
 8000bec:	e9c0 1600 	strd	r1, r6, [r0]
 8000bf0:	300c      	adds	r0, #12
 8000bf2:	60a0      	str	r0, [r4, #8]
 8000bf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000bf8:	f000 fa4c 	bl	8001094 <memset>
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	bd70      	pop	{r4, r5, r6, pc}

08000c00 <__sinit>:
 8000c00:	6983      	ldr	r3, [r0, #24]
 8000c02:	b510      	push	{r4, lr}
 8000c04:	4604      	mov	r4, r0
 8000c06:	bb33      	cbnz	r3, 8000c56 <__sinit+0x56>
 8000c08:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000c0c:	6503      	str	r3, [r0, #80]	; 0x50
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <__sinit+0x58>)
 8000c10:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <__sinit+0x5c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	6282      	str	r2, [r0, #40]	; 0x28
 8000c16:	4298      	cmp	r0, r3
 8000c18:	bf04      	itt	eq
 8000c1a:	2301      	moveq	r3, #1
 8000c1c:	6183      	streq	r3, [r0, #24]
 8000c1e:	f000 f81f 	bl	8000c60 <__sfp>
 8000c22:	6060      	str	r0, [r4, #4]
 8000c24:	4620      	mov	r0, r4
 8000c26:	f000 f81b 	bl	8000c60 <__sfp>
 8000c2a:	60a0      	str	r0, [r4, #8]
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	f000 f817 	bl	8000c60 <__sfp>
 8000c32:	2200      	movs	r2, #0
 8000c34:	60e0      	str	r0, [r4, #12]
 8000c36:	2104      	movs	r1, #4
 8000c38:	6860      	ldr	r0, [r4, #4]
 8000c3a:	f7ff ffa1 	bl	8000b80 <std>
 8000c3e:	2201      	movs	r2, #1
 8000c40:	2109      	movs	r1, #9
 8000c42:	68a0      	ldr	r0, [r4, #8]
 8000c44:	f7ff ff9c 	bl	8000b80 <std>
 8000c48:	2202      	movs	r2, #2
 8000c4a:	2112      	movs	r1, #18
 8000c4c:	68e0      	ldr	r0, [r4, #12]
 8000c4e:	f7ff ff97 	bl	8000b80 <std>
 8000c52:	2301      	movs	r3, #1
 8000c54:	61a3      	str	r3, [r4, #24]
 8000c56:	bd10      	pop	{r4, pc}
 8000c58:	08001610 	.word	0x08001610
 8000c5c:	08000bc9 	.word	0x08000bc9

08000c60 <__sfp>:
 8000c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c62:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <__sfp+0x70>)
 8000c64:	681e      	ldr	r6, [r3, #0]
 8000c66:	69b3      	ldr	r3, [r6, #24]
 8000c68:	4607      	mov	r7, r0
 8000c6a:	b913      	cbnz	r3, 8000c72 <__sfp+0x12>
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	f7ff ffc7 	bl	8000c00 <__sinit>
 8000c72:	3648      	adds	r6, #72	; 0x48
 8000c74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	d503      	bpl.n	8000c84 <__sfp+0x24>
 8000c7c:	6833      	ldr	r3, [r6, #0]
 8000c7e:	b133      	cbz	r3, 8000c8e <__sfp+0x2e>
 8000c80:	6836      	ldr	r6, [r6, #0]
 8000c82:	e7f7      	b.n	8000c74 <__sfp+0x14>
 8000c84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000c88:	b16d      	cbz	r5, 8000ca6 <__sfp+0x46>
 8000c8a:	3468      	adds	r4, #104	; 0x68
 8000c8c:	e7f4      	b.n	8000c78 <__sfp+0x18>
 8000c8e:	2104      	movs	r1, #4
 8000c90:	4638      	mov	r0, r7
 8000c92:	f7ff ff9f 	bl	8000bd4 <__sfmoreglue>
 8000c96:	6030      	str	r0, [r6, #0]
 8000c98:	2800      	cmp	r0, #0
 8000c9a:	d1f1      	bne.n	8000c80 <__sfp+0x20>
 8000c9c:	230c      	movs	r3, #12
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <__sfp+0x74>)
 8000ca8:	6665      	str	r5, [r4, #100]	; 0x64
 8000caa:	e9c4 5500 	strd	r5, r5, [r4]
 8000cae:	60a5      	str	r5, [r4, #8]
 8000cb0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000cb4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000cb8:	2208      	movs	r2, #8
 8000cba:	4629      	mov	r1, r5
 8000cbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000cc0:	f000 f9e8 	bl	8001094 <memset>
 8000cc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000cc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000ccc:	e7e9      	b.n	8000ca2 <__sfp+0x42>
 8000cce:	bf00      	nop
 8000cd0:	08001610 	.word	0x08001610
 8000cd4:	ffff0001 	.word	0xffff0001

08000cd8 <__sfp_lock_acquire>:
 8000cd8:	4770      	bx	lr

08000cda <__sfp_lock_release>:
 8000cda:	4770      	bx	lr

08000cdc <_fopen_r>:
 8000cdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000cde:	460f      	mov	r7, r1
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	aa01      	add	r2, sp, #4
 8000ce4:	4605      	mov	r5, r0
 8000ce6:	f000 fbcd 	bl	8001484 <__sflags>
 8000cea:	4606      	mov	r6, r0
 8000cec:	b918      	cbnz	r0, 8000cf6 <_fopen_r+0x1a>
 8000cee:	2400      	movs	r4, #0
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	b003      	add	sp, #12
 8000cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf6:	4628      	mov	r0, r5
 8000cf8:	f7ff ffb2 	bl	8000c60 <__sfp>
 8000cfc:	4604      	mov	r4, r0
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	d0f5      	beq.n	8000cee <_fopen_r+0x12>
 8000d02:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8000d06:	9a01      	ldr	r2, [sp, #4]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	4628      	mov	r0, r5
 8000d0c:	f000 fa72 	bl	80011f4 <_open_r>
 8000d10:	2800      	cmp	r0, #0
 8000d12:	da06      	bge.n	8000d22 <_fopen_r+0x46>
 8000d14:	2500      	movs	r5, #0
 8000d16:	f7ff ffdf 	bl	8000cd8 <__sfp_lock_acquire>
 8000d1a:	81a5      	strh	r5, [r4, #12]
 8000d1c:	f7ff ffdd 	bl	8000cda <__sfp_lock_release>
 8000d20:	e7e5      	b.n	8000cee <_fopen_r+0x12>
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <_fopen_r+0x70>)
 8000d24:	6263      	str	r3, [r4, #36]	; 0x24
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <_fopen_r+0x74>)
 8000d28:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <_fopen_r+0x78>)
 8000d2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <_fopen_r+0x7c>)
 8000d30:	6323      	str	r3, [r4, #48]	; 0x30
 8000d32:	05f3      	lsls	r3, r6, #23
 8000d34:	81e0      	strh	r0, [r4, #14]
 8000d36:	81a6      	strh	r6, [r4, #12]
 8000d38:	6224      	str	r4, [r4, #32]
 8000d3a:	d5d9      	bpl.n	8000cf0 <_fopen_r+0x14>
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	2200      	movs	r2, #0
 8000d40:	4621      	mov	r1, r4
 8000d42:	4628      	mov	r0, r5
 8000d44:	f000 f812 	bl	8000d6c <_fseek_r>
 8000d48:	e7d2      	b.n	8000cf0 <_fopen_r+0x14>
 8000d4a:	bf00      	nop
 8000d4c:	08001239 	.word	0x08001239
 8000d50:	0800125b 	.word	0x0800125b
 8000d54:	08001293 	.word	0x08001293
 8000d58:	080012b7 	.word	0x080012b7

08000d5c <fopen>:
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <fopen+0xc>)
 8000d5e:	460a      	mov	r2, r1
 8000d60:	4601      	mov	r1, r0
 8000d62:	6818      	ldr	r0, [r3, #0]
 8000d64:	f7ff bfba 	b.w	8000cdc <_fopen_r>
 8000d68:	20000000 	.word	0x20000000

08000d6c <_fseek_r>:
 8000d6c:	f000 b800 	b.w	8000d70 <_fseeko_r>

08000d70 <_fseeko_r>:
 8000d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d74:	460c      	mov	r4, r1
 8000d76:	4691      	mov	r9, r2
 8000d78:	461e      	mov	r6, r3
 8000d7a:	4605      	mov	r5, r0
 8000d7c:	b118      	cbz	r0, 8000d86 <_fseeko_r+0x16>
 8000d7e:	6983      	ldr	r3, [r0, #24]
 8000d80:	b90b      	cbnz	r3, 8000d86 <_fseeko_r+0x16>
 8000d82:	f7ff ff3d 	bl	8000c00 <__sinit>
 8000d86:	4b3f      	ldr	r3, [pc, #252]	; (8000e84 <_fseeko_r+0x114>)
 8000d88:	429c      	cmp	r4, r3
 8000d8a:	d112      	bne.n	8000db2 <_fseeko_r+0x42>
 8000d8c:	686c      	ldr	r4, [r5, #4]
 8000d8e:	89a3      	ldrh	r3, [r4, #12]
 8000d90:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8000d94:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8000d98:	d103      	bne.n	8000da2 <_fseeko_r+0x32>
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	4628      	mov	r0, r5
 8000d9e:	f7ff fec5 	bl	8000b2c <_fflush_r>
 8000da2:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8000da6:	f1b8 0f00 	cmp.w	r8, #0
 8000daa:	d10c      	bne.n	8000dc6 <_fseeko_r+0x56>
 8000dac:	231d      	movs	r3, #29
 8000dae:	602b      	str	r3, [r5, #0]
 8000db0:	e057      	b.n	8000e62 <_fseeko_r+0xf2>
 8000db2:	4b35      	ldr	r3, [pc, #212]	; (8000e88 <_fseeko_r+0x118>)
 8000db4:	429c      	cmp	r4, r3
 8000db6:	d101      	bne.n	8000dbc <_fseeko_r+0x4c>
 8000db8:	68ac      	ldr	r4, [r5, #8]
 8000dba:	e7e8      	b.n	8000d8e <_fseeko_r+0x1e>
 8000dbc:	4b33      	ldr	r3, [pc, #204]	; (8000e8c <_fseeko_r+0x11c>)
 8000dbe:	429c      	cmp	r4, r3
 8000dc0:	bf08      	it	eq
 8000dc2:	68ec      	ldreq	r4, [r5, #12]
 8000dc4:	e7e3      	b.n	8000d8e <_fseeko_r+0x1e>
 8000dc6:	2e01      	cmp	r6, #1
 8000dc8:	d030      	beq.n	8000e2c <_fseeko_r+0xbc>
 8000dca:	2e02      	cmp	r6, #2
 8000dcc:	d001      	beq.n	8000dd2 <_fseeko_r+0x62>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d155      	bne.n	8000e7e <_fseeko_r+0x10e>
 8000dd2:	6923      	ldr	r3, [r4, #16]
 8000dd4:	b91b      	cbnz	r3, 8000dde <_fseeko_r+0x6e>
 8000dd6:	4621      	mov	r1, r4
 8000dd8:	4628      	mov	r0, r5
 8000dda:	f000 f91b 	bl	8001014 <__smakebuf_r>
 8000dde:	4621      	mov	r1, r4
 8000de0:	4628      	mov	r0, r5
 8000de2:	f7ff fea3 	bl	8000b2c <_fflush_r>
 8000de6:	4607      	mov	r7, r0
 8000de8:	2800      	cmp	r0, #0
 8000dea:	d13a      	bne.n	8000e62 <_fseeko_r+0xf2>
 8000dec:	4633      	mov	r3, r6
 8000dee:	464a      	mov	r2, r9
 8000df0:	6a21      	ldr	r1, [r4, #32]
 8000df2:	4628      	mov	r0, r5
 8000df4:	47c0      	blx	r8
 8000df6:	3001      	adds	r0, #1
 8000df8:	d033      	beq.n	8000e62 <_fseeko_r+0xf2>
 8000dfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000dfc:	b141      	cbz	r1, 8000e10 <_fseeko_r+0xa0>
 8000dfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e02:	4299      	cmp	r1, r3
 8000e04:	d002      	beq.n	8000e0c <_fseeko_r+0x9c>
 8000e06:	4628      	mov	r0, r5
 8000e08:	f000 f94c 	bl	80010a4 <_free_r>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	6363      	str	r3, [r4, #52]	; 0x34
 8000e10:	6923      	ldr	r3, [r4, #16]
 8000e12:	6023      	str	r3, [r4, #0]
 8000e14:	89a3      	ldrh	r3, [r4, #12]
 8000e16:	2100      	movs	r1, #0
 8000e18:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8000e1c:	6061      	str	r1, [r4, #4]
 8000e1e:	81a3      	strh	r3, [r4, #12]
 8000e20:	2208      	movs	r2, #8
 8000e22:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000e26:	f000 f935 	bl	8001094 <memset>
 8000e2a:	e01c      	b.n	8000e66 <_fseeko_r+0xf6>
 8000e2c:	4621      	mov	r1, r4
 8000e2e:	4628      	mov	r0, r5
 8000e30:	f7ff fe7c 	bl	8000b2c <_fflush_r>
 8000e34:	89a2      	ldrh	r2, [r4, #12]
 8000e36:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000e3a:	d00c      	beq.n	8000e56 <_fseeko_r+0xe6>
 8000e3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000e3e:	89a3      	ldrh	r3, [r4, #12]
 8000e40:	075a      	lsls	r2, r3, #29
 8000e42:	d513      	bpl.n	8000e6c <_fseeko_r+0xfc>
 8000e44:	6863      	ldr	r3, [r4, #4]
 8000e46:	1ac0      	subs	r0, r0, r3
 8000e48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000e4a:	b10b      	cbz	r3, 8000e50 <_fseeko_r+0xe0>
 8000e4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e4e:	1ac0      	subs	r0, r0, r3
 8000e50:	4481      	add	r9, r0
 8000e52:	2600      	movs	r6, #0
 8000e54:	e7bd      	b.n	8000dd2 <_fseeko_r+0x62>
 8000e56:	6a21      	ldr	r1, [r4, #32]
 8000e58:	4633      	mov	r3, r6
 8000e5a:	4628      	mov	r0, r5
 8000e5c:	47c0      	blx	r8
 8000e5e:	1c41      	adds	r1, r0, #1
 8000e60:	d1ed      	bne.n	8000e3e <_fseeko_r+0xce>
 8000e62:	f04f 37ff 	mov.w	r7, #4294967295
 8000e66:	4638      	mov	r0, r7
 8000e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e6c:	071b      	lsls	r3, r3, #28
 8000e6e:	d5ef      	bpl.n	8000e50 <_fseeko_r+0xe0>
 8000e70:	6823      	ldr	r3, [r4, #0]
 8000e72:	6922      	ldr	r2, [r4, #16]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0eb      	beq.n	8000e50 <_fseeko_r+0xe0>
 8000e78:	1a9b      	subs	r3, r3, r2
 8000e7a:	4418      	add	r0, r3
 8000e7c:	e7e8      	b.n	8000e50 <_fseeko_r+0xe0>
 8000e7e:	2316      	movs	r3, #22
 8000e80:	e795      	b.n	8000dae <_fseeko_r+0x3e>
 8000e82:	bf00      	nop
 8000e84:	080015d0 	.word	0x080015d0
 8000e88:	080015f0 	.word	0x080015f0
 8000e8c:	080015b0 	.word	0x080015b0

08000e90 <_fwalk_reent>:
 8000e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e94:	4680      	mov	r8, r0
 8000e96:	4689      	mov	r9, r1
 8000e98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000e9c:	2600      	movs	r6, #0
 8000e9e:	b914      	cbnz	r4, 8000ea6 <_fwalk_reent+0x16>
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ea6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000eaa:	3f01      	subs	r7, #1
 8000eac:	d501      	bpl.n	8000eb2 <_fwalk_reent+0x22>
 8000eae:	6824      	ldr	r4, [r4, #0]
 8000eb0:	e7f5      	b.n	8000e9e <_fwalk_reent+0xe>
 8000eb2:	89ab      	ldrh	r3, [r5, #12]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d907      	bls.n	8000ec8 <_fwalk_reent+0x38>
 8000eb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	d003      	beq.n	8000ec8 <_fwalk_reent+0x38>
 8000ec0:	4629      	mov	r1, r5
 8000ec2:	4640      	mov	r0, r8
 8000ec4:	47c8      	blx	r9
 8000ec6:	4306      	orrs	r6, r0
 8000ec8:	3568      	adds	r5, #104	; 0x68
 8000eca:	e7ee      	b.n	8000eaa <_fwalk_reent+0x1a>

08000ecc <_fwrite_r>:
 8000ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ed0:	9c08      	ldr	r4, [sp, #32]
 8000ed2:	4689      	mov	r9, r1
 8000ed4:	4617      	mov	r7, r2
 8000ed6:	fb02 f803 	mul.w	r8, r2, r3
 8000eda:	4606      	mov	r6, r0
 8000edc:	b118      	cbz	r0, 8000ee6 <_fwrite_r+0x1a>
 8000ede:	6983      	ldr	r3, [r0, #24]
 8000ee0:	b90b      	cbnz	r3, 8000ee6 <_fwrite_r+0x1a>
 8000ee2:	f7ff fe8d 	bl	8000c00 <__sinit>
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <_fwrite_r+0x90>)
 8000ee8:	429c      	cmp	r4, r3
 8000eea:	d11a      	bne.n	8000f22 <_fwrite_r+0x56>
 8000eec:	6874      	ldr	r4, [r6, #4]
 8000eee:	89a3      	ldrh	r3, [r4, #12]
 8000ef0:	071b      	lsls	r3, r3, #28
 8000ef2:	d520      	bpl.n	8000f36 <_fwrite_r+0x6a>
 8000ef4:	6923      	ldr	r3, [r4, #16]
 8000ef6:	b1f3      	cbz	r3, 8000f36 <_fwrite_r+0x6a>
 8000ef8:	2500      	movs	r5, #0
 8000efa:	4545      	cmp	r5, r8
 8000efc:	d029      	beq.n	8000f52 <_fwrite_r+0x86>
 8000efe:	68a3      	ldr	r3, [r4, #8]
 8000f00:	f819 1005 	ldrb.w	r1, [r9, r5]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	60a3      	str	r3, [r4, #8]
 8000f0a:	da04      	bge.n	8000f16 <_fwrite_r+0x4a>
 8000f0c:	69a2      	ldr	r2, [r4, #24]
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	db19      	blt.n	8000f46 <_fwrite_r+0x7a>
 8000f12:	290a      	cmp	r1, #10
 8000f14:	d017      	beq.n	8000f46 <_fwrite_r+0x7a>
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	1c5a      	adds	r2, r3, #1
 8000f1a:	6022      	str	r2, [r4, #0]
 8000f1c:	7019      	strb	r1, [r3, #0]
 8000f1e:	3501      	adds	r5, #1
 8000f20:	e7eb      	b.n	8000efa <_fwrite_r+0x2e>
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <_fwrite_r+0x94>)
 8000f24:	429c      	cmp	r4, r3
 8000f26:	d101      	bne.n	8000f2c <_fwrite_r+0x60>
 8000f28:	68b4      	ldr	r4, [r6, #8]
 8000f2a:	e7e0      	b.n	8000eee <_fwrite_r+0x22>
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <_fwrite_r+0x98>)
 8000f2e:	429c      	cmp	r4, r3
 8000f30:	bf08      	it	eq
 8000f32:	68f4      	ldreq	r4, [r6, #12]
 8000f34:	e7db      	b.n	8000eee <_fwrite_r+0x22>
 8000f36:	4621      	mov	r1, r4
 8000f38:	4630      	mov	r0, r6
 8000f3a:	f000 fa25 	bl	8001388 <__swsetup_r>
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	d0da      	beq.n	8000ef8 <_fwrite_r+0x2c>
 8000f42:	2500      	movs	r5, #0
 8000f44:	e005      	b.n	8000f52 <_fwrite_r+0x86>
 8000f46:	4622      	mov	r2, r4
 8000f48:	4630      	mov	r0, r6
 8000f4a:	f000 f9b9 	bl	80012c0 <__swbuf_r>
 8000f4e:	3001      	adds	r0, #1
 8000f50:	d1e5      	bne.n	8000f1e <_fwrite_r+0x52>
 8000f52:	fbb5 f0f7 	udiv	r0, r5, r7
 8000f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f5a:	bf00      	nop
 8000f5c:	080015d0 	.word	0x080015d0
 8000f60:	080015f0 	.word	0x080015f0
 8000f64:	080015b0 	.word	0x080015b0

08000f68 <fwrite>:
 8000f68:	b507      	push	{r0, r1, r2, lr}
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	460a      	mov	r2, r1
 8000f70:	4601      	mov	r1, r0
 8000f72:	4803      	ldr	r0, [pc, #12]	; (8000f80 <fwrite+0x18>)
 8000f74:	6800      	ldr	r0, [r0, #0]
 8000f76:	f7ff ffa9 	bl	8000ecc <_fwrite_r>
 8000f7a:	b003      	add	sp, #12
 8000f7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f80:	20000000 	.word	0x20000000

08000f84 <__libc_init_array>:
 8000f84:	b570      	push	{r4, r5, r6, lr}
 8000f86:	4e0d      	ldr	r6, [pc, #52]	; (8000fbc <__libc_init_array+0x38>)
 8000f88:	4c0d      	ldr	r4, [pc, #52]	; (8000fc0 <__libc_init_array+0x3c>)
 8000f8a:	1ba4      	subs	r4, r4, r6
 8000f8c:	10a4      	asrs	r4, r4, #2
 8000f8e:	2500      	movs	r5, #0
 8000f90:	42a5      	cmp	r5, r4
 8000f92:	d109      	bne.n	8000fa8 <__libc_init_array+0x24>
 8000f94:	4e0b      	ldr	r6, [pc, #44]	; (8000fc4 <__libc_init_array+0x40>)
 8000f96:	4c0c      	ldr	r4, [pc, #48]	; (8000fc8 <__libc_init_array+0x44>)
 8000f98:	f000 faf2 	bl	8001580 <_init>
 8000f9c:	1ba4      	subs	r4, r4, r6
 8000f9e:	10a4      	asrs	r4, r4, #2
 8000fa0:	2500      	movs	r5, #0
 8000fa2:	42a5      	cmp	r5, r4
 8000fa4:	d105      	bne.n	8000fb2 <__libc_init_array+0x2e>
 8000fa6:	bd70      	pop	{r4, r5, r6, pc}
 8000fa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fac:	4798      	blx	r3
 8000fae:	3501      	adds	r5, #1
 8000fb0:	e7ee      	b.n	8000f90 <__libc_init_array+0xc>
 8000fb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fb6:	4798      	blx	r3
 8000fb8:	3501      	adds	r5, #1
 8000fba:	e7f2      	b.n	8000fa2 <__libc_init_array+0x1e>
 8000fbc:	08001614 	.word	0x08001614
 8000fc0:	08001614 	.word	0x08001614
 8000fc4:	08001614 	.word	0x08001614
 8000fc8:	08001618 	.word	0x08001618

08000fcc <__swhatbuf_r>:
 8000fcc:	b570      	push	{r4, r5, r6, lr}
 8000fce:	460e      	mov	r6, r1
 8000fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fd4:	2900      	cmp	r1, #0
 8000fd6:	b096      	sub	sp, #88	; 0x58
 8000fd8:	4614      	mov	r4, r2
 8000fda:	461d      	mov	r5, r3
 8000fdc:	da07      	bge.n	8000fee <__swhatbuf_r+0x22>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	602b      	str	r3, [r5, #0]
 8000fe2:	89b3      	ldrh	r3, [r6, #12]
 8000fe4:	061a      	lsls	r2, r3, #24
 8000fe6:	d410      	bmi.n	800100a <__swhatbuf_r+0x3e>
 8000fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fec:	e00e      	b.n	800100c <__swhatbuf_r+0x40>
 8000fee:	466a      	mov	r2, sp
 8000ff0:	f000 fa7e 	bl	80014f0 <_fstat_r>
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	dbf2      	blt.n	8000fde <__swhatbuf_r+0x12>
 8000ff8:	9a01      	ldr	r2, [sp, #4]
 8000ffa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000ffe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001002:	425a      	negs	r2, r3
 8001004:	415a      	adcs	r2, r3
 8001006:	602a      	str	r2, [r5, #0]
 8001008:	e7ee      	b.n	8000fe8 <__swhatbuf_r+0x1c>
 800100a:	2340      	movs	r3, #64	; 0x40
 800100c:	2000      	movs	r0, #0
 800100e:	6023      	str	r3, [r4, #0]
 8001010:	b016      	add	sp, #88	; 0x58
 8001012:	bd70      	pop	{r4, r5, r6, pc}

08001014 <__smakebuf_r>:
 8001014:	898b      	ldrh	r3, [r1, #12]
 8001016:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001018:	079d      	lsls	r5, r3, #30
 800101a:	4606      	mov	r6, r0
 800101c:	460c      	mov	r4, r1
 800101e:	d507      	bpl.n	8001030 <__smakebuf_r+0x1c>
 8001020:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001024:	6023      	str	r3, [r4, #0]
 8001026:	6123      	str	r3, [r4, #16]
 8001028:	2301      	movs	r3, #1
 800102a:	6163      	str	r3, [r4, #20]
 800102c:	b002      	add	sp, #8
 800102e:	bd70      	pop	{r4, r5, r6, pc}
 8001030:	ab01      	add	r3, sp, #4
 8001032:	466a      	mov	r2, sp
 8001034:	f7ff ffca 	bl	8000fcc <__swhatbuf_r>
 8001038:	9900      	ldr	r1, [sp, #0]
 800103a:	4605      	mov	r5, r0
 800103c:	4630      	mov	r0, r6
 800103e:	f000 f87f 	bl	8001140 <_malloc_r>
 8001042:	b948      	cbnz	r0, 8001058 <__smakebuf_r+0x44>
 8001044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001048:	059a      	lsls	r2, r3, #22
 800104a:	d4ef      	bmi.n	800102c <__smakebuf_r+0x18>
 800104c:	f023 0303 	bic.w	r3, r3, #3
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	81a3      	strh	r3, [r4, #12]
 8001056:	e7e3      	b.n	8001020 <__smakebuf_r+0xc>
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <__smakebuf_r+0x7c>)
 800105a:	62b3      	str	r3, [r6, #40]	; 0x28
 800105c:	89a3      	ldrh	r3, [r4, #12]
 800105e:	6020      	str	r0, [r4, #0]
 8001060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001064:	81a3      	strh	r3, [r4, #12]
 8001066:	9b00      	ldr	r3, [sp, #0]
 8001068:	6163      	str	r3, [r4, #20]
 800106a:	9b01      	ldr	r3, [sp, #4]
 800106c:	6120      	str	r0, [r4, #16]
 800106e:	b15b      	cbz	r3, 8001088 <__smakebuf_r+0x74>
 8001070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001074:	4630      	mov	r0, r6
 8001076:	f000 fa4d 	bl	8001514 <_isatty_r>
 800107a:	b128      	cbz	r0, 8001088 <__smakebuf_r+0x74>
 800107c:	89a3      	ldrh	r3, [r4, #12]
 800107e:	f023 0303 	bic.w	r3, r3, #3
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	81a3      	strh	r3, [r4, #12]
 8001088:	89a3      	ldrh	r3, [r4, #12]
 800108a:	431d      	orrs	r5, r3
 800108c:	81a5      	strh	r5, [r4, #12]
 800108e:	e7cd      	b.n	800102c <__smakebuf_r+0x18>
 8001090:	08000bc9 	.word	0x08000bc9

08001094 <memset>:
 8001094:	4402      	add	r2, r0
 8001096:	4603      	mov	r3, r0
 8001098:	4293      	cmp	r3, r2
 800109a:	d100      	bne.n	800109e <memset+0xa>
 800109c:	4770      	bx	lr
 800109e:	f803 1b01 	strb.w	r1, [r3], #1
 80010a2:	e7f9      	b.n	8001098 <memset+0x4>

080010a4 <_free_r>:
 80010a4:	b538      	push	{r3, r4, r5, lr}
 80010a6:	4605      	mov	r5, r0
 80010a8:	2900      	cmp	r1, #0
 80010aa:	d045      	beq.n	8001138 <_free_r+0x94>
 80010ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010b0:	1f0c      	subs	r4, r1, #4
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	bfb8      	it	lt
 80010b6:	18e4      	addlt	r4, r4, r3
 80010b8:	f000 fa4e 	bl	8001558 <__malloc_lock>
 80010bc:	4a1f      	ldr	r2, [pc, #124]	; (800113c <_free_r+0x98>)
 80010be:	6813      	ldr	r3, [r2, #0]
 80010c0:	4610      	mov	r0, r2
 80010c2:	b933      	cbnz	r3, 80010d2 <_free_r+0x2e>
 80010c4:	6063      	str	r3, [r4, #4]
 80010c6:	6014      	str	r4, [r2, #0]
 80010c8:	4628      	mov	r0, r5
 80010ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010ce:	f000 ba44 	b.w	800155a <__malloc_unlock>
 80010d2:	42a3      	cmp	r3, r4
 80010d4:	d90c      	bls.n	80010f0 <_free_r+0x4c>
 80010d6:	6821      	ldr	r1, [r4, #0]
 80010d8:	1862      	adds	r2, r4, r1
 80010da:	4293      	cmp	r3, r2
 80010dc:	bf04      	itt	eq
 80010de:	681a      	ldreq	r2, [r3, #0]
 80010e0:	685b      	ldreq	r3, [r3, #4]
 80010e2:	6063      	str	r3, [r4, #4]
 80010e4:	bf04      	itt	eq
 80010e6:	1852      	addeq	r2, r2, r1
 80010e8:	6022      	streq	r2, [r4, #0]
 80010ea:	6004      	str	r4, [r0, #0]
 80010ec:	e7ec      	b.n	80010c8 <_free_r+0x24>
 80010ee:	4613      	mov	r3, r2
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	b10a      	cbz	r2, 80010f8 <_free_r+0x54>
 80010f4:	42a2      	cmp	r2, r4
 80010f6:	d9fa      	bls.n	80010ee <_free_r+0x4a>
 80010f8:	6819      	ldr	r1, [r3, #0]
 80010fa:	1858      	adds	r0, r3, r1
 80010fc:	42a0      	cmp	r0, r4
 80010fe:	d10b      	bne.n	8001118 <_free_r+0x74>
 8001100:	6820      	ldr	r0, [r4, #0]
 8001102:	4401      	add	r1, r0
 8001104:	1858      	adds	r0, r3, r1
 8001106:	4282      	cmp	r2, r0
 8001108:	6019      	str	r1, [r3, #0]
 800110a:	d1dd      	bne.n	80010c8 <_free_r+0x24>
 800110c:	6810      	ldr	r0, [r2, #0]
 800110e:	6852      	ldr	r2, [r2, #4]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	4401      	add	r1, r0
 8001114:	6019      	str	r1, [r3, #0]
 8001116:	e7d7      	b.n	80010c8 <_free_r+0x24>
 8001118:	d902      	bls.n	8001120 <_free_r+0x7c>
 800111a:	230c      	movs	r3, #12
 800111c:	602b      	str	r3, [r5, #0]
 800111e:	e7d3      	b.n	80010c8 <_free_r+0x24>
 8001120:	6820      	ldr	r0, [r4, #0]
 8001122:	1821      	adds	r1, r4, r0
 8001124:	428a      	cmp	r2, r1
 8001126:	bf04      	itt	eq
 8001128:	6811      	ldreq	r1, [r2, #0]
 800112a:	6852      	ldreq	r2, [r2, #4]
 800112c:	6062      	str	r2, [r4, #4]
 800112e:	bf04      	itt	eq
 8001130:	1809      	addeq	r1, r1, r0
 8001132:	6021      	streq	r1, [r4, #0]
 8001134:	605c      	str	r4, [r3, #4]
 8001136:	e7c7      	b.n	80010c8 <_free_r+0x24>
 8001138:	bd38      	pop	{r3, r4, r5, pc}
 800113a:	bf00      	nop
 800113c:	20000084 	.word	0x20000084

08001140 <_malloc_r>:
 8001140:	b570      	push	{r4, r5, r6, lr}
 8001142:	1ccd      	adds	r5, r1, #3
 8001144:	f025 0503 	bic.w	r5, r5, #3
 8001148:	3508      	adds	r5, #8
 800114a:	2d0c      	cmp	r5, #12
 800114c:	bf38      	it	cc
 800114e:	250c      	movcc	r5, #12
 8001150:	2d00      	cmp	r5, #0
 8001152:	4606      	mov	r6, r0
 8001154:	db01      	blt.n	800115a <_malloc_r+0x1a>
 8001156:	42a9      	cmp	r1, r5
 8001158:	d903      	bls.n	8001162 <_malloc_r+0x22>
 800115a:	230c      	movs	r3, #12
 800115c:	6033      	str	r3, [r6, #0]
 800115e:	2000      	movs	r0, #0
 8001160:	bd70      	pop	{r4, r5, r6, pc}
 8001162:	f000 f9f9 	bl	8001558 <__malloc_lock>
 8001166:	4a21      	ldr	r2, [pc, #132]	; (80011ec <_malloc_r+0xac>)
 8001168:	6814      	ldr	r4, [r2, #0]
 800116a:	4621      	mov	r1, r4
 800116c:	b991      	cbnz	r1, 8001194 <_malloc_r+0x54>
 800116e:	4c20      	ldr	r4, [pc, #128]	; (80011f0 <_malloc_r+0xb0>)
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	b91b      	cbnz	r3, 800117c <_malloc_r+0x3c>
 8001174:	4630      	mov	r0, r6
 8001176:	f000 f84f 	bl	8001218 <_sbrk_r>
 800117a:	6020      	str	r0, [r4, #0]
 800117c:	4629      	mov	r1, r5
 800117e:	4630      	mov	r0, r6
 8001180:	f000 f84a 	bl	8001218 <_sbrk_r>
 8001184:	1c43      	adds	r3, r0, #1
 8001186:	d124      	bne.n	80011d2 <_malloc_r+0x92>
 8001188:	230c      	movs	r3, #12
 800118a:	6033      	str	r3, [r6, #0]
 800118c:	4630      	mov	r0, r6
 800118e:	f000 f9e4 	bl	800155a <__malloc_unlock>
 8001192:	e7e4      	b.n	800115e <_malloc_r+0x1e>
 8001194:	680b      	ldr	r3, [r1, #0]
 8001196:	1b5b      	subs	r3, r3, r5
 8001198:	d418      	bmi.n	80011cc <_malloc_r+0x8c>
 800119a:	2b0b      	cmp	r3, #11
 800119c:	d90f      	bls.n	80011be <_malloc_r+0x7e>
 800119e:	600b      	str	r3, [r1, #0]
 80011a0:	50cd      	str	r5, [r1, r3]
 80011a2:	18cc      	adds	r4, r1, r3
 80011a4:	4630      	mov	r0, r6
 80011a6:	f000 f9d8 	bl	800155a <__malloc_unlock>
 80011aa:	f104 000b 	add.w	r0, r4, #11
 80011ae:	1d23      	adds	r3, r4, #4
 80011b0:	f020 0007 	bic.w	r0, r0, #7
 80011b4:	1ac3      	subs	r3, r0, r3
 80011b6:	d0d3      	beq.n	8001160 <_malloc_r+0x20>
 80011b8:	425a      	negs	r2, r3
 80011ba:	50e2      	str	r2, [r4, r3]
 80011bc:	e7d0      	b.n	8001160 <_malloc_r+0x20>
 80011be:	428c      	cmp	r4, r1
 80011c0:	684b      	ldr	r3, [r1, #4]
 80011c2:	bf16      	itet	ne
 80011c4:	6063      	strne	r3, [r4, #4]
 80011c6:	6013      	streq	r3, [r2, #0]
 80011c8:	460c      	movne	r4, r1
 80011ca:	e7eb      	b.n	80011a4 <_malloc_r+0x64>
 80011cc:	460c      	mov	r4, r1
 80011ce:	6849      	ldr	r1, [r1, #4]
 80011d0:	e7cc      	b.n	800116c <_malloc_r+0x2c>
 80011d2:	1cc4      	adds	r4, r0, #3
 80011d4:	f024 0403 	bic.w	r4, r4, #3
 80011d8:	42a0      	cmp	r0, r4
 80011da:	d005      	beq.n	80011e8 <_malloc_r+0xa8>
 80011dc:	1a21      	subs	r1, r4, r0
 80011de:	4630      	mov	r0, r6
 80011e0:	f000 f81a 	bl	8001218 <_sbrk_r>
 80011e4:	3001      	adds	r0, #1
 80011e6:	d0cf      	beq.n	8001188 <_malloc_r+0x48>
 80011e8:	6025      	str	r5, [r4, #0]
 80011ea:	e7db      	b.n	80011a4 <_malloc_r+0x64>
 80011ec:	20000084 	.word	0x20000084
 80011f0:	20000088 	.word	0x20000088

080011f4 <_open_r>:
 80011f4:	b538      	push	{r3, r4, r5, lr}
 80011f6:	4c07      	ldr	r4, [pc, #28]	; (8001214 <_open_r+0x20>)
 80011f8:	4605      	mov	r5, r0
 80011fa:	4608      	mov	r0, r1
 80011fc:	4611      	mov	r1, r2
 80011fe:	2200      	movs	r2, #0
 8001200:	6022      	str	r2, [r4, #0]
 8001202:	461a      	mov	r2, r3
 8001204:	f7ff f8db 	bl	80003be <_open>
 8001208:	1c43      	adds	r3, r0, #1
 800120a:	d102      	bne.n	8001212 <_open_r+0x1e>
 800120c:	6823      	ldr	r3, [r4, #0]
 800120e:	b103      	cbz	r3, 8001212 <_open_r+0x1e>
 8001210:	602b      	str	r3, [r5, #0]
 8001212:	bd38      	pop	{r3, r4, r5, pc}
 8001214:	2000008c 	.word	0x2000008c

08001218 <_sbrk_r>:
 8001218:	b538      	push	{r3, r4, r5, lr}
 800121a:	4c06      	ldr	r4, [pc, #24]	; (8001234 <_sbrk_r+0x1c>)
 800121c:	2300      	movs	r3, #0
 800121e:	4605      	mov	r5, r0
 8001220:	4608      	mov	r0, r1
 8001222:	6023      	str	r3, [r4, #0]
 8001224:	f7ff f8da 	bl	80003dc <_sbrk>
 8001228:	1c43      	adds	r3, r0, #1
 800122a:	d102      	bne.n	8001232 <_sbrk_r+0x1a>
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	b103      	cbz	r3, 8001232 <_sbrk_r+0x1a>
 8001230:	602b      	str	r3, [r5, #0]
 8001232:	bd38      	pop	{r3, r4, r5, pc}
 8001234:	2000008c 	.word	0x2000008c

08001238 <__sread>:
 8001238:	b510      	push	{r4, lr}
 800123a:	460c      	mov	r4, r1
 800123c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001240:	f000 f98c 	bl	800155c <_read_r>
 8001244:	2800      	cmp	r0, #0
 8001246:	bfab      	itete	ge
 8001248:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800124a:	89a3      	ldrhlt	r3, [r4, #12]
 800124c:	181b      	addge	r3, r3, r0
 800124e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001252:	bfac      	ite	ge
 8001254:	6563      	strge	r3, [r4, #84]	; 0x54
 8001256:	81a3      	strhlt	r3, [r4, #12]
 8001258:	bd10      	pop	{r4, pc}

0800125a <__swrite>:
 800125a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800125e:	461f      	mov	r7, r3
 8001260:	898b      	ldrh	r3, [r1, #12]
 8001262:	05db      	lsls	r3, r3, #23
 8001264:	4605      	mov	r5, r0
 8001266:	460c      	mov	r4, r1
 8001268:	4616      	mov	r6, r2
 800126a:	d505      	bpl.n	8001278 <__swrite+0x1e>
 800126c:	2302      	movs	r3, #2
 800126e:	2200      	movs	r2, #0
 8001270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001274:	f000 f95e 	bl	8001534 <_lseek_r>
 8001278:	89a3      	ldrh	r3, [r4, #12]
 800127a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800127e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001282:	81a3      	strh	r3, [r4, #12]
 8001284:	4632      	mov	r2, r6
 8001286:	463b      	mov	r3, r7
 8001288:	4628      	mov	r0, r5
 800128a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800128e:	f000 b869 	b.w	8001364 <_write_r>

08001292 <__sseek>:
 8001292:	b510      	push	{r4, lr}
 8001294:	460c      	mov	r4, r1
 8001296:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800129a:	f000 f94b 	bl	8001534 <_lseek_r>
 800129e:	1c43      	adds	r3, r0, #1
 80012a0:	89a3      	ldrh	r3, [r4, #12]
 80012a2:	bf15      	itete	ne
 80012a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80012a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80012aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80012ae:	81a3      	strheq	r3, [r4, #12]
 80012b0:	bf18      	it	ne
 80012b2:	81a3      	strhne	r3, [r4, #12]
 80012b4:	bd10      	pop	{r4, pc}

080012b6 <__sclose>:
 80012b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012ba:	f000 b8d3 	b.w	8001464 <_close_r>
	...

080012c0 <__swbuf_r>:
 80012c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012c2:	460e      	mov	r6, r1
 80012c4:	4614      	mov	r4, r2
 80012c6:	4605      	mov	r5, r0
 80012c8:	b118      	cbz	r0, 80012d2 <__swbuf_r+0x12>
 80012ca:	6983      	ldr	r3, [r0, #24]
 80012cc:	b90b      	cbnz	r3, 80012d2 <__swbuf_r+0x12>
 80012ce:	f7ff fc97 	bl	8000c00 <__sinit>
 80012d2:	4b21      	ldr	r3, [pc, #132]	; (8001358 <__swbuf_r+0x98>)
 80012d4:	429c      	cmp	r4, r3
 80012d6:	d12a      	bne.n	800132e <__swbuf_r+0x6e>
 80012d8:	686c      	ldr	r4, [r5, #4]
 80012da:	69a3      	ldr	r3, [r4, #24]
 80012dc:	60a3      	str	r3, [r4, #8]
 80012de:	89a3      	ldrh	r3, [r4, #12]
 80012e0:	071a      	lsls	r2, r3, #28
 80012e2:	d52e      	bpl.n	8001342 <__swbuf_r+0x82>
 80012e4:	6923      	ldr	r3, [r4, #16]
 80012e6:	b363      	cbz	r3, 8001342 <__swbuf_r+0x82>
 80012e8:	6923      	ldr	r3, [r4, #16]
 80012ea:	6820      	ldr	r0, [r4, #0]
 80012ec:	1ac0      	subs	r0, r0, r3
 80012ee:	6963      	ldr	r3, [r4, #20]
 80012f0:	b2f6      	uxtb	r6, r6
 80012f2:	4283      	cmp	r3, r0
 80012f4:	4637      	mov	r7, r6
 80012f6:	dc04      	bgt.n	8001302 <__swbuf_r+0x42>
 80012f8:	4621      	mov	r1, r4
 80012fa:	4628      	mov	r0, r5
 80012fc:	f7ff fc16 	bl	8000b2c <_fflush_r>
 8001300:	bb28      	cbnz	r0, 800134e <__swbuf_r+0x8e>
 8001302:	68a3      	ldr	r3, [r4, #8]
 8001304:	3b01      	subs	r3, #1
 8001306:	60a3      	str	r3, [r4, #8]
 8001308:	6823      	ldr	r3, [r4, #0]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	6022      	str	r2, [r4, #0]
 800130e:	701e      	strb	r6, [r3, #0]
 8001310:	6963      	ldr	r3, [r4, #20]
 8001312:	3001      	adds	r0, #1
 8001314:	4283      	cmp	r3, r0
 8001316:	d004      	beq.n	8001322 <__swbuf_r+0x62>
 8001318:	89a3      	ldrh	r3, [r4, #12]
 800131a:	07db      	lsls	r3, r3, #31
 800131c:	d519      	bpl.n	8001352 <__swbuf_r+0x92>
 800131e:	2e0a      	cmp	r6, #10
 8001320:	d117      	bne.n	8001352 <__swbuf_r+0x92>
 8001322:	4621      	mov	r1, r4
 8001324:	4628      	mov	r0, r5
 8001326:	f7ff fc01 	bl	8000b2c <_fflush_r>
 800132a:	b190      	cbz	r0, 8001352 <__swbuf_r+0x92>
 800132c:	e00f      	b.n	800134e <__swbuf_r+0x8e>
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <__swbuf_r+0x9c>)
 8001330:	429c      	cmp	r4, r3
 8001332:	d101      	bne.n	8001338 <__swbuf_r+0x78>
 8001334:	68ac      	ldr	r4, [r5, #8]
 8001336:	e7d0      	b.n	80012da <__swbuf_r+0x1a>
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <__swbuf_r+0xa0>)
 800133a:	429c      	cmp	r4, r3
 800133c:	bf08      	it	eq
 800133e:	68ec      	ldreq	r4, [r5, #12]
 8001340:	e7cb      	b.n	80012da <__swbuf_r+0x1a>
 8001342:	4621      	mov	r1, r4
 8001344:	4628      	mov	r0, r5
 8001346:	f000 f81f 	bl	8001388 <__swsetup_r>
 800134a:	2800      	cmp	r0, #0
 800134c:	d0cc      	beq.n	80012e8 <__swbuf_r+0x28>
 800134e:	f04f 37ff 	mov.w	r7, #4294967295
 8001352:	4638      	mov	r0, r7
 8001354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001356:	bf00      	nop
 8001358:	080015d0 	.word	0x080015d0
 800135c:	080015f0 	.word	0x080015f0
 8001360:	080015b0 	.word	0x080015b0

08001364 <_write_r>:
 8001364:	b538      	push	{r3, r4, r5, lr}
 8001366:	4c07      	ldr	r4, [pc, #28]	; (8001384 <_write_r+0x20>)
 8001368:	4605      	mov	r5, r0
 800136a:	4608      	mov	r0, r1
 800136c:	4611      	mov	r1, r2
 800136e:	2200      	movs	r2, #0
 8001370:	6022      	str	r2, [r4, #0]
 8001372:	461a      	mov	r2, r3
 8001374:	f7fe ffd3 	bl	800031e <_write>
 8001378:	1c43      	adds	r3, r0, #1
 800137a:	d102      	bne.n	8001382 <_write_r+0x1e>
 800137c:	6823      	ldr	r3, [r4, #0]
 800137e:	b103      	cbz	r3, 8001382 <_write_r+0x1e>
 8001380:	602b      	str	r3, [r5, #0]
 8001382:	bd38      	pop	{r3, r4, r5, pc}
 8001384:	2000008c 	.word	0x2000008c

08001388 <__swsetup_r>:
 8001388:	4b32      	ldr	r3, [pc, #200]	; (8001454 <__swsetup_r+0xcc>)
 800138a:	b570      	push	{r4, r5, r6, lr}
 800138c:	681d      	ldr	r5, [r3, #0]
 800138e:	4606      	mov	r6, r0
 8001390:	460c      	mov	r4, r1
 8001392:	b125      	cbz	r5, 800139e <__swsetup_r+0x16>
 8001394:	69ab      	ldr	r3, [r5, #24]
 8001396:	b913      	cbnz	r3, 800139e <__swsetup_r+0x16>
 8001398:	4628      	mov	r0, r5
 800139a:	f7ff fc31 	bl	8000c00 <__sinit>
 800139e:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <__swsetup_r+0xd0>)
 80013a0:	429c      	cmp	r4, r3
 80013a2:	d10f      	bne.n	80013c4 <__swsetup_r+0x3c>
 80013a4:	686c      	ldr	r4, [r5, #4]
 80013a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	0715      	lsls	r5, r2, #28
 80013ae:	d42c      	bmi.n	800140a <__swsetup_r+0x82>
 80013b0:	06d0      	lsls	r0, r2, #27
 80013b2:	d411      	bmi.n	80013d8 <__swsetup_r+0x50>
 80013b4:	2209      	movs	r2, #9
 80013b6:	6032      	str	r2, [r6, #0]
 80013b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013bc:	81a3      	strh	r3, [r4, #12]
 80013be:	f04f 30ff 	mov.w	r0, #4294967295
 80013c2:	e03e      	b.n	8001442 <__swsetup_r+0xba>
 80013c4:	4b25      	ldr	r3, [pc, #148]	; (800145c <__swsetup_r+0xd4>)
 80013c6:	429c      	cmp	r4, r3
 80013c8:	d101      	bne.n	80013ce <__swsetup_r+0x46>
 80013ca:	68ac      	ldr	r4, [r5, #8]
 80013cc:	e7eb      	b.n	80013a6 <__swsetup_r+0x1e>
 80013ce:	4b24      	ldr	r3, [pc, #144]	; (8001460 <__swsetup_r+0xd8>)
 80013d0:	429c      	cmp	r4, r3
 80013d2:	bf08      	it	eq
 80013d4:	68ec      	ldreq	r4, [r5, #12]
 80013d6:	e7e6      	b.n	80013a6 <__swsetup_r+0x1e>
 80013d8:	0751      	lsls	r1, r2, #29
 80013da:	d512      	bpl.n	8001402 <__swsetup_r+0x7a>
 80013dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013de:	b141      	cbz	r1, 80013f2 <__swsetup_r+0x6a>
 80013e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013e4:	4299      	cmp	r1, r3
 80013e6:	d002      	beq.n	80013ee <__swsetup_r+0x66>
 80013e8:	4630      	mov	r0, r6
 80013ea:	f7ff fe5b 	bl	80010a4 <_free_r>
 80013ee:	2300      	movs	r3, #0
 80013f0:	6363      	str	r3, [r4, #52]	; 0x34
 80013f2:	89a3      	ldrh	r3, [r4, #12]
 80013f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80013f8:	81a3      	strh	r3, [r4, #12]
 80013fa:	2300      	movs	r3, #0
 80013fc:	6063      	str	r3, [r4, #4]
 80013fe:	6923      	ldr	r3, [r4, #16]
 8001400:	6023      	str	r3, [r4, #0]
 8001402:	89a3      	ldrh	r3, [r4, #12]
 8001404:	f043 0308 	orr.w	r3, r3, #8
 8001408:	81a3      	strh	r3, [r4, #12]
 800140a:	6923      	ldr	r3, [r4, #16]
 800140c:	b94b      	cbnz	r3, 8001422 <__swsetup_r+0x9a>
 800140e:	89a3      	ldrh	r3, [r4, #12]
 8001410:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001418:	d003      	beq.n	8001422 <__swsetup_r+0x9a>
 800141a:	4621      	mov	r1, r4
 800141c:	4630      	mov	r0, r6
 800141e:	f7ff fdf9 	bl	8001014 <__smakebuf_r>
 8001422:	89a2      	ldrh	r2, [r4, #12]
 8001424:	f012 0301 	ands.w	r3, r2, #1
 8001428:	d00c      	beq.n	8001444 <__swsetup_r+0xbc>
 800142a:	2300      	movs	r3, #0
 800142c:	60a3      	str	r3, [r4, #8]
 800142e:	6963      	ldr	r3, [r4, #20]
 8001430:	425b      	negs	r3, r3
 8001432:	61a3      	str	r3, [r4, #24]
 8001434:	6923      	ldr	r3, [r4, #16]
 8001436:	b953      	cbnz	r3, 800144e <__swsetup_r+0xc6>
 8001438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800143c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001440:	d1ba      	bne.n	80013b8 <__swsetup_r+0x30>
 8001442:	bd70      	pop	{r4, r5, r6, pc}
 8001444:	0792      	lsls	r2, r2, #30
 8001446:	bf58      	it	pl
 8001448:	6963      	ldrpl	r3, [r4, #20]
 800144a:	60a3      	str	r3, [r4, #8]
 800144c:	e7f2      	b.n	8001434 <__swsetup_r+0xac>
 800144e:	2000      	movs	r0, #0
 8001450:	e7f7      	b.n	8001442 <__swsetup_r+0xba>
 8001452:	bf00      	nop
 8001454:	20000000 	.word	0x20000000
 8001458:	080015d0 	.word	0x080015d0
 800145c:	080015f0 	.word	0x080015f0
 8001460:	080015b0 	.word	0x080015b0

08001464 <_close_r>:
 8001464:	b538      	push	{r3, r4, r5, lr}
 8001466:	4c06      	ldr	r4, [pc, #24]	; (8001480 <_close_r+0x1c>)
 8001468:	2300      	movs	r3, #0
 800146a:	4605      	mov	r5, r0
 800146c:	4608      	mov	r0, r1
 800146e:	6023      	str	r3, [r4, #0]
 8001470:	f7fe ff71 	bl	8000356 <_close>
 8001474:	1c43      	adds	r3, r0, #1
 8001476:	d102      	bne.n	800147e <_close_r+0x1a>
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	b103      	cbz	r3, 800147e <_close_r+0x1a>
 800147c:	602b      	str	r3, [r5, #0]
 800147e:	bd38      	pop	{r3, r4, r5, pc}
 8001480:	2000008c 	.word	0x2000008c

08001484 <__sflags>:
 8001484:	780b      	ldrb	r3, [r1, #0]
 8001486:	2b72      	cmp	r3, #114	; 0x72
 8001488:	b530      	push	{r4, r5, lr}
 800148a:	d02c      	beq.n	80014e6 <__sflags+0x62>
 800148c:	2b77      	cmp	r3, #119	; 0x77
 800148e:	d007      	beq.n	80014a0 <__sflags+0x1c>
 8001490:	2b61      	cmp	r3, #97	; 0x61
 8001492:	d10f      	bne.n	80014b4 <__sflags+0x30>
 8001494:	f44f 7402 	mov.w	r4, #520	; 0x208
 8001498:	2301      	movs	r3, #1
 800149a:	f44f 7084 	mov.w	r0, #264	; 0x108
 800149e:	e003      	b.n	80014a8 <__sflags+0x24>
 80014a0:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 80014a4:	2301      	movs	r3, #1
 80014a6:	2008      	movs	r0, #8
 80014a8:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80014ac:	b935      	cbnz	r5, 80014bc <__sflags+0x38>
 80014ae:	4323      	orrs	r3, r4
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e002      	b.n	80014ba <__sflags+0x36>
 80014b4:	2316      	movs	r3, #22
 80014b6:	6003      	str	r3, [r0, #0]
 80014b8:	2000      	movs	r0, #0
 80014ba:	bd30      	pop	{r4, r5, pc}
 80014bc:	2d62      	cmp	r5, #98	; 0x62
 80014be:	d00c      	beq.n	80014da <__sflags+0x56>
 80014c0:	2d78      	cmp	r5, #120	; 0x78
 80014c2:	d00d      	beq.n	80014e0 <__sflags+0x5c>
 80014c4:	2d2b      	cmp	r5, #43	; 0x2b
 80014c6:	d1ef      	bne.n	80014a8 <__sflags+0x24>
 80014c8:	f020 001c 	bic.w	r0, r0, #28
 80014cc:	f023 0303 	bic.w	r3, r3, #3
 80014d0:	f040 0010 	orr.w	r0, r0, #16
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	e7e6      	b.n	80014a8 <__sflags+0x24>
 80014da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014de:	e7e3      	b.n	80014a8 <__sflags+0x24>
 80014e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014e4:	e7e0      	b.n	80014a8 <__sflags+0x24>
 80014e6:	2400      	movs	r4, #0
 80014e8:	4623      	mov	r3, r4
 80014ea:	2004      	movs	r0, #4
 80014ec:	e7dc      	b.n	80014a8 <__sflags+0x24>
	...

080014f0 <_fstat_r>:
 80014f0:	b538      	push	{r3, r4, r5, lr}
 80014f2:	4c07      	ldr	r4, [pc, #28]	; (8001510 <_fstat_r+0x20>)
 80014f4:	2300      	movs	r3, #0
 80014f6:	4605      	mov	r5, r0
 80014f8:	4608      	mov	r0, r1
 80014fa:	4611      	mov	r1, r2
 80014fc:	6023      	str	r3, [r4, #0]
 80014fe:	f7fe ff36 	bl	800036e <_fstat>
 8001502:	1c43      	adds	r3, r0, #1
 8001504:	d102      	bne.n	800150c <_fstat_r+0x1c>
 8001506:	6823      	ldr	r3, [r4, #0]
 8001508:	b103      	cbz	r3, 800150c <_fstat_r+0x1c>
 800150a:	602b      	str	r3, [r5, #0]
 800150c:	bd38      	pop	{r3, r4, r5, pc}
 800150e:	bf00      	nop
 8001510:	2000008c 	.word	0x2000008c

08001514 <_isatty_r>:
 8001514:	b538      	push	{r3, r4, r5, lr}
 8001516:	4c06      	ldr	r4, [pc, #24]	; (8001530 <_isatty_r+0x1c>)
 8001518:	2300      	movs	r3, #0
 800151a:	4605      	mov	r5, r0
 800151c:	4608      	mov	r0, r1
 800151e:	6023      	str	r3, [r4, #0]
 8001520:	f7fe ff35 	bl	800038e <_isatty>
 8001524:	1c43      	adds	r3, r0, #1
 8001526:	d102      	bne.n	800152e <_isatty_r+0x1a>
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	b103      	cbz	r3, 800152e <_isatty_r+0x1a>
 800152c:	602b      	str	r3, [r5, #0]
 800152e:	bd38      	pop	{r3, r4, r5, pc}
 8001530:	2000008c 	.word	0x2000008c

08001534 <_lseek_r>:
 8001534:	b538      	push	{r3, r4, r5, lr}
 8001536:	4c07      	ldr	r4, [pc, #28]	; (8001554 <_lseek_r+0x20>)
 8001538:	4605      	mov	r5, r0
 800153a:	4608      	mov	r0, r1
 800153c:	4611      	mov	r1, r2
 800153e:	2200      	movs	r2, #0
 8001540:	6022      	str	r2, [r4, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	f7fe ff2e 	bl	80003a4 <_lseek>
 8001548:	1c43      	adds	r3, r0, #1
 800154a:	d102      	bne.n	8001552 <_lseek_r+0x1e>
 800154c:	6823      	ldr	r3, [r4, #0]
 800154e:	b103      	cbz	r3, 8001552 <_lseek_r+0x1e>
 8001550:	602b      	str	r3, [r5, #0]
 8001552:	bd38      	pop	{r3, r4, r5, pc}
 8001554:	2000008c 	.word	0x2000008c

08001558 <__malloc_lock>:
 8001558:	4770      	bx	lr

0800155a <__malloc_unlock>:
 800155a:	4770      	bx	lr

0800155c <_read_r>:
 800155c:	b538      	push	{r3, r4, r5, lr}
 800155e:	4c07      	ldr	r4, [pc, #28]	; (800157c <_read_r+0x20>)
 8001560:	4605      	mov	r5, r0
 8001562:	4608      	mov	r0, r1
 8001564:	4611      	mov	r1, r2
 8001566:	2200      	movs	r2, #0
 8001568:	6022      	str	r2, [r4, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	f7fe feba 	bl	80002e4 <_read>
 8001570:	1c43      	adds	r3, r0, #1
 8001572:	d102      	bne.n	800157a <_read_r+0x1e>
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	b103      	cbz	r3, 800157a <_read_r+0x1e>
 8001578:	602b      	str	r3, [r5, #0]
 800157a:	bd38      	pop	{r3, r4, r5, pc}
 800157c:	2000008c 	.word	0x2000008c

08001580 <_init>:
 8001580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001582:	bf00      	nop
 8001584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001586:	bc08      	pop	{r3}
 8001588:	469e      	mov	lr, r3
 800158a:	4770      	bx	lr

0800158c <_fini>:
 800158c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800158e:	bf00      	nop
 8001590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001592:	bc08      	pop	{r3}
 8001594:	469e      	mov	lr, r3
 8001596:	4770      	bx	lr
