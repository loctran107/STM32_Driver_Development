
STM32F407xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c98  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000e40  08000e40  00010e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e60  08000e60  00020400  2**0
                  CONTENTS
  4 .ARM          00000000  08000e60  08000e60  00020400  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e60  08000e60  00020400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e60  08000e60  00010e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e64  08000e64  00010e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000400  20000000  08000e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000400  08001268  00020400  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08001268  00020478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020400  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c97  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000738  00000000  00000000  000230c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000178  00000000  00000000  00023800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000140  00000000  00000000  00023978  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002b34  00000000  00000000  00023ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000018b5  00000000  00000000  000265ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000bfff  00000000  00000000  00027ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00033ea0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000055c  00000000  00000000  00033f1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000400 	.word	0x20000400
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000e28 	.word	0x08000e28

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000404 	.word	0x20000404
 80001e4:	08000e28 	.word	0x08000e28

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <main>:
void delay();
void GPIO_Button_Init();
void USART_GPIO_Init();
void USART_Handler_Init();
char TxBuffer[1024] = "Testing USART Tx...\n\r";
int main(void) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0

	//Set all element to 0
	memset(&GPIO_Button, 0, sizeof(GPIO_Button));
 80001fc:	221c      	movs	r2, #28
 80001fe:	2100      	movs	r1, #0
 8000200:	4815      	ldr	r0, [pc, #84]	; (8000258 <main+0x60>)
 8000202:	f000 fe09 	bl	8000e18 <memset>
	memset(&USART_GPIO, 0, sizeof(USART_GPIO));
 8000206:	221c      	movs	r2, #28
 8000208:	2100      	movs	r1, #0
 800020a:	4814      	ldr	r0, [pc, #80]	; (800025c <main+0x64>)
 800020c:	f000 fe04 	bl	8000e18 <memset>
	memset(&USART_Handler, 0, sizeof(USART_Handler));
 8000210:	2224      	movs	r2, #36	; 0x24
 8000212:	2100      	movs	r1, #0
 8000214:	4812      	ldr	r0, [pc, #72]	; (8000260 <main+0x68>)
 8000216:	f000 fdff 	bl	8000e18 <memset>

	GPIO_Button_Init();
 800021a:	f000 f83f 	bl	800029c <GPIO_Button_Init>
	USART_GPIO_Init();
 800021e:	f000 f857 	bl	80002d0 <USART_GPIO_Init>
	USART_Handler_Init();
 8000222:	f000 f875 	bl	8000310 <USART_Handler_Init>

	USART_PeripheralEnable(USART2, ENABLE);
 8000226:	2101      	movs	r1, #1
 8000228:	480e      	ldr	r0, [pc, #56]	; (8000264 <main+0x6c>)
 800022a:	f000 fa4d 	bl	80006c8 <USART_PeripheralEnable>

	while(1) {
		while (!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0));
 800022e:	bf00      	nop
 8000230:	2101      	movs	r1, #1
 8000232:	480d      	ldr	r0, [pc, #52]	; (8000268 <main+0x70>)
 8000234:	f000 fdb6 	bl	8000da4 <GPIO_ReadFromInputPin>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d0f8      	beq.n	8000230 <main+0x38>

		//Rebouncing delay
		delay();
 800023e:	f000 f817 	bl	8000270 <delay>

		USART_SendData(&USART_Handler, ((uint8_t*) TxBuffer), strlen(TxBuffer));
 8000242:	480a      	ldr	r0, [pc, #40]	; (800026c <main+0x74>)
 8000244:	f7ff ffd0 	bl	80001e8 <strlen>
 8000248:	4603      	mov	r3, r0
 800024a:	461a      	mov	r2, r3
 800024c:	4907      	ldr	r1, [pc, #28]	; (800026c <main+0x74>)
 800024e:	4804      	ldr	r0, [pc, #16]	; (8000260 <main+0x68>)
 8000250:	f000 fa56 	bl	8000700 <USART_SendData>
		while (!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0));
 8000254:	e7eb      	b.n	800022e <main+0x36>
 8000256:	bf00      	nop
 8000258:	2000041c 	.word	0x2000041c
 800025c:	20000438 	.word	0x20000438
 8000260:	20000454 	.word	0x20000454
 8000264:	40004400 	.word	0x40004400
 8000268:	40020000 	.word	0x40020000
 800026c:	20000000 	.word	0x20000000

08000270 <delay>:

	return EXIT_SUCCESS;

}

void delay() {
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 500000; i++);
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	e002      	b.n	8000282 <delay+0x12>
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3301      	adds	r3, #1
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	4a04      	ldr	r2, [pc, #16]	; (8000298 <delay+0x28>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d9f8      	bls.n	800027c <delay+0xc>
}
 800028a:	bf00      	nop
 800028c:	370c      	adds	r7, #12
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	0007a11f 	.word	0x0007a11f

0800029c <GPIO_Button_Init>:

void GPIO_Button_Init() {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	GPIO_Button.pGPIOx = GPIOA;
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <GPIO_Button_Init+0x2c>)
 80002a2:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <GPIO_Button_Init+0x30>)
 80002a4:	601a      	str	r2, [r3, #0]
	GPIO_Button.GPIOx_PinConfig.GPIO_PinMode = GPIO_INPUT_MODE;
 80002a6:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <GPIO_Button_Init+0x2c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
	GPIO_Button.GPIOx_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <GPIO_Button_Init+0x2c>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	605a      	str	r2, [r3, #4]
	GPIO_Button.GPIOx_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PU_PD;
 80002b2:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <GPIO_Button_Init+0x2c>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	611a      	str	r2, [r3, #16]
	GPIO_Button.GPIOx_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <GPIO_Button_Init+0x2c>)
 80002ba:	2202      	movs	r2, #2
 80002bc:	60da      	str	r2, [r3, #12]
	GPIO_Init(&GPIO_Button);
 80002be:	4802      	ldr	r0, [pc, #8]	; (80002c8 <GPIO_Button_Init+0x2c>)
 80002c0:	f000 fc42 	bl	8000b48 <GPIO_Init>
}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	2000041c 	.word	0x2000041c
 80002cc:	40020000 	.word	0x40020000

080002d0 <USART_GPIO_Init>:

void USART_GPIO_Init() {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0

	//Use USART2
	//USART2_TX		: PA2
	//USART3_Rx		: PA3
	USART_GPIO.pGPIOx = GPIOA;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <USART_GPIO_Init+0x38>)
 80002d6:	4a0d      	ldr	r2, [pc, #52]	; (800030c <USART_GPIO_Init+0x3c>)
 80002d8:	601a      	str	r2, [r3, #0]
	USART_GPIO.GPIOx_PinConfig.GPIO_PinMode = GPIO_ALT_FUNC_MODE;
 80002da:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <USART_GPIO_Init+0x38>)
 80002dc:	2202      	movs	r2, #2
 80002de:	609a      	str	r2, [r3, #8]
	USART_GPIO.GPIOx_PinConfig.GPIO_PinAltFuncMode = AF7;
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <USART_GPIO_Init+0x38>)
 80002e2:	2207      	movs	r2, #7
 80002e4:	619a      	str	r2, [r3, #24]
	USART_GPIO.GPIOx_PinConfig.GPIO_PinOPType = GPIO_PUSH_PULL;
 80002e6:	4b08      	ldr	r3, [pc, #32]	; (8000308 <USART_GPIO_Init+0x38>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	615a      	str	r2, [r3, #20]
	USART_GPIO.GPIOx_PinConfig.GPIO_PinPuPdCtrl = GPIO_PU;
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <USART_GPIO_Init+0x38>)
 80002ee:	2201      	movs	r2, #1
 80002f0:	611a      	str	r2, [r3, #16]
	USART_GPIO.GPIOx_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 80002f2:	4b05      	ldr	r3, [pc, #20]	; (8000308 <USART_GPIO_Init+0x38>)
 80002f4:	2202      	movs	r2, #2
 80002f6:	60da      	str	r2, [r3, #12]
	USART_GPIO.GPIOx_PinConfig.GPIO_PinNumber = GPIO_PIN_2 | GPIO_PIN_3;
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <USART_GPIO_Init+0x38>)
 80002fa:	220c      	movs	r2, #12
 80002fc:	605a      	str	r2, [r3, #4]
	GPIO_Init(&USART_GPIO);
 80002fe:	4802      	ldr	r0, [pc, #8]	; (8000308 <USART_GPIO_Init+0x38>)
 8000300:	f000 fc22 	bl	8000b48 <GPIO_Init>

}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20000438 	.word	0x20000438
 800030c:	40020000 	.word	0x40020000

08000310 <USART_Handler_Init>:

void USART_Handler_Init() {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0

	//Using USART2
	USART_Handler.pUSARTx = USART2;
 8000314:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <USART_Handler_Init+0x40>)
 8000316:	4a0f      	ldr	r2, [pc, #60]	; (8000354 <USART_Handler_Init+0x44>)
 8000318:	601a      	str	r2, [r3, #0]
	USART_Handler.USART_Config.HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 800031a:	4b0d      	ldr	r3, [pc, #52]	; (8000350 <USART_Handler_Init+0x40>)
 800031c:	2200      	movs	r2, #0
 800031e:	731a      	strb	r2, [r3, #12]
	USART_Handler.USART_Config.Mode = USART_MODE_ONLY_TX;
 8000320:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <USART_Handler_Init+0x40>)
 8000322:	2200      	movs	r2, #0
 8000324:	721a      	strb	r2, [r3, #8]
	USART_Handler.USART_Config.Oversampling = USART_OVERSAMPLING_BY_16;
 8000326:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <USART_Handler_Init+0x40>)
 8000328:	2200      	movs	r2, #0
 800032a:	735a      	strb	r2, [r3, #13]
	USART_Handler.USART_Config.BaudRate = USART_STD_BAUD_115200;
 800032c:	4b08      	ldr	r3, [pc, #32]	; (8000350 <USART_Handler_Init+0x40>)
 800032e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000332:	605a      	str	r2, [r3, #4]
	USART_Handler.USART_Config.NoOfStopBits = USART_STOPBITS_1;
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <USART_Handler_Init+0x40>)
 8000336:	2200      	movs	r2, #0
 8000338:	725a      	strb	r2, [r3, #9]
	USART_Handler.USART_Config.ParityControl = USART_PARITY_DI;
 800033a:	4b05      	ldr	r3, [pc, #20]	; (8000350 <USART_Handler_Init+0x40>)
 800033c:	2202      	movs	r2, #2
 800033e:	72da      	strb	r2, [r3, #11]
	USART_Handler.USART_Config.WordLength = USART_WORDLEN_8BITS;
 8000340:	4b03      	ldr	r3, [pc, #12]	; (8000350 <USART_Handler_Init+0x40>)
 8000342:	2200      	movs	r2, #0
 8000344:	729a      	strb	r2, [r3, #10]
	USART_Init(&USART_Handler);
 8000346:	4802      	ldr	r0, [pc, #8]	; (8000350 <USART_Handler_Init+0x40>)
 8000348:	f000 f8c6 	bl	80004d8 <USART_Init>
}
 800034c:	bf00      	nop
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20000454 	.word	0x20000454
 8000354:	40004400 	.word	0x40004400

08000358 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000358:	480d      	ldr	r0, [pc, #52]	; (8000390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <LoopForever+0x6>)
  ldr r1, =_edata
 800035e:	490e      	ldr	r1, [pc, #56]	; (8000398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000360:	4a0e      	ldr	r2, [pc, #56]	; (800039c <LoopForever+0xe>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a0b      	ldr	r2, [pc, #44]	; (80003a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000374:	4c0b      	ldr	r4, [pc, #44]	; (80003a4 <LoopForever+0x16>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000382:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000386:	f000 fd23 	bl	8000dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038a:	f7ff ff35 	bl	80001f8 <main>

0800038e <LoopForever>:

LoopForever:
    b LoopForever
 800038e:	e7fe      	b.n	800038e <LoopForever>
  ldr   r0, =_estack
 8000390:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000398:	20000400 	.word	0x20000400
  ldr r2, =_sidata
 800039c:	08000e68 	.word	0x08000e68
  ldr r2, =_sbss
 80003a0:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 80003a4:	20000478 	.word	0x20000478

080003a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a8:	e7fe      	b.n	80003a8 <ADC_IRQHandler>
	...

080003ac <USART_PeriClkCtrl>:
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void USART_PeriClkCtrl(USART_Reg_t* pUSARTx, uint8_t EnOrDi) {
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	460b      	mov	r3, r1
 80003b6:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 80003b8:	78fb      	ldrb	r3, [r7, #3]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d03d      	beq.n	800043a <USART_PeriClkCtrl+0x8e>
		USARTx_PCLK_EN(pUSARTx); //Go to I2Cx_PCLK_EN macro for more details
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a3f      	ldr	r2, [pc, #252]	; (80004c0 <USART_PeriClkCtrl+0x114>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d106      	bne.n	80003d4 <USART_PeriClkCtrl+0x28>
 80003c6:	4b3f      	ldr	r3, [pc, #252]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 80003c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003ca:	4a3e      	ldr	r2, [pc, #248]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 80003cc:	f043 0310 	orr.w	r3, r3, #16
 80003d0:	6453      	str	r3, [r2, #68]	; 0x44
	} else {
		USARTx_PCLK_DI(pUSARTx); //Go to I2Cx_PCLK_DI macro for more details
	}
}
 80003d2:	e06f      	b.n	80004b4 <USART_PeriClkCtrl+0x108>
		USARTx_PCLK_EN(pUSARTx); //Go to I2Cx_PCLK_EN macro for more details
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a3c      	ldr	r2, [pc, #240]	; (80004c8 <USART_PeriClkCtrl+0x11c>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <USART_PeriClkCtrl+0x3e>
 80003dc:	4b39      	ldr	r3, [pc, #228]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 80003de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003e0:	4a38      	ldr	r2, [pc, #224]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 80003e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80003e8:	e064      	b.n	80004b4 <USART_PeriClkCtrl+0x108>
		USARTx_PCLK_EN(pUSARTx); //Go to I2Cx_PCLK_EN macro for more details
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a37      	ldr	r2, [pc, #220]	; (80004cc <USART_PeriClkCtrl+0x120>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <USART_PeriClkCtrl+0x54>
 80003f2:	4b34      	ldr	r3, [pc, #208]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 80003f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003f6:	4a33      	ldr	r2, [pc, #204]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 80003f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003fc:	6413      	str	r3, [r2, #64]	; 0x40
}
 80003fe:	e059      	b.n	80004b4 <USART_PeriClkCtrl+0x108>
		USARTx_PCLK_EN(pUSARTx); //Go to I2Cx_PCLK_EN macro for more details
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a33      	ldr	r2, [pc, #204]	; (80004d0 <USART_PeriClkCtrl+0x124>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d106      	bne.n	8000416 <USART_PeriClkCtrl+0x6a>
 8000408:	4b2e      	ldr	r3, [pc, #184]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 800040a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800040c:	4a2d      	ldr	r2, [pc, #180]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 800040e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000412:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000414:	e04e      	b.n	80004b4 <USART_PeriClkCtrl+0x108>
		USARTx_PCLK_EN(pUSARTx); //Go to I2Cx_PCLK_EN macro for more details
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a2e      	ldr	r2, [pc, #184]	; (80004d4 <USART_PeriClkCtrl+0x128>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d106      	bne.n	800042c <USART_PeriClkCtrl+0x80>
 800041e:	4b29      	ldr	r3, [pc, #164]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 8000420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000422:	4a28      	ldr	r2, [pc, #160]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 8000424:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000428:	6413      	str	r3, [r2, #64]	; 0x40
}
 800042a:	e043      	b.n	80004b4 <USART_PeriClkCtrl+0x108>
		USARTx_PCLK_EN(pUSARTx); //Go to I2Cx_PCLK_EN macro for more details
 800042c:	4b25      	ldr	r3, [pc, #148]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 800042e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000430:	4a24      	ldr	r2, [pc, #144]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 8000432:	f043 0320 	orr.w	r3, r3, #32
 8000436:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000438:	e03c      	b.n	80004b4 <USART_PeriClkCtrl+0x108>
		USARTx_PCLK_DI(pUSARTx); //Go to I2Cx_PCLK_DI macro for more details
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a20      	ldr	r2, [pc, #128]	; (80004c0 <USART_PeriClkCtrl+0x114>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d106      	bne.n	8000450 <USART_PeriClkCtrl+0xa4>
 8000442:	4b20      	ldr	r3, [pc, #128]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 8000444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000446:	4a1f      	ldr	r2, [pc, #124]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 8000448:	f023 0310 	bic.w	r3, r3, #16
 800044c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800044e:	e031      	b.n	80004b4 <USART_PeriClkCtrl+0x108>
		USARTx_PCLK_DI(pUSARTx); //Go to I2Cx_PCLK_DI macro for more details
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a1d      	ldr	r2, [pc, #116]	; (80004c8 <USART_PeriClkCtrl+0x11c>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d106      	bne.n	8000466 <USART_PeriClkCtrl+0xba>
 8000458:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 800045a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800045c:	4a19      	ldr	r2, [pc, #100]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 800045e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000462:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000464:	e026      	b.n	80004b4 <USART_PeriClkCtrl+0x108>
		USARTx_PCLK_DI(pUSARTx); //Go to I2Cx_PCLK_DI macro for more details
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a18      	ldr	r2, [pc, #96]	; (80004cc <USART_PeriClkCtrl+0x120>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d106      	bne.n	800047c <USART_PeriClkCtrl+0xd0>
 800046e:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 8000470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000472:	4a14      	ldr	r2, [pc, #80]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 8000474:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000478:	6413      	str	r3, [r2, #64]	; 0x40
}
 800047a:	e01b      	b.n	80004b4 <USART_PeriClkCtrl+0x108>
		USARTx_PCLK_DI(pUSARTx); //Go to I2Cx_PCLK_DI macro for more details
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a14      	ldr	r2, [pc, #80]	; (80004d0 <USART_PeriClkCtrl+0x124>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d106      	bne.n	8000492 <USART_PeriClkCtrl+0xe6>
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 8000486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000488:	4a0e      	ldr	r2, [pc, #56]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 800048a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800048e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000490:	e010      	b.n	80004b4 <USART_PeriClkCtrl+0x108>
		USARTx_PCLK_DI(pUSARTx); //Go to I2Cx_PCLK_DI macro for more details
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4a0f      	ldr	r2, [pc, #60]	; (80004d4 <USART_PeriClkCtrl+0x128>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d106      	bne.n	80004a8 <USART_PeriClkCtrl+0xfc>
 800049a:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 800049c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800049e:	4a09      	ldr	r2, [pc, #36]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 80004a0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80004a4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80004a6:	e005      	b.n	80004b4 <USART_PeriClkCtrl+0x108>
		USARTx_PCLK_DI(pUSARTx); //Go to I2Cx_PCLK_DI macro for more details
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 80004aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004ac:	4a05      	ldr	r2, [pc, #20]	; (80004c4 <USART_PeriClkCtrl+0x118>)
 80004ae:	f023 0320 	bic.w	r3, r3, #32
 80004b2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	40011000 	.word	0x40011000
 80004c4:	40023800 	.word	0x40023800
 80004c8:	40004400 	.word	0x40004400
 80004cc:	40004800 	.word	0x40004800
 80004d0:	40004c00 	.word	0x40004c00
 80004d4:	40005000 	.word	0x40005000

080004d8 <USART_Init>:
 * 						  and port
 *
 * @return				- none
 * @note				- none
 */
void USART_Init(USART_Handle_t* pUSARTHandler) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	uint32_t USARTDiv;
	uint16_t mantissa, temp;
	uint8_t fraction;
	//Enable the peripheral clock
	USART_PeriClkCtrl(pUSARTHandler->pUSARTx, ENABLE);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2101      	movs	r1, #1
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff ff60 	bl	80003ac <USART_PeriClkCtrl>


	//Configure USART mode
	switch (pUSARTHandler->USART_Config.Mode) {
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	7a1b      	ldrb	r3, [r3, #8]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d00c      	beq.n	800050e <USART_Init+0x36>
 80004f4:	2b02      	cmp	r3, #2
 80004f6:	d013      	beq.n	8000520 <USART_Init+0x48>
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d122      	bne.n	8000542 <USART_Init+0x6a>
	case USART_MODE_ONLY_TX:	//Set the TE bit in USART_CR to send an idle frame as the first transmission
								pUSARTHandler->pUSARTx->CR1 |= 1 << USART_CR1_TE;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	68da      	ldr	r2, [r3, #12]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f042 0208 	orr.w	r2, r2, #8
 800050a:	60da      	str	r2, [r3, #12]
								break;
 800050c:	e019      	b.n	8000542 <USART_Init+0x6a>

	case USART_MODE_ONLY_RX:	//Set the TE bit in USART_CR to send an idle frame as the first transmission
								pUSARTHandler->pUSARTx->CR1 |= 1 << USART_CR1_RE;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	68da      	ldr	r2, [r3, #12]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f042 0204 	orr.w	r2, r2, #4
 800051c:	60da      	str	r2, [r3, #12]
								break;
 800051e:	e010      	b.n	8000542 <USART_Init+0x6a>

	case USART_MODE_TX_RX:		pUSARTHandler->pUSARTx->CR1 |= 1 << USART_CR1_TE;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	68da      	ldr	r2, [r3, #12]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f042 0208 	orr.w	r2, r2, #8
 800052e:	60da      	str	r2, [r3, #12]
								pUSARTHandler->pUSARTx->CR1 |= 1 << USART_CR1_RE;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	68da      	ldr	r2, [r3, #12]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f042 0204 	orr.w	r2, r2, #4
 800053e:	60da      	str	r2, [r3, #12]
								break;
 8000540:	bf00      	nop

	}
	//Configure the parity control
	if (pUSARTHandler->USART_Config.ParityControl != USART_PARITY_DI) {
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	7adb      	ldrb	r3, [r3, #11]
 8000546:	2b02      	cmp	r3, #2
 8000548:	d012      	beq.n	8000570 <USART_Init+0x98>

		//Enable the Parity control
		pUSARTHandler->pUSARTx->CR1 |= 1 << USART_CR1_PCE;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	68da      	ldr	r2, [r3, #12]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000558:	60da      	str	r2, [r3, #12]

		//Set the parity bit control
		pUSARTHandler->pUSARTx->CR1 |= pUSARTHandler->USART_Config.ParityControl << USART_CR1_PS;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	68da      	ldr	r2, [r3, #12]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	7adb      	ldrb	r3, [r3, #11]
 8000564:	025b      	lsls	r3, r3, #9
 8000566:	4619      	mov	r1, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	430a      	orrs	r2, r1
 800056e:	60da      	str	r2, [r3, #12]

	}

	//Configure the over-sampling
	pUSARTHandler->pUSARTx->CR1 |= pUSARTHandler->USART_Config.Oversampling << USART_CR1_OVER8;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	68da      	ldr	r2, [r3, #12]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	7b5b      	ldrb	r3, [r3, #13]
 800057a:	03db      	lsls	r3, r3, #15
 800057c:	4619      	mov	r1, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	430a      	orrs	r2, r1
 8000584:	60da      	str	r2, [r3, #12]

	//Configure the word length
	pUSARTHandler->pUSARTx->CR1 |= pUSARTHandler->USART_Config.WordLength << USART_CR1_M;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	68da      	ldr	r2, [r3, #12]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	7a9b      	ldrb	r3, [r3, #10]
 8000590:	031b      	lsls	r3, r3, #12
 8000592:	4619      	mov	r1, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	430a      	orrs	r2, r1
 800059a:	60da      	str	r2, [r3, #12]

	//Configure the number of stop bits
	pUSARTHandler->pUSARTx->CR2 |= pUSARTHandler->USART_Config.NoOfStopBits << USART_CR2_STOP;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	691a      	ldr	r2, [r3, #16]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	7a5b      	ldrb	r3, [r3, #9]
 80005a6:	031b      	lsls	r3, r3, #12
 80005a8:	4619      	mov	r1, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	430a      	orrs	r2, r1
 80005b0:	611a      	str	r2, [r3, #16]

	//Configure the HW flow control
	if (pUSARTHandler->USART_Config.HWFlowControl != USART_HW_FLOW_CTRL_NONE) {
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	7b1b      	ldrb	r3, [r3, #12]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d035      	beq.n	8000626 <USART_Init+0x14e>

		//Enable CTS bit
		if (pUSARTHandler->USART_Config.HWFlowControl == USART_HW_FLOW_CTRL_CTS) {
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	7b1b      	ldrb	r3, [r3, #12]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d10b      	bne.n	80005da <USART_Init+0x102>
			pUSARTHandler->pUSARTx->CR3 |= pUSARTHandler->USART_Config.HWFlowControl << USART_CR3_CTSE;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	695a      	ldr	r2, [r3, #20]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	7b1b      	ldrb	r3, [r3, #12]
 80005cc:	025b      	lsls	r3, r3, #9
 80005ce:	4619      	mov	r1, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	430a      	orrs	r2, r1
 80005d6:	615a      	str	r2, [r3, #20]
 80005d8:	e025      	b.n	8000626 <USART_Init+0x14e>
		}
		//Enable RTS bit
		else if (pUSARTHandler->USART_Config.HWFlowControl == USART_HW_FLOW_CTRL_RTS) {
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	7b1b      	ldrb	r3, [r3, #12]
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d10b      	bne.n	80005fa <USART_Init+0x122>
			pUSARTHandler->pUSARTx->CR3 |= pUSARTHandler->USART_Config.HWFlowControl << USART_CR3_RTSE;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	695a      	ldr	r2, [r3, #20]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7b1b      	ldrb	r3, [r3, #12]
 80005ec:	021b      	lsls	r3, r3, #8
 80005ee:	4619      	mov	r1, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	430a      	orrs	r2, r1
 80005f6:	615a      	str	r2, [r3, #20]
 80005f8:	e015      	b.n	8000626 <USART_Init+0x14e>
		}
		//Enable both RTS and CTS
		else {
			pUSARTHandler->pUSARTx->CR3 |= pUSARTHandler->USART_Config.HWFlowControl << USART_CR3_CTSE;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	695a      	ldr	r2, [r3, #20]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	7b1b      	ldrb	r3, [r3, #12]
 8000604:	025b      	lsls	r3, r3, #9
 8000606:	4619      	mov	r1, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	430a      	orrs	r2, r1
 800060e:	615a      	str	r2, [r3, #20]
			pUSARTHandler->pUSARTx->CR3 |= pUSARTHandler->USART_Config.HWFlowControl << USART_CR3_RTSE;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	695a      	ldr	r2, [r3, #20]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	7b1b      	ldrb	r3, [r3, #12]
 800061a:	021b      	lsls	r3, r3, #8
 800061c:	4619      	mov	r1, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	430a      	orrs	r2, r1
 8000624:	615a      	str	r2, [r3, #20]
		}
	}

	//Baud rate configuration
	USARTDiv = getUSARTDiv(pUSARTHandler);
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f000 f958 	bl	80008dc <getUSARTDiv>
 800062c:	6138      	str	r0, [r7, #16]
		mantissa += temp2 - 15U;
	}
	fraction = (uint8_t) temp2;*/

	//SECOND APPROACH
	mantissa = USARTDiv / 100U;
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	4a24      	ldr	r2, [pc, #144]	; (80006c4 <USART_Init+0x1ec>)
 8000632:	fba2 2303 	umull	r2, r3, r2, r3
 8000636:	095b      	lsrs	r3, r3, #5
 8000638:	82fb      	strh	r3, [r7, #22]
	temp = USARTDiv - (mantissa * 100U);
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	b29a      	uxth	r2, r3
 800063e:	8afb      	ldrh	r3, [r7, #22]
 8000640:	4619      	mov	r1, r3
 8000642:	0089      	lsls	r1, r1, #2
 8000644:	440b      	add	r3, r1
 8000646:	4619      	mov	r1, r3
 8000648:	0088      	lsls	r0, r1, #2
 800064a:	4619      	mov	r1, r3
 800064c:	4603      	mov	r3, r0
 800064e:	440b      	add	r3, r1
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	b29b      	uxth	r3, r3
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	81fb      	strh	r3, [r7, #14]
	temp *= (pUSARTHandler->USART_Config.Oversampling == USART_OVERSAMPLING_BY_8) ? 8U : 16U;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	7b5b      	ldrb	r3, [r3, #13]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d101      	bne.n	8000664 <USART_Init+0x18c>
 8000660:	2308      	movs	r3, #8
 8000662:	e000      	b.n	8000666 <USART_Init+0x18e>
 8000664:	2310      	movs	r3, #16
 8000666:	89fa      	ldrh	r2, [r7, #14]
 8000668:	fb12 f303 	smulbb	r3, r2, r3
 800066c:	81fb      	strh	r3, [r7, #14]
	temp = (temp + 50U) / 100U; //always round up
 800066e:	89fb      	ldrh	r3, [r7, #14]
 8000670:	3332      	adds	r3, #50	; 0x32
 8000672:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <USART_Init+0x1ec>)
 8000674:	fba2 2303 	umull	r2, r3, r2, r3
 8000678:	095b      	lsrs	r3, r3, #5
 800067a:	81fb      	strh	r3, [r7, #14]
	if (temp > 15U) {
 800067c:	89fb      	ldrh	r3, [r7, #14]
 800067e:	2b0f      	cmp	r3, #15
 8000680:	d908      	bls.n	8000694 <USART_Init+0x1bc>
		mantissa += temp - 15U;
 8000682:	8afa      	ldrh	r2, [r7, #22]
 8000684:	89fb      	ldrh	r3, [r7, #14]
 8000686:	4413      	add	r3, r2
 8000688:	b29b      	uxth	r3, r3
 800068a:	3b0f      	subs	r3, #15
 800068c:	82fb      	strh	r3, [r7, #22]
		fraction = 15U;
 800068e:	230f      	movs	r3, #15
 8000690:	757b      	strb	r3, [r7, #21]
 8000692:	e001      	b.n	8000698 <USART_Init+0x1c0>
	} else {
		fraction = temp;
 8000694:	89fb      	ldrh	r3, [r7, #14]
 8000696:	757b      	strb	r3, [r7, #21]
	}
	pUSARTHandler->pUSARTx->BRR |= mantissa << USART_BRR_DIV_MANTISSA;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	8afb      	ldrh	r3, [r7, #22]
 80006a0:	011b      	lsls	r3, r3, #4
 80006a2:	4619      	mov	r1, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	430a      	orrs	r2, r1
 80006aa:	609a      	str	r2, [r3, #8]
	pUSARTHandler->pUSARTx->BRR |= fraction << USART_BRR_DIV_FRACTION;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	6899      	ldr	r1, [r3, #8]
 80006b2:	7d7a      	ldrb	r2, [r7, #21]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	430a      	orrs	r2, r1
 80006ba:	609a      	str	r2, [r3, #8]
}
 80006bc:	bf00      	nop
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	51eb851f 	.word	0x51eb851f

080006c8 <USART_PeripheralEnable>:
 * @param[in]			= ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void USART_PeripheralEnable(USART_Reg_t* pUSARTx, uint8_t EnOrDi) {
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	460b      	mov	r3, r1
 80006d2:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 80006d4:	78fb      	ldrb	r3, [r7, #3]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d006      	beq.n	80006e8 <USART_PeripheralEnable+0x20>
		pUSARTx->CR1 |= 1 << USART_CR1_UE;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	68db      	ldr	r3, [r3, #12]
 80006de:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	60da      	str	r2, [r3, #12]
	} else {
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 80006e6:	e005      	b.n	80006f4 <USART_PeripheralEnable+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	60da      	str	r2, [r3, #12]
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <USART_SendData>:
 *
 * @return				- none
 * @note				- See the MCU Reference Manual for more details
 * 						  This is a polling (non-interrupt) approach
 */
void USART_SendData(USART_Handle_t* pUSARTHandler, uint8_t* pTxBuffer, uint32_t len) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]

	while (len) {
 800070c:	e02c      	b.n	8000768 <USART_SendData+0x68>
		//Poll until TXE is set
		while (!USART_CheckStatusFlag(&pUSARTHandler->pUSARTx->SR, USART_FLAG_SR_TXE));
 800070e:	bf00      	nop
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f837 	bl	800078a <USART_CheckStatusFlag>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d0f6      	beq.n	8000710 <USART_SendData+0x10>

		//Check if the word length is 8 or 9-bit data frame
		if (pUSARTHandler->USART_Config.WordLength == USART_WORDLEN_9BITS) {
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	7a9b      	ldrb	r3, [r3, #10]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d113      	bne.n	8000752 <USART_SendData+0x52>

			//2 bytes of data will be sent, 9-bit masking is necessary
			pUSARTHandler->pUSARTx->DR = *((uint16_t*) pTxBuffer) & ((uint16_t) 0x1FF);
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	461a      	mov	r2, r3
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000738:	605a      	str	r2, [r3, #4]

			//When parity bit is disabled, the data sent is 2 bytes
			//For more, see page 991 in MCU Reference Manual
			if (pUSARTHandler->USART_Config.ParityControl == USART_PARITY_DI) {
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	7adb      	ldrb	r3, [r3, #11]
 800073e:	2b02      	cmp	r3, #2
 8000740:	d103      	bne.n	800074a <USART_SendData+0x4a>
				(uint16_t*) pTxBuffer++;
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	3301      	adds	r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	e00b      	b.n	8000762 <USART_SendData+0x62>
			} else {
				//Parity bit is used in this transfer. Thus, 8 bits of user data
				//will be sent. The 9th bit will be replaced with parity bit
				//by hardware
				pTxBuffer++;
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	3301      	adds	r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	e007      	b.n	8000762 <USART_SendData+0x62>
			}
		} else {
			//Write buffer into the data register at 8-bit data frame
			pUSARTHandler->pUSARTx->DR = *pTxBuffer & ((uint8_t) 0xFF);
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	781a      	ldrb	r2, [r3, #0]
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
			pTxBuffer++;
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	3301      	adds	r3, #1
 8000760:	60bb      	str	r3, [r7, #8]
		}
		len--;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	3b01      	subs	r3, #1
 8000766:	607b      	str	r3, [r7, #4]
	while (len) {
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1cf      	bne.n	800070e <USART_SendData+0xe>
	}

	//Wait until the transmission is complete
	while (!USART_CheckStatusFlag(&pUSARTHandler->pUSARTx->SR, USART_FLAG_SR_TC));
 800076e:	bf00      	nop
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2140      	movs	r1, #64	; 0x40
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f807 	bl	800078a <USART_CheckStatusFlag>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0f6      	beq.n	8000770 <USART_SendData+0x70>

}
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <USART_CheckStatusFlag>:
 * @param[in]			- the status flag
 *
 * @return				- none
 * @note				- none
 */
uint8_t USART_CheckStatusFlag(__vo uint32_t* statusReg, uint16_t flag) {
 800078a:	b480      	push	{r7}
 800078c:	b083      	sub	sp, #12
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
 8000792:	460b      	mov	r3, r1
 8000794:	807b      	strh	r3, [r7, #2]
	if ((*statusReg) & flag) {
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	887b      	ldrh	r3, [r7, #2]
 800079c:	4013      	ands	r3, r2
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <USART_CheckStatusFlag+0x1c>
		return FLAG_SET;
 80007a2:	2301      	movs	r3, #1
 80007a4:	e000      	b.n	80007a8 <USART_CheckStatusFlag+0x1e>
	}
	return FLAG_RESET;
 80007a6:	2300      	movs	r3, #0
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <getPLLClkFreq>:
 * @param[in]			-
 *
 * @return				- none
 * @note				- See the Clock Tree diagram in STM32F4xx Reference Manual for details
 */
static uint32_t getPLLClkFreq() {
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

	//Implemented later
	return 1;
 80007b8:	2301      	movs	r3, #1
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <getAPBxClkFreq>:
 * @param[in]			-
 *
 * @return				- none
 * @note				- See the Clock Tree diagram in STM32F4xx Reference Manual for details
 */
static uint32_t getAPBxClkFreq(USART_Reg_t* pUSARTx) {
 80007c4:	b5b0      	push	{r4, r5, r7, lr}
 80007c6:	b08e      	sub	sp, #56	; 0x38
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]

	uint16_t temp, AHB1Prescalar,  APBxPrescalar;
	uint16_t AHB1PreSclr[9] = {1, 2, 4, 6, 16, 64, 128, 256, 512};
 80007cc:	4b3a      	ldr	r3, [pc, #232]	; (80008b8 <getAPBxClkFreq+0xf4>)
 80007ce:	f107 0418 	add.w	r4, r7, #24
 80007d2:	461d      	mov	r5, r3
 80007d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d8:	682b      	ldr	r3, [r5, #0]
 80007da:	8023      	strh	r3, [r4, #0]
	uint16_t APBxPreSclr[5] = {1, 2, 4, 8, 16};
 80007dc:	4a37      	ldr	r2, [pc, #220]	; (80008bc <getAPBxClkFreq+0xf8>)
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80007e4:	c303      	stmia	r3!, {r0, r1}
 80007e6:	801a      	strh	r2, [r3, #0]
	uint32_t sysClk;

	//Determine what system clock the MCU is running
	switch ((RCC->CFGR >> 2U) & 0x3) {
 80007e8:	4b35      	ldr	r3, [pc, #212]	; (80008c0 <getAPBxClkFreq+0xfc>)
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	089b      	lsrs	r3, r3, #2
 80007ee:	f003 0303 	and.w	r3, r3, #3
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d004      	beq.n	8000800 <getAPBxClkFreq+0x3c>
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d305      	bcc.n	8000806 <getAPBxClkFreq+0x42>
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d006      	beq.n	800080c <getAPBxClkFreq+0x48>
 80007fe:	e009      	b.n	8000814 <getAPBxClkFreq+0x50>
	case RCC_HSE:	sysClk = HSE_CLK_FREQ; break; //8MHz
 8000800:	4b30      	ldr	r3, [pc, #192]	; (80008c4 <getAPBxClkFreq+0x100>)
 8000802:	633b      	str	r3, [r7, #48]	; 0x30
 8000804:	e006      	b.n	8000814 <getAPBxClkFreq+0x50>
	case RCC_HSI:	sysClk = HSI_CLK_FREQ; break; //16MHz
 8000806:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <getAPBxClkFreq+0x104>)
 8000808:	633b      	str	r3, [r7, #48]	; 0x30
 800080a:	e003      	b.n	8000814 <getAPBxClkFreq+0x50>
	case RCC_PLL:	sysClk = getPLLClkFreq(); break; //See this function implementation for details
 800080c:	f7ff ffd2 	bl	80007b4 <getPLLClkFreq>
 8000810:	6338      	str	r0, [r7, #48]	; 0x30
 8000812:	bf00      	nop
	}

	//Determine the prescalar factor AHB1 is using
	temp = (RCC->CFGR >> 4U) & 0xF;
 8000814:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <getAPBxClkFreq+0xfc>)
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	091b      	lsrs	r3, r3, #4
 800081a:	b29b      	uxth	r3, r3
 800081c:	f003 030f 	and.w	r3, r3, #15
 8000820:	86fb      	strh	r3, [r7, #54]	; 0x36
	AHB1Prescalar = (temp < 8U) ? AHB1PreSclr[0] : AHB1PreSclr[temp % 8 + 1];
 8000822:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000824:	2b07      	cmp	r3, #7
 8000826:	d801      	bhi.n	800082c <getAPBxClkFreq+0x68>
 8000828:	8b3b      	ldrh	r3, [r7, #24]
 800082a:	e009      	b.n	8000840 <getAPBxClkFreq+0x7c>
 800082c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	3301      	adds	r3, #1
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800083a:	4413      	add	r3, r2
 800083c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8000840:	85fb      	strh	r3, [r7, #46]	; 0x2e

	//Determine the prescalar factor APB1 is using
	if (pUSARTx == USART2 || pUSARTx == USART3 || pUSARTx == UART4 || pUSARTx == UART5) {
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4a21      	ldr	r2, [pc, #132]	; (80008cc <getAPBxClkFreq+0x108>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d00b      	beq.n	8000862 <getAPBxClkFreq+0x9e>
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a20      	ldr	r2, [pc, #128]	; (80008d0 <getAPBxClkFreq+0x10c>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d007      	beq.n	8000862 <getAPBxClkFreq+0x9e>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <getAPBxClkFreq+0x110>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d003      	beq.n	8000862 <getAPBxClkFreq+0x9e>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a1e      	ldr	r2, [pc, #120]	; (80008d8 <getAPBxClkFreq+0x114>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d107      	bne.n	8000872 <getAPBxClkFreq+0xae>
		//USART2, USART3, UART4, UART5 hang on APB1
		temp = (RCC->CFGR >> 10U) & 0x7;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <getAPBxClkFreq+0xfc>)
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	0a9b      	lsrs	r3, r3, #10
 8000868:	b29b      	uxth	r3, r3
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8000870:	e006      	b.n	8000880 <getAPBxClkFreq+0xbc>
	} else {
		//USART1 and USART6 hang on APB2
		temp = (RCC->CFGR >> 13U) & 0x7;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <getAPBxClkFreq+0xfc>)
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	0b5b      	lsrs	r3, r3, #13
 8000878:	b29b      	uxth	r3, r3
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	86fb      	strh	r3, [r7, #54]	; 0x36
	}
	APBxPrescalar = (temp < 4U) ? APBxPreSclr[0] : APBxPreSclr[temp % 8 + 1];
 8000880:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000882:	2b03      	cmp	r3, #3
 8000884:	d801      	bhi.n	800088a <getAPBxClkFreq+0xc6>
 8000886:	89bb      	ldrh	r3, [r7, #12]
 8000888:	e009      	b.n	800089e <getAPBxClkFreq+0xda>
 800088a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800088c:	f003 0307 	and.w	r3, r3, #7
 8000890:	3301      	adds	r3, #1
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000898:	4413      	add	r3, r2
 800089a:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 800089e:	85bb      	strh	r3, [r7, #44]	; 0x2c

	//Return the APB1 clock freq
	return (sysClk / AHB1Prescalar) / APBxPrescalar;
 80008a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80008a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80008a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80008a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80008aa:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3738      	adds	r7, #56	; 0x38
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bdb0      	pop	{r4, r5, r7, pc}
 80008b6:	bf00      	nop
 80008b8:	08000e40 	.word	0x08000e40
 80008bc:	08000e54 	.word	0x08000e54
 80008c0:	40023800 	.word	0x40023800
 80008c4:	007a1200 	.word	0x007a1200
 80008c8:	00f42400 	.word	0x00f42400
 80008cc:	40004400 	.word	0x40004400
 80008d0:	40004800 	.word	0x40004800
 80008d4:	40004c00 	.word	0x40004c00
 80008d8:	40005000 	.word	0x40005000

080008dc <getUSARTDiv>:
 * @param[in]			- handle structure of specific UART peripheral
 *
 * @return				- return the USART baud rate
 * @note				- none
 */
static uint32_t getUSARTDiv(USART_Handle_t* pUSARTHandler) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]

	uint8_t factor = (pUSARTHandler->USART_Config.Oversampling == USART_OVERSAMPLING_BY_8) ? 1U : 0U;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	7b5b      	ldrb	r3, [r3, #13]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d101      	bne.n	80008f0 <getUSARTDiv+0x14>
 80008ec:	2301      	movs	r3, #1
 80008ee:	e000      	b.n	80008f2 <getUSARTDiv+0x16>
 80008f0:	2300      	movs	r3, #0
 80008f2:	73fb      	strb	r3, [r7, #15]
	uint32_t APBxClkFreq = getAPBxClkFreq(pUSARTHandler->pUSARTx);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff63 	bl	80007c4 <getAPBxClkFreq>
 80008fe:	60b8      	str	r0, [r7, #8]

	return (APBxClkFreq * 25U) / (2 * (2 - factor) * pUSARTHandler->USART_Config.BaudRate);
 8000900:	68ba      	ldr	r2, [r7, #8]
 8000902:	4613      	mov	r3, r2
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	4413      	add	r3, r2
 8000908:	009a      	lsls	r2, r3, #2
 800090a:	441a      	add	r2, r3
 800090c:	7bfb      	ldrb	r3, [r7, #15]
 800090e:	f1c3 0302 	rsb	r3, r3, #2
 8000912:	4619      	mov	r1, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	fb03 f301 	mul.w	r3, r3, r1
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000922:	4618      	mov	r0, r3
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <GPIO_PeriClkCtrl>:
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void GPIO_PeriClkCtrl(GPIO_Reg_t* pGPIOx, uint8_t EnOrDi) {
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	70fb      	strb	r3, [r7, #3]

	//Enable or disable the GPIO clock peripherals
	if (EnOrDi) {
 8000938:	78fb      	ldrb	r3, [r7, #3]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d074      	beq.n	8000a28 <GPIO_PeriClkCtrl+0xfc>
		//Special note: switch cannot be used for pointer, only integer
		GPIO_PCLK_EN(pGPIOx);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a76      	ldr	r2, [pc, #472]	; (8000b1c <GPIO_PeriClkCtrl+0x1f0>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d106      	bne.n	8000954 <GPIO_PeriClkCtrl+0x28>
 8000946:	4b76      	ldr	r3, [pc, #472]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a75      	ldr	r2, [pc, #468]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
	} else {
		GPIO_PCLK_DI(pGPIOx);
	}
}
 8000952:	e0dd      	b.n	8000b10 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a73      	ldr	r2, [pc, #460]	; (8000b24 <GPIO_PeriClkCtrl+0x1f8>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d106      	bne.n	800096a <GPIO_PeriClkCtrl+0x3e>
 800095c:	4b70      	ldr	r3, [pc, #448]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000960:	4a6f      	ldr	r2, [pc, #444]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000962:	f043 0302 	orr.w	r3, r3, #2
 8000966:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000968:	e0d2      	b.n	8000b10 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a6e      	ldr	r2, [pc, #440]	; (8000b28 <GPIO_PeriClkCtrl+0x1fc>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d106      	bne.n	8000980 <GPIO_PeriClkCtrl+0x54>
 8000972:	4b6b      	ldr	r3, [pc, #428]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a6a      	ldr	r2, [pc, #424]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800097e:	e0c7      	b.n	8000b10 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a6a      	ldr	r2, [pc, #424]	; (8000b2c <GPIO_PeriClkCtrl+0x200>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d106      	bne.n	8000996 <GPIO_PeriClkCtrl+0x6a>
 8000988:	4b65      	ldr	r3, [pc, #404]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 800098a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098c:	4a64      	ldr	r2, [pc, #400]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 800098e:	f043 0308 	orr.w	r3, r3, #8
 8000992:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000994:	e0bc      	b.n	8000b10 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a65      	ldr	r2, [pc, #404]	; (8000b30 <GPIO_PeriClkCtrl+0x204>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d106      	bne.n	80009ac <GPIO_PeriClkCtrl+0x80>
 800099e:	4b60      	ldr	r3, [pc, #384]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a5f      	ldr	r2, [pc, #380]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 80009a4:	f043 0310 	orr.w	r3, r3, #16
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009aa:	e0b1      	b.n	8000b10 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a61      	ldr	r2, [pc, #388]	; (8000b34 <GPIO_PeriClkCtrl+0x208>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d106      	bne.n	80009c2 <GPIO_PeriClkCtrl+0x96>
 80009b4:	4b5a      	ldr	r3, [pc, #360]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b8:	4a59      	ldr	r2, [pc, #356]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 80009ba:	f043 0320 	orr.w	r3, r3, #32
 80009be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009c0:	e0a6      	b.n	8000b10 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a5c      	ldr	r2, [pc, #368]	; (8000b38 <GPIO_PeriClkCtrl+0x20c>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d106      	bne.n	80009d8 <GPIO_PeriClkCtrl+0xac>
 80009ca:	4b55      	ldr	r3, [pc, #340]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a54      	ldr	r2, [pc, #336]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 80009d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009d6:	e09b      	b.n	8000b10 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a58      	ldr	r2, [pc, #352]	; (8000b3c <GPIO_PeriClkCtrl+0x210>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d106      	bne.n	80009ee <GPIO_PeriClkCtrl+0xc2>
 80009e0:	4b4f      	ldr	r3, [pc, #316]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e4:	4a4e      	ldr	r2, [pc, #312]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 80009e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ec:	e090      	b.n	8000b10 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a53      	ldr	r2, [pc, #332]	; (8000b40 <GPIO_PeriClkCtrl+0x214>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d106      	bne.n	8000a04 <GPIO_PeriClkCtrl+0xd8>
 80009f6:	4b4a      	ldr	r3, [pc, #296]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a49      	ldr	r2, [pc, #292]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 80009fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a02:	e085      	b.n	8000b10 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a4f      	ldr	r2, [pc, #316]	; (8000b44 <GPIO_PeriClkCtrl+0x218>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d106      	bne.n	8000a1a <GPIO_PeriClkCtrl+0xee>
 8000a0c:	4b44      	ldr	r3, [pc, #272]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	4a43      	ldr	r2, [pc, #268]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a16:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a18:	e07a      	b.n	8000b10 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000a1a:	4b41      	ldr	r3, [pc, #260]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a40      	ldr	r2, [pc, #256]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000a20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a26:	e073      	b.n	8000b10 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a3c      	ldr	r2, [pc, #240]	; (8000b1c <GPIO_PeriClkCtrl+0x1f0>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d106      	bne.n	8000a3e <GPIO_PeriClkCtrl+0x112>
 8000a30:	4b3b      	ldr	r3, [pc, #236]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a34:	4a3a      	ldr	r2, [pc, #232]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000a36:	f023 0301 	bic.w	r3, r3, #1
 8000a3a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a3c:	e068      	b.n	8000b10 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a38      	ldr	r2, [pc, #224]	; (8000b24 <GPIO_PeriClkCtrl+0x1f8>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d106      	bne.n	8000a54 <GPIO_PeriClkCtrl+0x128>
 8000a46:	4b36      	ldr	r3, [pc, #216]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a35      	ldr	r2, [pc, #212]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000a4c:	f023 0302 	bic.w	r3, r3, #2
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a52:	e05d      	b.n	8000b10 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a34      	ldr	r2, [pc, #208]	; (8000b28 <GPIO_PeriClkCtrl+0x1fc>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d106      	bne.n	8000a6a <GPIO_PeriClkCtrl+0x13e>
 8000a5c:	4b30      	ldr	r3, [pc, #192]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	4a2f      	ldr	r2, [pc, #188]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000a62:	f023 0304 	bic.w	r3, r3, #4
 8000a66:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a68:	e052      	b.n	8000b10 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a2f      	ldr	r2, [pc, #188]	; (8000b2c <GPIO_PeriClkCtrl+0x200>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d106      	bne.n	8000a80 <GPIO_PeriClkCtrl+0x154>
 8000a72:	4b2b      	ldr	r3, [pc, #172]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a2a      	ldr	r2, [pc, #168]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000a78:	f023 0308 	bic.w	r3, r3, #8
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a7e:	e047      	b.n	8000b10 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a2b      	ldr	r2, [pc, #172]	; (8000b30 <GPIO_PeriClkCtrl+0x204>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d106      	bne.n	8000a96 <GPIO_PeriClkCtrl+0x16a>
 8000a88:	4b25      	ldr	r3, [pc, #148]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8c:	4a24      	ldr	r2, [pc, #144]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000a8e:	f023 0310 	bic.w	r3, r3, #16
 8000a92:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a94:	e03c      	b.n	8000b10 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a26      	ldr	r2, [pc, #152]	; (8000b34 <GPIO_PeriClkCtrl+0x208>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d106      	bne.n	8000aac <GPIO_PeriClkCtrl+0x180>
 8000a9e:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a1f      	ldr	r2, [pc, #124]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000aa4:	f023 0320 	bic.w	r3, r3, #32
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000aaa:	e031      	b.n	8000b10 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a22      	ldr	r2, [pc, #136]	; (8000b38 <GPIO_PeriClkCtrl+0x20c>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d106      	bne.n	8000ac2 <GPIO_PeriClkCtrl+0x196>
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4a19      	ldr	r2, [pc, #100]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000aba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ac0:	e026      	b.n	8000b10 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a1d      	ldr	r2, [pc, #116]	; (8000b3c <GPIO_PeriClkCtrl+0x210>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d106      	bne.n	8000ad8 <GPIO_PeriClkCtrl+0x1ac>
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ad6:	e01b      	b.n	8000b10 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a19      	ldr	r2, [pc, #100]	; (8000b40 <GPIO_PeriClkCtrl+0x214>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d106      	bne.n	8000aee <GPIO_PeriClkCtrl+0x1c2>
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000ae6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000aea:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000aec:	e010      	b.n	8000b10 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <GPIO_PeriClkCtrl+0x218>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d106      	bne.n	8000b04 <GPIO_PeriClkCtrl+0x1d8>
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a09      	ldr	r2, [pc, #36]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b02:	e005      	b.n	8000b10 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	4a05      	ldr	r2, [pc, #20]	; (8000b20 <GPIO_PeriClkCtrl+0x1f4>)
 8000b0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b0e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	40020000 	.word	0x40020000
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020400 	.word	0x40020400
 8000b28:	40020800 	.word	0x40020800
 8000b2c:	40020c00 	.word	0x40020c00
 8000b30:	40020100 	.word	0x40020100
 8000b34:	40021400 	.word	0x40021400
 8000b38:	40021800 	.word	0x40021800
 8000b3c:	40021c00 	.word	0x40021c00
 8000b40:	40022000 	.word	0x40022000
 8000b44:	40022400 	.word	0x40022400

08000b48 <GPIO_Init>:
 * @param[in]			-
 *
 * @return				- none
 * @note				- none
 */
void GPIO_Init(GPIO_Handle_t* pGPIOHandler) {
 8000b48:	b5b0      	push	{r4, r5, r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

	//uint32_t temp;
	GPIO_Reg_t* GPIOx = pGPIOHandler->pGPIOx;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	623b      	str	r3, [r7, #32]
	GPIO_PinConfig_t GPIOx_PinConf = pGPIOHandler->GPIOx_PinConfig;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f107 0408 	add.w	r4, r7, #8
 8000b5c:	1d1d      	adds	r5, r3, #4
 8000b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b62:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b66:	e884 0003 	stmia.w	r4, {r0, r1}

	//Enable the GPIO Clock
	GPIO_PeriClkCtrl(GPIOx, ENABLE);
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	6a38      	ldr	r0, [r7, #32]
 8000b6e:	f7ff fedd 	bl	800092c <GPIO_PeriClkCtrl>

	/*Note: before setting the bits: make sure those registers are clear */
	//Clearing the registers
	//Setting the bits register
	for (uint16_t i = 0U; i < GPIO_PIN_NUMBER; i++) {
 8000b72:	2300      	movs	r3, #0
 8000b74:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000b76:	e0f7      	b.n	8000d68 <GPIO_Init+0x220>

		//Check if the ith bit is set
		if (GPIOx_PinConf.GPIO_PinNumber & (1 << i)) {
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b82:	4013      	ands	r3, r2
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	f000 80ec 	beq.w	8000d62 <GPIO_Init+0x21a>

			//Handle the GPIO pin alternate function mode and GPIO output mode
			if (GPIOx_PinConf.GPIO_PinMode == GPIO_ALT_FUNC_MODE || GPIOx_PinConf.GPIO_PinMode == GPIO_OUTPUT_MODE) {
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d002      	beq.n	8000b96 <GPIO_Init+0x4e>
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d12c      	bne.n	8000bf0 <GPIO_Init+0xa8>
				if (i < (GPIO_PIN_NUMBER / 2)) {
 8000b96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b98:	2b07      	cmp	r3, #7
 8000b9a:	d80a      	bhi.n	8000bb2 <GPIO_Init+0x6a>
					GPIOx->AFR[0] |= (GPIOx_PinConf.GPIO_PinAltFuncMode << i * 4U);
 8000b9c:	6a3b      	ldr	r3, [r7, #32]
 8000b9e:	6a1a      	ldr	r2, [r3, #32]
 8000ba0:	69f9      	ldr	r1, [r7, #28]
 8000ba2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	431a      	orrs	r2, r3
 8000bac:	6a3b      	ldr	r3, [r7, #32]
 8000bae:	621a      	str	r2, [r3, #32]
 8000bb0:	e00b      	b.n	8000bca <GPIO_Init+0x82>
				} else {
					GPIOx->AFR[1] |= (GPIOx_PinConf.GPIO_PinAltFuncMode << (i % (GPIO_PIN_NUMBER / 2)) * 4U);
 8000bb2:	6a3b      	ldr	r3, [r7, #32]
 8000bb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bb6:	69f9      	ldr	r1, [r7, #28]
 8000bb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
				}

				//Configure the OTYPER register
				GPIOx->OTYPER |= (GPIOx_PinConf.GPIO_PinOPType << i);
 8000bca:	6a3b      	ldr	r3, [r7, #32]
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	69b9      	ldr	r1, [r7, #24]
 8000bd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	6a3b      	ldr	r3, [r7, #32]
 8000bda:	605a      	str	r2, [r3, #4]

				//Configure the OSPEED register
				GPIOx->OSPEEDR |= (GPIOx_PinConf.GPIO_PinSpeed << i * 2U);
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	6939      	ldr	r1, [r7, #16]
 8000be2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	431a      	orrs	r2, r3
 8000bec:	6a3b      	ldr	r3, [r7, #32]
 8000bee:	609a      	str	r2, [r3, #8]
			}

			//Handle the GPIO pin interrupt mode
			if ((GPIOx_PinConf.GPIO_PinMode == GPIO_IT_FT_MODE) || (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RT_MODE)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2b04      	cmp	r3, #4
 8000bf4:	d006      	beq.n	8000c04 <GPIO_Init+0xbc>
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2b05      	cmp	r3, #5
 8000bfa:	d003      	beq.n	8000c04 <GPIO_Init+0xbc>
				|| (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RFT_MODE)) {
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2b06      	cmp	r3, #6
 8000c00:	f040 809b 	bne.w	8000d3a <GPIO_Init+0x1f2>

				//Enable the clock for SYSCFG registers
				SYSCFG_PCLK_EN();
 8000c04:	4b5c      	ldr	r3, [pc, #368]	; (8000d78 <GPIO_Init+0x230>)
 8000c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c08:	4a5b      	ldr	r2, [pc, #364]	; (8000d78 <GPIO_Init+0x230>)
 8000c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0e:	6453      	str	r3, [r2, #68]	; 0x44

				//Handling the falling edge cases
				if (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_FT_MODE) {
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	d115      	bne.n	8000c42 <GPIO_Init+0xfa>
					//Configure the FTSR
					EXTI->FTSR |= (1 << i);
 8000c16:	4b59      	ldr	r3, [pc, #356]	; (8000d7c <GPIO_Init+0x234>)
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c22:	4611      	mov	r1, r2
 8000c24:	4a55      	ldr	r2, [pc, #340]	; (8000d7c <GPIO_Init+0x234>)
 8000c26:	430b      	orrs	r3, r1
 8000c28:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~(1 << i); //Clear the corresponding RTSR bit
 8000c2a:	4b54      	ldr	r3, [pc, #336]	; (8000d7c <GPIO_Init+0x234>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000c30:	2101      	movs	r1, #1
 8000c32:	fa01 f202 	lsl.w	r2, r1, r2
 8000c36:	43d2      	mvns	r2, r2
 8000c38:	4611      	mov	r1, r2
 8000c3a:	4a50      	ldr	r2, [pc, #320]	; (8000d7c <GPIO_Init+0x234>)
 8000c3c:	400b      	ands	r3, r1
 8000c3e:	6093      	str	r3, [r2, #8]
 8000c40:	e02c      	b.n	8000c9c <GPIO_Init+0x154>
				} else if (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RT_MODE) {
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2b05      	cmp	r3, #5
 8000c46:	d115      	bne.n	8000c74 <GPIO_Init+0x12c>
					//Configure the RTSR
					EXTI->RTSR |= (1 << i);
 8000c48:	4b4c      	ldr	r3, [pc, #304]	; (8000d7c <GPIO_Init+0x234>)
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000c4e:	2101      	movs	r1, #1
 8000c50:	fa01 f202 	lsl.w	r2, r1, r2
 8000c54:	4611      	mov	r1, r2
 8000c56:	4a49      	ldr	r2, [pc, #292]	; (8000d7c <GPIO_Init+0x234>)
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	6093      	str	r3, [r2, #8]
					EXTI->FTSR &= ~(1 << i); //Clear the corresponding FTSR bit
 8000c5c:	4b47      	ldr	r3, [pc, #284]	; (8000d7c <GPIO_Init+0x234>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000c62:	2101      	movs	r1, #1
 8000c64:	fa01 f202 	lsl.w	r2, r1, r2
 8000c68:	43d2      	mvns	r2, r2
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	4a43      	ldr	r2, [pc, #268]	; (8000d7c <GPIO_Init+0x234>)
 8000c6e:	400b      	ands	r3, r1
 8000c70:	60d3      	str	r3, [r2, #12]
 8000c72:	e013      	b.n	8000c9c <GPIO_Init+0x154>
				}  else {
					//Configure both the FTSR and RTSR
					EXTI->FTSR |= (1 << i);
 8000c74:	4b41      	ldr	r3, [pc, #260]	; (8000d7c <GPIO_Init+0x234>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c80:	4611      	mov	r1, r2
 8000c82:	4a3e      	ldr	r2, [pc, #248]	; (8000d7c <GPIO_Init+0x234>)
 8000c84:	430b      	orrs	r3, r1
 8000c86:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR |= (1 << i);
 8000c88:	4b3c      	ldr	r3, [pc, #240]	; (8000d7c <GPIO_Init+0x234>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000c8e:	2101      	movs	r1, #1
 8000c90:	fa01 f202 	lsl.w	r2, r1, r2
 8000c94:	4611      	mov	r1, r2
 8000c96:	4a39      	ldr	r2, [pc, #228]	; (8000d7c <GPIO_Init+0x234>)
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	6093      	str	r3, [r2, #8]
				//Configure the GPIO port selection in SYSCFG_EXTICR
				//Rule: int quotient = n >> z
				//		int remainder = n & (~(~(int) 0) << z)
				//In this case, since we always want z = 2, as we divide by 4,
				//the term ~(~(int) 0) << z) = 0x03U
				SYSCFG->EXTICR[i >> 2U] |= GPIO_PORT_INDEX(GPIOx) << ((i & 0x03U) * 4U);
 8000c9c:	4a38      	ldr	r2, [pc, #224]	; (8000d80 <GPIO_Init+0x238>)
 8000c9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ca0:	089b      	lsrs	r3, r3, #2
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000caa:	6a3b      	ldr	r3, [r7, #32]
 8000cac:	4935      	ldr	r1, [pc, #212]	; (8000d84 <GPIO_Init+0x23c>)
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d02b      	beq.n	8000d0a <GPIO_Init+0x1c2>
 8000cb2:	6a3b      	ldr	r3, [r7, #32]
 8000cb4:	4934      	ldr	r1, [pc, #208]	; (8000d88 <GPIO_Init+0x240>)
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d025      	beq.n	8000d06 <GPIO_Init+0x1be>
 8000cba:	6a3b      	ldr	r3, [r7, #32]
 8000cbc:	4933      	ldr	r1, [pc, #204]	; (8000d8c <GPIO_Init+0x244>)
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d01f      	beq.n	8000d02 <GPIO_Init+0x1ba>
 8000cc2:	6a3b      	ldr	r3, [r7, #32]
 8000cc4:	4932      	ldr	r1, [pc, #200]	; (8000d90 <GPIO_Init+0x248>)
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d019      	beq.n	8000cfe <GPIO_Init+0x1b6>
 8000cca:	6a3b      	ldr	r3, [r7, #32]
 8000ccc:	4931      	ldr	r1, [pc, #196]	; (8000d94 <GPIO_Init+0x24c>)
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d013      	beq.n	8000cfa <GPIO_Init+0x1b2>
 8000cd2:	6a3b      	ldr	r3, [r7, #32]
 8000cd4:	4930      	ldr	r1, [pc, #192]	; (8000d98 <GPIO_Init+0x250>)
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d00d      	beq.n	8000cf6 <GPIO_Init+0x1ae>
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	492f      	ldr	r1, [pc, #188]	; (8000d9c <GPIO_Init+0x254>)
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d007      	beq.n	8000cf2 <GPIO_Init+0x1aa>
 8000ce2:	6a3b      	ldr	r3, [r7, #32]
 8000ce4:	492e      	ldr	r1, [pc, #184]	; (8000da0 <GPIO_Init+0x258>)
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d101      	bne.n	8000cee <GPIO_Init+0x1a6>
 8000cea:	2307      	movs	r3, #7
 8000cec:	e00e      	b.n	8000d0c <GPIO_Init+0x1c4>
 8000cee:	2308      	movs	r3, #8
 8000cf0:	e00c      	b.n	8000d0c <GPIO_Init+0x1c4>
 8000cf2:	2306      	movs	r3, #6
 8000cf4:	e00a      	b.n	8000d0c <GPIO_Init+0x1c4>
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	e008      	b.n	8000d0c <GPIO_Init+0x1c4>
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	e006      	b.n	8000d0c <GPIO_Init+0x1c4>
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e004      	b.n	8000d0c <GPIO_Init+0x1c4>
 8000d02:	2302      	movs	r3, #2
 8000d04:	e002      	b.n	8000d0c <GPIO_Init+0x1c4>
 8000d06:	2301      	movs	r3, #1
 8000d08:	e000      	b.n	8000d0c <GPIO_Init+0x1c4>
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8000d0e:	f001 0103 	and.w	r1, r1, #3
 8000d12:	0089      	lsls	r1, r1, #2
 8000d14:	408b      	lsls	r3, r1
 8000d16:	481a      	ldr	r0, [pc, #104]	; (8000d80 <GPIO_Init+0x238>)
 8000d18:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8000d1a:	0889      	lsrs	r1, r1, #2
 8000d1c:	b289      	uxth	r1, r1
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	1c8b      	adds	r3, r1, #2
 8000d22:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

				//Enable the EXTI interrupt delivery using IMR
				EXTI->IMR |= (1 << i);
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <GPIO_Init+0x234>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d32:	4611      	mov	r1, r2
 8000d34:	4a11      	ldr	r2, [pc, #68]	; (8000d7c <GPIO_Init+0x234>)
 8000d36:	430b      	orrs	r3, r1
 8000d38:	6013      	str	r3, [r2, #0]
			}

			//Handle the MODER register
			GPIOx->MODER |= (GPIOx_PinConf.GPIO_PinMode << i * 2U);
 8000d3a:	6a3b      	ldr	r3, [r7, #32]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	68f9      	ldr	r1, [r7, #12]
 8000d40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	fa01 f303 	lsl.w	r3, r1, r3
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	6a3b      	ldr	r3, [r7, #32]
 8000d4c:	601a      	str	r2, [r3, #0]

			//Handle the PuPdCtrl Register
			GPIOx->PUPDR |= (GPIOx_PinConf.GPIO_PinPuPdCtrl << i * 2U);
 8000d4e:	6a3b      	ldr	r3, [r7, #32]
 8000d50:	68da      	ldr	r2, [r3, #12]
 8000d52:	6979      	ldr	r1, [r7, #20]
 8000d54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	6a3b      	ldr	r3, [r7, #32]
 8000d60:	60da      	str	r2, [r3, #12]
	for (uint16_t i = 0U; i < GPIO_PIN_NUMBER; i++) {
 8000d62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d64:	3301      	adds	r3, #1
 8000d66:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000d68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d6a:	2b0f      	cmp	r3, #15
 8000d6c:	f67f af04 	bls.w	8000b78 <GPIO_Init+0x30>
		}
	}
}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	; 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bdb0      	pop	{r4, r5, r7, pc}
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40013c00 	.word	0x40013c00
 8000d80:	40013800 	.word	0x40013800
 8000d84:	40020000 	.word	0x40020000
 8000d88:	40020400 	.word	0x40020400
 8000d8c:	40020800 	.word	0x40020800
 8000d90:	40020c00 	.word	0x40020c00
 8000d94:	40020100 	.word	0x40020100
 8000d98:	40021400 	.word	0x40021400
 8000d9c:	40021800 	.word	0x40021800
 8000da0:	40021c00 	.word	0x40021c00

08000da4 <GPIO_ReadFromInputPin>:
 * @param[in]			- The pin number
 *
 * @return				- unsigned 8 bit integer
 * @note				- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_Reg_t* pGPIOx, uint16_t pinNumber) {
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	807b      	strh	r3, [r7, #2]
	//value = (uint8_t) ((pGPIOx->IDR & (1 << pinNumber)) >> pinNumber);
	/*or value = (uint8_t) ((pGPIOx->IDR >> pinNumber) & 0x1);*/
	return ((pGPIOx->IDR & pinNumber) == pinNumber) ? 1 : 0;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	691a      	ldr	r2, [r3, #16]
 8000db4:	887b      	ldrh	r3, [r7, #2]
 8000db6:	401a      	ands	r2, r3
 8000db8:	887b      	ldrh	r3, [r7, #2]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	bf0c      	ite	eq
 8000dbe:	2301      	moveq	r3, #1
 8000dc0:	2300      	movne	r3, #0
 8000dc2:	b2db      	uxtb	r3, r3
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <__libc_init_array>:
 8000dd0:	b570      	push	{r4, r5, r6, lr}
 8000dd2:	4e0d      	ldr	r6, [pc, #52]	; (8000e08 <__libc_init_array+0x38>)
 8000dd4:	4c0d      	ldr	r4, [pc, #52]	; (8000e0c <__libc_init_array+0x3c>)
 8000dd6:	1ba4      	subs	r4, r4, r6
 8000dd8:	10a4      	asrs	r4, r4, #2
 8000dda:	2500      	movs	r5, #0
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	d109      	bne.n	8000df4 <__libc_init_array+0x24>
 8000de0:	4e0b      	ldr	r6, [pc, #44]	; (8000e10 <__libc_init_array+0x40>)
 8000de2:	4c0c      	ldr	r4, [pc, #48]	; (8000e14 <__libc_init_array+0x44>)
 8000de4:	f000 f820 	bl	8000e28 <_init>
 8000de8:	1ba4      	subs	r4, r4, r6
 8000dea:	10a4      	asrs	r4, r4, #2
 8000dec:	2500      	movs	r5, #0
 8000dee:	42a5      	cmp	r5, r4
 8000df0:	d105      	bne.n	8000dfe <__libc_init_array+0x2e>
 8000df2:	bd70      	pop	{r4, r5, r6, pc}
 8000df4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000df8:	4798      	blx	r3
 8000dfa:	3501      	adds	r5, #1
 8000dfc:	e7ee      	b.n	8000ddc <__libc_init_array+0xc>
 8000dfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e02:	4798      	blx	r3
 8000e04:	3501      	adds	r5, #1
 8000e06:	e7f2      	b.n	8000dee <__libc_init_array+0x1e>
 8000e08:	08000e60 	.word	0x08000e60
 8000e0c:	08000e60 	.word	0x08000e60
 8000e10:	08000e60 	.word	0x08000e60
 8000e14:	08000e64 	.word	0x08000e64

08000e18 <memset>:
 8000e18:	4402      	add	r2, r0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d100      	bne.n	8000e22 <memset+0xa>
 8000e20:	4770      	bx	lr
 8000e22:	f803 1b01 	strb.w	r1, [r3], #1
 8000e26:	e7f9      	b.n	8000e1c <memset+0x4>

08000e28 <_init>:
 8000e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e2a:	bf00      	nop
 8000e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e2e:	bc08      	pop	{r3}
 8000e30:	469e      	mov	lr, r3
 8000e32:	4770      	bx	lr

08000e34 <_fini>:
 8000e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e36:	bf00      	nop
 8000e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e3a:	bc08      	pop	{r3}
 8000e3c:	469e      	mov	lr, r3
 8000e3e:	4770      	bx	lr
