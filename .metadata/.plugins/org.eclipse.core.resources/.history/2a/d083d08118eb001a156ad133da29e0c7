/*

 * 010SPIMasterArduinoSlaveOnBoardButton.c
 *
 *  Created on: Aug 30, 2020
 *      Author: Donavan Tran
 *      Description: SPI Master (STM) and SPI Slave (Arduino) communication
 *      		  	 When the button on the master is pressed, master should send string
 *      		  	 of data to the Arduino slave connected. The data received by
 *      		  	 the Arduino will be displayed on the Arduino serial port
 *      		  	 1. Use full SPI full duplex mode
 *      		  	 2. ST board will be in SPI master mode and Arduino will be
 *      		  	    configured for SPI Slave mode
 *      		  	 3. Use DFF = 0;
 *      			 4. Use hardware slave management (SSM = 0)
 *      			 5. SCLK speed = 2MHz, fclk = 16MHz
 *
 *      			 Note: In this exercise, master is not going to receive anything from the slave.
 *      			       Thus, the master's MISO can be disabled
 *
 *      			  	   Slave does not know how many bytes of data master is going to send.
 *      			  	   So master first sends the number bytes info which slaves is going to
 *      			  	   receive next.


#include "../drivers/Inc/stm32f407xx.h"

void ButtonEnable(GPIO_Handle_t* GPIO_Button);
void SPI_GPIOInit(GPIO_Handle_t* SPI_GPIO);
void SPI_MasterInit(SPI_Handle_t* SPI_Master);
void delay();

int main(void) {

	//Define dummy string to send to SPI Slave (Arduino)
	char str[] = "Hello World";
	//Define handle structure for GPIO button, GPIO for SPI, and SPI1
	GPIO_Handle_t GPIO_Button, SPI_GPIO;
	SPI_Handle_t SPI_Master;

	//Set everything to 0 by default
	memset(&GPIO_Button, 0, sizeof(GPIO_Button));
	memset(&SPI_GPIO, 0, sizeof(SPI_GPIO));
	memset(&SPI_Master, 0, sizeof(SPI_Master));

	//Initialize GPIO button
	ButtonEnable(&GPIO_Button);
	SPI_GPIOInit(&SPI_GPIO);
	SPI_MasterInit(&SPI_Master);


	while (1) {

		//When the button is pressed, SPI Master (ST) sends str data to SPI Slave (Arduino)
		if (GPIO_ReadFromInputPin(GPIO_Button.pGPIOx, GPIO_PIN_0)) {
			delay(); //wait until the debouncing is over ~200ms

			//Enable the SPI peripheral
			SPI_PeripheralEnable(SPI1, ENABLE);

			//First, send the length information
			uint8_t dataLen = strlen(str);
			SPI_SendData(SPI_Master.pSPIx, &dataLen , 1);

			//Send data to SPI Slave
			SPI_SendData(SPI_Master.pSPIx, (uint8_t*) str, strlen(str));

			//Wait until the Master is done transferring the bytes of data
			//If busy, stay there. Otherwise, disable the peripheral
			while (SPI_CheckStatusFlag(SPI_Master.pSPIx, SPI_BUSY_FLAG));

			//Disable the SPI peripheral
			SPI_PeripheralEnable(SPI1, DISABLE);
		}

	}

	return EXIT_SUCCESS;
}

void ButtonEnable(GPIO_Handle_t* GPIO_Button) {
	//Enable the Button
	//GPIO_Handle_t GPIO_Button;
	GPIO_Button->pGPIOx = GPIOA;
	GPIO_Button->GPIOx_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
	GPIO_Button->GPIOx_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PU_PD;
	GPIO_Button->GPIOx_PinConfig.GPIO_PinMode = GPIO_INPUT_MODE;
	GPIO_Button->GPIOx_PinConfig.GPIO_PinSpeed = GPIO_VERY_HIGH_SPEED;
	GPIO_Init(GPIO_Button);
}

void SPI_GPIOInit(GPIO_Handle_t* SPI_GPIO) {

	//According to the alternate function map table
	//PA4 --> SPI1_NSS
	//PA5 --> SPI1_SCK
	//PA6 --> SPI1_MISO
	//PA7 --> SPI1_MOSI
	SPI_GPIO->pGPIOx = GPIOA;
	SPI_GPIO->GPIOx_PinConfig.GPIO_PinMode = GPIO_ALT_FUNC_MODE;
	SPI_GPIO->GPIOx_PinConfig.GPIO_PinAltFuncMode = AF5;
	SPI_GPIO->GPIOx_PinConfig.GPIO_PinNumber = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_7;
	SPI_GPIO->GPIOx_PinConfig.GPIO_PinOPType = GPIO_PUSH_PULL;
	SPI_GPIO->GPIOx_PinConfig.GPIO_PinPuPdCtrl = GPIO_PU;
	SPI_GPIO->GPIOx_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
	GPIO_Init(SPI_GPIO);
}

void SPI_MasterInit(SPI_Handle_t* SPI_Master) {
	SPI_Master->pSPIx = SPI1;
	SPI_Master->SPI_Config.BusConfig = SPI_BUS_CONFIG_FULL_DUPLX;
	SPI_Master->SPI_Config.DeviceMode = SPI_DEVICE_MASTER_MODE;
	SPI_Master->SPI_Config.DFF = SPI_DFF_8_BIT;
	SPI_Master->SPI_Config.SSM = SPI_HSM;
	SPI_Master->SPI_Config.SclkSpeed = SPI_SCLK_SPEED_DIV8;
	SPI_Master->SPI_Config.CPHA = SPI_CPHA_LOW;
	SPI_Master->SPI_Config.CPOL = SPI_CPOL_LOW;
	SPI_Init(SPI_Master);
}

void delay() {
	for (uint32_t i = 0; i < 500000 / 2; i++);
}



*/

/*
 * 006spi_tx_testing.c
 *
 *  Created on: Feb 10, 2019
 *      Author: admin
 */

#include<string.h>
#include "stm32f407xx.h"

void delay(void)
{
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
}

/*
 * PB14 --> SPI2_MISO
 * PB15 --> SPI2_MOSI
 * PB13 -> SPI2_SCLK
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
	GPIO_Init(&SPIPins);

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
	GPIO_Init(&SPIPins);

	//MISO
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	//GPIO_Init(&SPIPins);


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	GPIO_Init(&SPIPins);


}

void SPI2_Inits(void)
{

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;//generates sclk of 2MHz
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin

	SPI_Init(&SPI2handle);
}

void GPIO_ButtonInit(void)
{
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;

	GPIO_Init(&GPIOBtn);

}


int main(void)
{
	char user_data[] = "An Arduino Uno board is best suited for beginners who have just started using microcontrollers, on the other hand, Arduino Mega board is for enthusiasts who require a lot of I/O pins for their projects";

	GPIO_ButtonInit();

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();

	/*
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );

		//to avoid button de-bouncing related issues 200ms of delay
		delay();

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);

		//first send length information
		uint8_t dataLen = strlen(user_data);
		SPI_SendData(SPI2,&dataLen,1);

		//to send data
		SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));

		//lets confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
	}

	return 0;

}

