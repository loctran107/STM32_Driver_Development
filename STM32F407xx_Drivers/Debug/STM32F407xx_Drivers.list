
STM32F407xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000206c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800221c  0800221c  0001221c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022d8  080022d8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080022d8  080022d8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022d8  080022d8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022d8  080022d8  000122d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022dc  080022dc  000122dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080022e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000064  08002344  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08002344  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004751  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b2e  00000000  00000000  000247e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002a0  00000000  00000000  00025318  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000248  00000000  00000000  000255b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000038f0  00000000  00000000  00025800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000026b4  00000000  00000000  000290f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000cd10  00000000  00000000  0002b7a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000384b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001110  00000000  00000000  00038530  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002204 	.word	0x08002204

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08002204 	.word	0x08002204

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:

//some data
//Note: data should be less than 32 bytes in one transaction (a.k.a less than 32 characters)
uint8_t data[30] = " Testing I2C Master Tx\n";

int main() {
 8000290:	b580      	push	{r7, lr}
 8000292:	b0a2      	sub	sp, #136	; 0x88
 8000294:	af02      	add	r7, sp, #8

	uint8_t dummy[30]; //dummy buffer
	//Define the handle structures
	GPIO_Handle_t GPIO_Button, I2C_GPIO;
	I2C_Handle_t  I2C_Handler;
	memset(&GPIO_Button, 0, sizeof(GPIO_Button));
 8000296:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800029a:	221c      	movs	r2, #28
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 f8c4 	bl	800142c <memset>
	memset(&I2C_GPIO, 0, sizeof(GPIO_Button));
 80002a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002a8:	221c      	movs	r2, #28
 80002aa:	2100      	movs	r1, #0
 80002ac:	4618      	mov	r0, r3
 80002ae:	f001 f8bd 	bl	800142c <memset>
	memset(&I2C_Handler, 0, sizeof(GPIO_Button));
 80002b2:	f107 0308 	add.w	r3, r7, #8
 80002b6:	221c      	movs	r2, #28
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 f8b6 	bl	800142c <memset>

	GPIO_ButtonInit(&GPIO_Button);
 80002c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 f859 	bl	800037c <GPIO_ButtonInit>
	GPIO_I2CInit(&I2C_GPIO);
 80002ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 f876 	bl	80003c0 <GPIO_I2CInit>
	I2C_HandlerInit(&I2C_Handler);
 80002d4:	f107 0308 	add.w	r3, r7, #8
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 f899 	bl	8000410 <I2C_HandlerInit>


	//Enable the I2C Peripheral enable
	I2C_PeripheralEnable(I2C_Handler.pI2Cx, ENABLE);
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	2101      	movs	r1, #1
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 fb5a 	bl	800099c <I2C_PeripheralEnable>


	while (1) {
		while(!GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_0));
 80002e8:	bf00      	nop
 80002ea:	2101      	movs	r1, #1
 80002ec:	4821      	ldr	r0, [pc, #132]	; (8000374 <main+0xe4>)
 80002ee:	f001 f85d 	bl	80013ac <GPIO_ReadFromInputPin>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d0f8      	beq.n	80002ea <main+0x5a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80002f8:	f000 f8ac 	bl	8000454 <delay>

		//Send the command code to slave and enable the repeated start condition
		uint8_t command = COMMAND_REQUEST;
 80002fc:	2351      	movs	r3, #81	; 0x51
 80002fe:	71fb      	strb	r3, [r7, #7]
		I2C_MasterSendData(&I2C_Handler, &command, 1, SLAVE_ADDR, I2C_SR_SET);
 8000300:	1df9      	adds	r1, r7, #7
 8000302:	f107 0008 	add.w	r0, r7, #8
 8000306:	2301      	movs	r3, #1
 8000308:	9300      	str	r3, [sp, #0]
 800030a:	2368      	movs	r3, #104	; 0x68
 800030c:	2201      	movs	r2, #1
 800030e:	f000 fb63 	bl	80009d8 <I2C_MasterSendData>

		delay();
 8000312:	f000 f89f 	bl	8000454 <delay>

		//Read the length (1 byte) of the data from slave
		uint8_t len_data;
		I2C_MasterReceiveData(&I2C_Handler, &len_data, 1, SLAVE_ADDR, I2C_SR_SET);
 8000316:	1db9      	adds	r1, r7, #6
 8000318:	f107 0008 	add.w	r0, r7, #8
 800031c:	2301      	movs	r3, #1
 800031e:	9300      	str	r3, [sp, #0]
 8000320:	2368      	movs	r3, #104	; 0x68
 8000322:	2201      	movs	r2, #1
 8000324:	f000 fbd7 	bl	8000ad6 <I2C_MasterReceiveData>

		//Master sends command code 0x52 to read complete data from slave
		//AND enable the repeated start condition
		command = COMMAND_READ_DATA;
 8000328:	2352      	movs	r3, #82	; 0x52
 800032a:	71fb      	strb	r3, [r7, #7]
		I2C_MasterSendData(&I2C_Handler, &command, 1, SLAVE_ADDR, I2C_SR_SET);
 800032c:	1df9      	adds	r1, r7, #7
 800032e:	f107 0008 	add.w	r0, r7, #8
 8000332:	2301      	movs	r3, #1
 8000334:	9300      	str	r3, [sp, #0]
 8000336:	2368      	movs	r3, #104	; 0x68
 8000338:	2201      	movs	r2, #1
 800033a:	f000 fb4d 	bl	80009d8 <I2C_MasterSendData>

		delay();
 800033e:	f000 f889 	bl	8000454 <delay>

		//Read the complete data from the slave
	//	uint8_t dummy[len_data + 1];
		I2C_MasterReceiveData(&I2C_Handler, dummy, len_data, SLAVE_ADDR, I2C_SR_RESET);
 8000342:	79bb      	ldrb	r3, [r7, #6]
 8000344:	461a      	mov	r2, r3
 8000346:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800034a:	f107 0008 	add.w	r0, r7, #8
 800034e:	2300      	movs	r3, #0
 8000350:	9300      	str	r3, [sp, #0]
 8000352:	2368      	movs	r3, #104	; 0x68
 8000354:	f000 fbbf 	bl	8000ad6 <I2C_MasterReceiveData>
		dummy[len_data] = '\0';
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800035e:	4413      	add	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	f803 2c20 	strb.w	r2, [r3, #-32]
		printf("%s", dummy); //use semi-hosting to print on the terminal instead of ITM (Instrumentation Macrocell)
 8000366:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800036a:	4619      	mov	r1, r3
 800036c:	4802      	ldr	r0, [pc, #8]	; (8000378 <main+0xe8>)
 800036e:	f001 f865 	bl	800143c <iprintf>
	while (1) {
 8000372:	e7b9      	b.n	80002e8 <main+0x58>
 8000374:	40020000 	.word	0x40020000
 8000378:	0800221c 	.word	0x0800221c

0800037c <GPIO_ButtonInit>:
	}

	return EXIT_SUCCESS;
}

void GPIO_ButtonInit(GPIO_Handle_t* GPIO_Button) {
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	GPIO_Button->pGPIOx = GPIOA;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a0d      	ldr	r2, [pc, #52]	; (80003bc <GPIO_ButtonInit+0x40>)
 8000388:	601a      	str	r2, [r3, #0]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinMode = GPIO_INPUT_MODE;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2201      	movs	r2, #1
 8000394:	605a      	str	r2, [r3, #4]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PU_PD;
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	2200      	movs	r2, #0
 800039a:	611a      	str	r2, [r3, #16]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	2202      	movs	r2, #2
 80003a0:	60da      	str	r2, [r3, #12]

	GPIO_DeInit(GPIO_Button->pGPIOx);
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 ff24 	bl	80011f4 <GPIO_DeInit>
	GPIO_Init(GPIO_Button);
 80003ac:	6878      	ldr	r0, [r7, #4]
 80003ae:	f000 fdf3 	bl	8000f98 <GPIO_Init>
}
 80003b2:	bf00      	nop
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40020000 	.word	0x40020000

080003c0 <GPIO_I2CInit>:

void GPIO_I2CInit(GPIO_Handle_t* I2C_GPIO) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	I2C_GPIO->pGPIOx = GPIOB;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a10      	ldr	r2, [pc, #64]	; (800040c <GPIO_I2CInit+0x4c>)
 80003cc:	601a      	str	r2, [r3, #0]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinMode = GPIO_ALT_FUNC_MODE;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	2202      	movs	r2, #2
 80003d2:	609a      	str	r2, [r3, #8]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinAltFuncMode = AF4;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2204      	movs	r2, #4
 80003d8:	619a      	str	r2, [r3, #24]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinNumber = GPIO_PIN_6 | GPIO_PIN_7;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	22c0      	movs	r2, #192	; 0xc0
 80003de:	605a      	str	r2, [r3, #4]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinOPType = GPIO_OPEN_DRAIN;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2201      	movs	r2, #1
 80003e4:	615a      	str	r2, [r3, #20]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinPuPdCtrl = GPIO_PU;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	2201      	movs	r2, #1
 80003ea:	611a      	str	r2, [r3, #16]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinSpeed = GPIO_MEDIUM_SPEED;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2201      	movs	r2, #1
 80003f0:	60da      	str	r2, [r3, #12]

	GPIO_DeInit(I2C_GPIO->pGPIOx);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 fefc 	bl	80011f4 <GPIO_DeInit>
	GPIO_Init(I2C_GPIO);
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f000 fdcb 	bl	8000f98 <GPIO_Init>
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40020400 	.word	0x40020400

08000410 <I2C_HandlerInit>:

void I2C_HandlerInit(I2C_Handle_t* I2C_Handler) {
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	I2C_Handler->pI2Cx = I2C1;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a0d      	ldr	r2, [pc, #52]	; (8000450 <I2C_HandlerInit+0x40>)
 800041c:	601a      	str	r2, [r3, #0]
	I2C_Handler->I2C_Config.ACKControl = I2C_ACK_EN;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2201      	movs	r2, #1
 8000422:	739a      	strb	r2, [r3, #14]
	I2C_Handler->I2C_Config.FMDutyCycle = I2C_FM_DUTY_2;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	2200      	movs	r2, #0
 8000428:	73da      	strb	r2, [r3, #15]
	I2C_Handler->I2C_Config.SCLSpeed = I2C_SCL_SPEED_SM;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2200      	movs	r2, #0
 800042e:	731a      	strb	r2, [r3, #12]
	I2C_Handler->I2C_Config.DeviceAddress = MY_ADDR;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2261      	movs	r2, #97	; 0x61
 8000434:	735a      	strb	r2, [r3, #13]

	I2C_DeInit(I2C_Handler->pI2Cx);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4618      	mov	r0, r3
 800043c:	f000 fa70 	bl	8000920 <I2C_DeInit>
	I2C_Init(I2C_Handler);
 8000440:	6878      	ldr	r0, [r7, #4]
 8000442:	f000 f99f 	bl	8000784 <I2C_Init>
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40005400 	.word	0x40005400

08000454 <delay>:

void delay() {
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
	for (uint32_t i; i < 10000000; i++);
 800045a:	e002      	b.n	8000462 <delay+0xe>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	3301      	adds	r3, #1
 8000460:	607b      	str	r3, [r7, #4]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <delay+0x24>)
 8000466:	4293      	cmp	r3, r2
 8000468:	d9f8      	bls.n	800045c <delay+0x8>
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	0098967f 	.word	0x0098967f

0800047c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]
 800048c:	e00a      	b.n	80004a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800048e:	f3af 8000 	nop.w
 8000492:	4601      	mov	r1, r0
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	1c5a      	adds	r2, r3, #1
 8000498:	60ba      	str	r2, [r7, #8]
 800049a:	b2ca      	uxtb	r2, r1
 800049c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	3301      	adds	r3, #1
 80004a2:	617b      	str	r3, [r7, #20]
 80004a4:	697a      	ldr	r2, [r7, #20]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	dbf0      	blt.n	800048e <_read+0x12>
	}

return len;
 80004ac:	687b      	ldr	r3, [r7, #4]
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3718      	adds	r7, #24
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	b086      	sub	sp, #24
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	60f8      	str	r0, [r7, #12]
 80004be:	60b9      	str	r1, [r7, #8]
 80004c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
 80004c6:	e009      	b.n	80004dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80004c8:	68bb      	ldr	r3, [r7, #8]
 80004ca:	1c5a      	adds	r2, r3, #1
 80004cc:	60ba      	str	r2, [r7, #8]
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	3301      	adds	r3, #1
 80004da:	617b      	str	r3, [r7, #20]
 80004dc:	697a      	ldr	r2, [r7, #20]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	dbf1      	blt.n	80004c8 <_write+0x12>
	}
	return len;
 80004e4:	687b      	ldr	r3, [r7, #4]
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3718      	adds	r7, #24
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <_close>:

int _close(int file)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
	return -1;
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000506:	b480      	push	{r7}
 8000508:	b083      	sub	sp, #12
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
 800050e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000516:	605a      	str	r2, [r3, #4]
	return 0;
 8000518:	2300      	movs	r3, #0
}
 800051a:	4618      	mov	r0, r3
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <_isatty>:

int _isatty(int file)
{
 8000526:	b480      	push	{r7}
 8000528:	b083      	sub	sp, #12
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
	return 1;
 800052e:	2301      	movs	r3, #1
}
 8000530:	4618      	mov	r0, r3
 8000532:	370c      	adds	r7, #12
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
	return 0;
 8000548:	2300      	movs	r3, #0
}
 800054a:	4618      	mov	r0, r3
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
	...

08000558 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <_sbrk+0x50>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d102      	bne.n	800056e <_sbrk+0x16>
		heap_end = &end;
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <_sbrk+0x50>)
 800056a:	4a10      	ldr	r2, [pc, #64]	; (80005ac <_sbrk+0x54>)
 800056c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800056e:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <_sbrk+0x50>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <_sbrk+0x50>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4413      	add	r3, r2
 800057c:	466a      	mov	r2, sp
 800057e:	4293      	cmp	r3, r2
 8000580:	d907      	bls.n	8000592 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000582:	f000 ff29 	bl	80013d8 <__errno>
 8000586:	4602      	mov	r2, r0
 8000588:	230c      	movs	r3, #12
 800058a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800058c:	f04f 33ff 	mov.w	r3, #4294967295
 8000590:	e006      	b.n	80005a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <_sbrk+0x50>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4413      	add	r3, r2
 800059a:	4a03      	ldr	r2, [pc, #12]	; (80005a8 <_sbrk+0x50>)
 800059c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800059e:	68fb      	ldr	r3, [r7, #12]
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000080 	.word	0x20000080
 80005ac:	20000090 	.word	0x20000090

080005b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005b0:	480d      	ldr	r0, [pc, #52]	; (80005e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b4:	480d      	ldr	r0, [pc, #52]	; (80005ec <LoopForever+0x6>)
  ldr r1, =_edata
 80005b6:	490e      	ldr	r1, [pc, #56]	; (80005f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b8:	4a0e      	ldr	r2, [pc, #56]	; (80005f4 <LoopForever+0xe>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005bc:	e002      	b.n	80005c4 <LoopCopyDataInit>

080005be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c2:	3304      	adds	r3, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c8:	d3f9      	bcc.n	80005be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ca:	4a0b      	ldr	r2, [pc, #44]	; (80005f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005cc:	4c0b      	ldr	r4, [pc, #44]	; (80005fc <LoopForever+0x16>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d0:	e001      	b.n	80005d6 <LoopFillZerobss>

080005d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d4:	3204      	adds	r2, #4

080005d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d8:	d3fb      	bcc.n	80005d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005da:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80005de:	f000 ff01 	bl	80013e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e2:	f7ff fe55 	bl	8000290 <main>

080005e6 <LoopForever>:

LoopForever:
    b LoopForever
 80005e6:	e7fe      	b.n	80005e6 <LoopForever>
  ldr   r0, =_estack
 80005e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80005f4:	080022e0 	.word	0x080022e0
  ldr r2, =_sbss
 80005f8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80005fc:	20000090 	.word	0x20000090

08000600 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC_IRQHandler>
	...

08000604 <I2C_PeriClkCtrl>:
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void I2C_PeriClkCtrl(I2C_Reg_t* pI2Cx, uint8_t EnOrDi) {
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 8000610:	78fb      	ldrb	r3, [r7, #3]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d01c      	beq.n	8000650 <I2C_PeriClkCtrl+0x4c>
		I2Cx_PCLK_EN(pI2Cx); //Go to I2Cx_PCLK_EN macro for more details
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4a1e      	ldr	r2, [pc, #120]	; (8000694 <I2C_PeriClkCtrl+0x90>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d106      	bne.n	800062c <I2C_PeriClkCtrl+0x28>
 800061e:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <I2C_PeriClkCtrl+0x94>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000622:	4a1d      	ldr	r2, [pc, #116]	; (8000698 <I2C_PeriClkCtrl+0x94>)
 8000624:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000628:	6413      	str	r3, [r2, #64]	; 0x40
	} else {
		I2Cx_PCLK_DI(pI2Cx); //Go to I2Cx_PCLK_DI macro for more details
	}
}
 800062a:	e02d      	b.n	8000688 <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_EN(pI2Cx); //Go to I2Cx_PCLK_EN macro for more details
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4a1b      	ldr	r2, [pc, #108]	; (800069c <I2C_PeriClkCtrl+0x98>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d106      	bne.n	8000642 <I2C_PeriClkCtrl+0x3e>
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <I2C_PeriClkCtrl+0x94>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a17      	ldr	r2, [pc, #92]	; (8000698 <I2C_PeriClkCtrl+0x94>)
 800063a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000640:	e022      	b.n	8000688 <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_EN(pI2Cx); //Go to I2Cx_PCLK_EN macro for more details
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <I2C_PeriClkCtrl+0x94>)
 8000644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000646:	4a14      	ldr	r2, [pc, #80]	; (8000698 <I2C_PeriClkCtrl+0x94>)
 8000648:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800064c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800064e:	e01b      	b.n	8000688 <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_DI(pI2Cx); //Go to I2Cx_PCLK_DI macro for more details
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4a10      	ldr	r2, [pc, #64]	; (8000694 <I2C_PeriClkCtrl+0x90>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d106      	bne.n	8000666 <I2C_PeriClkCtrl+0x62>
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <I2C_PeriClkCtrl+0x94>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <I2C_PeriClkCtrl+0x94>)
 800065e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000664:	e010      	b.n	8000688 <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_DI(pI2Cx); //Go to I2Cx_PCLK_DI macro for more details
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a0c      	ldr	r2, [pc, #48]	; (800069c <I2C_PeriClkCtrl+0x98>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d106      	bne.n	800067c <I2C_PeriClkCtrl+0x78>
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <I2C_PeriClkCtrl+0x94>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000672:	4a09      	ldr	r2, [pc, #36]	; (8000698 <I2C_PeriClkCtrl+0x94>)
 8000674:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000678:	6413      	str	r3, [r2, #64]	; 0x40
}
 800067a:	e005      	b.n	8000688 <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_DI(pI2Cx); //Go to I2Cx_PCLK_DI macro for more details
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <I2C_PeriClkCtrl+0x94>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a05      	ldr	r2, [pc, #20]	; (8000698 <I2C_PeriClkCtrl+0x94>)
 8000682:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	40005400 	.word	0x40005400
 8000698:	40023800 	.word	0x40023800
 800069c:	40005800 	.word	0x40005800

080006a0 <getPLLClkFreq>:

static uint32_t getPLLClkFreq() {
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

	//Implemented later
	return 0;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <getAPB1ClkFreq>:
 * @param[in]			-
 *
 * @return				- none
 * @note				- See the Clock Tree diagram in STM32F4xx Reference Manual for details
 */
static uint32_t getAPB1ClkFreq() {
 80006b0:	b5b0      	push	{r4, r5, r7, lr}
 80006b2:	b08a      	sub	sp, #40	; 0x28
 80006b4:	af00      	add	r7, sp, #0

	uint16_t temp, AHB1Prescalar,  APB1Prescalar;
	uint16_t AHB1PreSclr[9] = {1, 2, 4, 6, 16, 64, 128, 256, 512};
 80006b6:	4b2e      	ldr	r3, [pc, #184]	; (8000770 <getAPB1ClkFreq+0xc0>)
 80006b8:	f107 040c 	add.w	r4, r7, #12
 80006bc:	461d      	mov	r5, r3
 80006be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c2:	682b      	ldr	r3, [r5, #0]
 80006c4:	8023      	strh	r3, [r4, #0]
	uint16_t APB1PreSclr[5] = {1, 2, 4, 8, 16};
 80006c6:	4a2b      	ldr	r2, [pc, #172]	; (8000774 <getAPB1ClkFreq+0xc4>)
 80006c8:	463b      	mov	r3, r7
 80006ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80006cc:	c303      	stmia	r3!, {r0, r1}
 80006ce:	801a      	strh	r2, [r3, #0]
	uint32_t sysClk;

	//Determine what system clock the MCU is running
	switch ((RCC->CFGR >> 2U) & 0x3) {
 80006d0:	4b29      	ldr	r3, [pc, #164]	; (8000778 <getAPB1ClkFreq+0xc8>)
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	089b      	lsrs	r3, r3, #2
 80006d6:	f003 0303 	and.w	r3, r3, #3
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d004      	beq.n	80006e8 <getAPB1ClkFreq+0x38>
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d305      	bcc.n	80006ee <getAPB1ClkFreq+0x3e>
 80006e2:	2b02      	cmp	r3, #2
 80006e4:	d006      	beq.n	80006f4 <getAPB1ClkFreq+0x44>
 80006e6:	e009      	b.n	80006fc <getAPB1ClkFreq+0x4c>
	case RCC_HSE:	sysClk = HSE_CLK_FREQ; break; //8MHz
 80006e8:	4b24      	ldr	r3, [pc, #144]	; (800077c <getAPB1ClkFreq+0xcc>)
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
 80006ec:	e006      	b.n	80006fc <getAPB1ClkFreq+0x4c>
	case RCC_HSI:	sysClk = HSI_CLK_FREQ; break; //16MHz
 80006ee:	4b24      	ldr	r3, [pc, #144]	; (8000780 <getAPB1ClkFreq+0xd0>)
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
 80006f2:	e003      	b.n	80006fc <getAPB1ClkFreq+0x4c>
	case RCC_PLL:	sysClk = getPLLClkFreq(); break; //See this function implementation for details
 80006f4:	f7ff ffd4 	bl	80006a0 <getPLLClkFreq>
 80006f8:	6278      	str	r0, [r7, #36]	; 0x24
 80006fa:	bf00      	nop
	}

	//Determine the prescalar factor AHB1 is using
	temp = (RCC->CFGR >> 4U) & 0xF;
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <getAPB1ClkFreq+0xc8>)
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	091b      	lsrs	r3, r3, #4
 8000702:	b29b      	uxth	r3, r3
 8000704:	f003 030f 	and.w	r3, r3, #15
 8000708:	847b      	strh	r3, [r7, #34]	; 0x22
	AHB1Prescalar = (temp < 8U) ? AHB1PreSclr[0] : AHB1PreSclr[temp % 8 + 1];
 800070a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800070c:	2b07      	cmp	r3, #7
 800070e:	d801      	bhi.n	8000714 <getAPB1ClkFreq+0x64>
 8000710:	89bb      	ldrh	r3, [r7, #12]
 8000712:	e009      	b.n	8000728 <getAPB1ClkFreq+0x78>
 8000714:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	3301      	adds	r3, #1
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000722:	4413      	add	r3, r2
 8000724:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8000728:	843b      	strh	r3, [r7, #32]

	//Determine the prescalar factor APB1 is using
	temp = (RCC->CFGR >> 10U) & 0x7;
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <getAPB1ClkFreq+0xc8>)
 800072c:	689b      	ldr	r3, [r3, #8]
 800072e:	0a9b      	lsrs	r3, r3, #10
 8000730:	b29b      	uxth	r3, r3
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	847b      	strh	r3, [r7, #34]	; 0x22
	APB1Prescalar = (temp < 4U) ? APB1PreSclr[0] : APB1PreSclr[temp % 8 + 1];
 8000738:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800073a:	2b03      	cmp	r3, #3
 800073c:	d801      	bhi.n	8000742 <getAPB1ClkFreq+0x92>
 800073e:	883b      	ldrh	r3, [r7, #0]
 8000740:	e009      	b.n	8000756 <getAPB1ClkFreq+0xa6>
 8000742:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000744:	f003 0307 	and.w	r3, r3, #7
 8000748:	3301      	adds	r3, #1
 800074a:	005b      	lsls	r3, r3, #1
 800074c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000750:	4413      	add	r3, r2
 8000752:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8000756:	83fb      	strh	r3, [r7, #30]

	//Return the APB1 clock freq
	return (sysClk / AHB1Prescalar) / APB1Prescalar;
 8000758:	8c3b      	ldrh	r3, [r7, #32]
 800075a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800075c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000760:	8bfb      	ldrh	r3, [r7, #30]
 8000762:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000766:	4618      	mov	r0, r3
 8000768:	3728      	adds	r7, #40	; 0x28
 800076a:	46bd      	mov	sp, r7
 800076c:	bdb0      	pop	{r4, r5, r7, pc}
 800076e:	bf00      	nop
 8000770:	08002220 	.word	0x08002220
 8000774:	08002234 	.word	0x08002234
 8000778:	40023800 	.word	0x40023800
 800077c:	007a1200 	.word	0x007a1200
 8000780:	00f42400 	.word	0x00f42400

08000784 <I2C_Init>:
 * 						  and port
 *
 * @return				- none
 * @note				- none
 */
void I2C_Init(I2C_Handle_t* pI2CHandler) {
 8000784:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000788:	b088      	sub	sp, #32
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]

	uint16_t ccr_value;
	uint32_t APB1ClkFreq;
	uint64_t temp;
	temp = 0;
 800078e:	f04f 0300 	mov.w	r3, #0
 8000792:	f04f 0400 	mov.w	r4, #0
 8000796:	e9c7 3404 	strd	r3, r4, [r7, #16]

	//Enable the peripheral clock
	I2C_PeriClkCtrl(pI2CHandler->pI2Cx, ENABLE);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2101      	movs	r1, #1
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff2f 	bl	8000604 <I2C_PeriClkCtrl>
	//Clock stretching is enabled by default in slave mode. To disable it,
	//configure the I2C_CR1 register bit 7.

	//Select the peripheral clock frequency
	//The other bits are ignored and set to 0 by default
	APB1ClkFreq = getAPB1ClkFreq();
 80007a6:	f7ff ff83 	bl	80006b0 <getAPB1ClkFreq>
 80007aa:	60f8      	str	r0, [r7, #12]
	pI2CHandler->pI2Cx->CR2 |= (APB1ClkFreq / 1000000U) & 0x3F;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	6859      	ldr	r1, [r3, #4]
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	4a52      	ldr	r2, [pc, #328]	; (8000900 <I2C_Init+0x17c>)
 80007b6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ba:	0c9b      	lsrs	r3, r3, #18
 80007bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	430a      	orrs	r2, r1
 80007c6:	605a      	str	r2, [r3, #4]
	//I2C1->CR2 |= (APB1ClkFreq / 1000000U) & 0x3F;
	//You may have option to configure the addressing mode in the I2C_OAR1
	//register. However, we don't implement that as part of the configuration
	//option in I2C. If you so wish to do it, implement that yourself!!!
	pI2CHandler->pI2Cx->OAR1 |= pI2CHandler->I2C_Config.DeviceAddress & 0xFF;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	689a      	ldr	r2, [r3, #8]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	7b5b      	ldrb	r3, [r3, #13]
 80007d2:	4619      	mov	r1, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	430a      	orrs	r2, r1
 80007da:	609a      	str	r2, [r3, #8]

	//SPECIAL NOTE: Bit 14 of I2C_OAR1 register should be on kept at 1
	//by the software. Reason: I don't know, figure it out if you can.
	pI2CHandler->pI2Cx->OAR1 |= (1 << 14U);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	689a      	ldr	r2, [r3, #8]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80007ea:	609a      	str	r2, [r3, #8]

	//Configure the SCL clock frequencies depending on the mode
	//standard mode/Fast mode and duty cycle bit
	temp |= pI2CHandler->I2C_Config.SCLSpeed << I2C_CCR_F_S;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	7b1b      	ldrb	r3, [r3, #12]
 80007f0:	03db      	lsls	r3, r3, #15
 80007f2:	469b      	mov	fp, r3
 80007f4:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80007f8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80007fc:	ea4b 0301 	orr.w	r3, fp, r1
 8000800:	ea4c 0402 	orr.w	r4, ip, r2
 8000804:	e9c7 3404 	strd	r3, r4, [r7, #16]
	temp |= pI2CHandler->I2C_Config.FMDutyCycle << I2C_CCR_DUTY;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	7bdb      	ldrb	r3, [r3, #15]
 800080c:	039b      	lsls	r3, r3, #14
 800080e:	469b      	mov	fp, r3
 8000810:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8000814:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000818:	ea4b 0301 	orr.w	r3, fp, r1
 800081c:	ea4c 0402 	orr.w	r4, ip, r2
 8000820:	e9c7 3404 	strd	r3, r4, [r7, #16]

	//Given: T(High) + T(Low) = T(I2C_SCL_SPEED)
	//T_I2C_SCL_SPEED = (float) 1 / I2C_SCL_SPEED(pI2CHandler->I2C_Config.SCLSpeed);
	//T_APB1ClkFreq	= (float) 1 / APB1ClkFreq;
	if (pI2CHandler->pI2Cx->CCR & (1 << I2C_CCR_F_S)) { //Fast mode
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800082e:	2b00      	cmp	r3, #0
 8000830:	d01e      	beq.n	8000870 <I2C_Init+0xec>
		if (pI2CHandler->pI2Cx->CCR & (1 << I2C_CCR_DUTY)) { //To reach 400khz
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	69db      	ldr	r3, [r3, #28]
 8000838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083c:	2b00      	cmp	r3, #0
 800083e:	d00b      	beq.n	8000858 <I2C_Init+0xd4>
			/*	Calculation: T(High) = 9 * CCR * T(PCLK1)
			 *		   		 T(Low) = 16 * CCR * T(PCLK1)
			 *			     T(High) + T(Low) = 25 * CCR * T(PCLK1)
			 *			     CCR = (T(High) + T(Low)) / (25 * T(PCLK1))
			 */
			ccr_value = APB1ClkFreq / (25 * (I2C_SCL_SPEED(pI2CHandler->I2C_Config.SCLSpeed)));
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	7b1b      	ldrb	r3, [r3, #12]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d101      	bne.n	800084c <I2C_Init+0xc8>
 8000848:	4b2e      	ldr	r3, [pc, #184]	; (8000904 <I2C_Init+0x180>)
 800084a:	e000      	b.n	800084e <I2C_Init+0xca>
 800084c:	4b2e      	ldr	r3, [pc, #184]	; (8000908 <I2C_Init+0x184>)
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	fbb2 f3f3 	udiv	r3, r2, r3
 8000854:	83fb      	strh	r3, [r7, #30]
 8000856:	e016      	b.n	8000886 <I2C_Init+0x102>
			/*	Calculation: T(High) = 1 * CCR * T(PCLK1)
			 *		   		 T(Low) = 2 * CCR * T(PCLK1)
			 *			     T(High) + T(Low) = 3 * CCR * T(PCLK1)
			 *			     CCR = (T(High) + T(Low)) / (3 * T(PCLK1))
			 */
			ccr_value = APB1ClkFreq / (3 * (I2C_SCL_SPEED(pI2CHandler->I2C_Config.SCLSpeed)));
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	7b1b      	ldrb	r3, [r3, #12]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d101      	bne.n	8000864 <I2C_Init+0xe0>
 8000860:	4b2a      	ldr	r3, [pc, #168]	; (800090c <I2C_Init+0x188>)
 8000862:	e000      	b.n	8000866 <I2C_Init+0xe2>
 8000864:	4b2a      	ldr	r3, [pc, #168]	; (8000910 <I2C_Init+0x18c>)
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	fbb2 f3f3 	udiv	r3, r2, r3
 800086c:	83fb      	strh	r3, [r7, #30]
 800086e:	e00a      	b.n	8000886 <I2C_Init+0x102>
		/*	Calculation: T(High) = CCR * T(PCLK1)
		 *		   		 T(Low) =   CCR * T(PCLK1)
		 *			     T(High) + T(Low) = 2 * CCR * T(PCLK1)
		 *			     CCR = (T(High) + T(Low)) / (2 * T(PCLK1))
		 */
		ccr_value = APB1ClkFreq / (2 * (I2C_SCL_SPEED(pI2CHandler->I2C_Config.SCLSpeed)));
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	7b1b      	ldrb	r3, [r3, #12]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d101      	bne.n	800087c <I2C_Init+0xf8>
 8000878:	4b26      	ldr	r3, [pc, #152]	; (8000914 <I2C_Init+0x190>)
 800087a:	e000      	b.n	800087e <I2C_Init+0xfa>
 800087c:	4b26      	ldr	r3, [pc, #152]	; (8000918 <I2C_Init+0x194>)
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	fbb2 f3f3 	udiv	r3, r2, r3
 8000884:	83fb      	strh	r3, [r7, #30]
	}
	temp |= (ccr_value & 0xFFF);
 8000886:	8bfb      	ldrh	r3, [r7, #30]
 8000888:	f04f 0400 	mov.w	r4, #0
 800088c:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000890:	f04f 0200 	mov.w	r2, #0
 8000894:	ea03 0b01 	and.w	fp, r3, r1
 8000898:	ea04 0c02 	and.w	ip, r4, r2
 800089c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80008a0:	ea4b 0301 	orr.w	r3, fp, r1
 80008a4:	ea4c 0402 	orr.w	r4, ip, r2
 80008a8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	pI2CHandler->pI2Cx->CCR = temp;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	61da      	str	r2, [r3, #28]

	//Clear the TRISE reg
	pI2CHandler->pI2Cx->TRISE &= ~((int) 1);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	6a1a      	ldr	r2, [r3, #32]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f022 0201 	bic.w	r2, r2, #1
 80008c2:	621a      	str	r2, [r3, #32]

	//Configure the Rise Time (TRISE)
	temp = APB1ClkFreq * (I2C_T_RISE(pI2CHandler->I2C_Config.SCLSpeed)) / (10000000U);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	7b1b      	ldrb	r3, [r3, #12]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d101      	bne.n	80008d0 <I2C_Init+0x14c>
 80008cc:	2303      	movs	r3, #3
 80008ce:	e000      	b.n	80008d2 <I2C_Init+0x14e>
 80008d0:	230a      	movs	r3, #10
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	fb02 f303 	mul.w	r3, r2, r3
 80008d8:	4a10      	ldr	r2, [pc, #64]	; (800091c <I2C_Init+0x198>)
 80008da:	fba2 2303 	umull	r2, r3, r2, r3
 80008de:	0d9b      	lsrs	r3, r3, #22
 80008e0:	f04f 0400 	mov.w	r4, #0
 80008e4:	e9c7 3404 	strd	r3, r4, [r7, #16]
	pI2CHandler->pI2Cx->TRISE = (temp + 1) & 0x3F;
 80008e8:	693b      	ldr	r3, [r7, #16]
 80008ea:	1c5a      	adds	r2, r3, #1
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008f4:	621a      	str	r2, [r3, #32]

}
 80008f6:	bf00      	nop
 80008f8:	3720      	adds	r7, #32
 80008fa:	46bd      	mov	sp, r7
 80008fc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8000900:	431bde83 	.word	0x431bde83
 8000904:	00989680 	.word	0x00989680
 8000908:	002625a0 	.word	0x002625a0
 800090c:	00124f80 	.word	0x00124f80
 8000910:	000493e0 	.word	0x000493e0
 8000914:	000c3500 	.word	0x000c3500
 8000918:	00030d40 	.word	0x00030d40
 800091c:	6b5fca6b 	.word	0x6b5fca6b

08000920 <I2C_DeInit>:
 * @param[in]			- Base address of the specific SPI peripherals (SPI_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- The implementation so far only covers only 3 I2C ports
 */
void I2C_DeInit(I2C_Reg_t* pI2Cx) {
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	if (pI2Cx == I2C1) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a19      	ldr	r2, [pc, #100]	; (8000990 <I2C_DeInit+0x70>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d10c      	bne.n	800094a <I2C_DeInit+0x2a>
		I2C1_PCLK_RST();
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <I2C_DeInit+0x74>)
 8000932:	6a1b      	ldr	r3, [r3, #32]
 8000934:	4a17      	ldr	r2, [pc, #92]	; (8000994 <I2C_DeInit+0x74>)
 8000936:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800093a:	6213      	str	r3, [r2, #32]
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <I2C_DeInit+0x74>)
 800093e:	6a1b      	ldr	r3, [r3, #32]
 8000940:	4a14      	ldr	r2, [pc, #80]	; (8000994 <I2C_DeInit+0x74>)
 8000942:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000946:	6213      	str	r3, [r2, #32]
	} else if (pI2Cx == I2C2) {
		I2C2_PCLK_RST();
	} else {
		I2C3_PCLK_RST();
	}
}
 8000948:	e01c      	b.n	8000984 <I2C_DeInit+0x64>
	} else if (pI2Cx == I2C2) {
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a12      	ldr	r2, [pc, #72]	; (8000998 <I2C_DeInit+0x78>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d10c      	bne.n	800096c <I2C_DeInit+0x4c>
		I2C2_PCLK_RST();
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <I2C_DeInit+0x74>)
 8000954:	6a1b      	ldr	r3, [r3, #32]
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <I2C_DeInit+0x74>)
 8000958:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800095c:	6213      	str	r3, [r2, #32]
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <I2C_DeInit+0x74>)
 8000960:	6a1b      	ldr	r3, [r3, #32]
 8000962:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <I2C_DeInit+0x74>)
 8000964:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000968:	6213      	str	r3, [r2, #32]
}
 800096a:	e00b      	b.n	8000984 <I2C_DeInit+0x64>
		I2C3_PCLK_RST();
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <I2C_DeInit+0x74>)
 800096e:	6a1b      	ldr	r3, [r3, #32]
 8000970:	4a08      	ldr	r2, [pc, #32]	; (8000994 <I2C_DeInit+0x74>)
 8000972:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000976:	6213      	str	r3, [r2, #32]
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <I2C_DeInit+0x74>)
 800097a:	6a1b      	ldr	r3, [r3, #32]
 800097c:	4a05      	ldr	r2, [pc, #20]	; (8000994 <I2C_DeInit+0x74>)
 800097e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000982:	6213      	str	r3, [r2, #32]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	40005400 	.word	0x40005400
 8000994:	40023800 	.word	0x40023800
 8000998:	40005800 	.word	0x40005800

0800099c <I2C_PeripheralEnable>:
 * @param[in]			= ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void I2C_PeripheralEnable(I2C_Reg_t* pI2Cx, uint8_t EnOrDi) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 80009a8:	78fb      	ldrb	r3, [r7, #3]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d00a      	beq.n	80009c4 <I2C_PeripheralEnable+0x28>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f043 0201 	orr.w	r2, r3, #1
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	601a      	str	r2, [r3, #0]

		//Enable the Acknowledge bit
		ctrlBitACK(pI2Cx, ENABLE);
 80009ba:	2101      	movs	r1, #1
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f000 f952 	bl	8000c66 <ctrlBitACK>
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE); //clearing PE also clears ACK
	}
}
 80009c2:	e005      	b.n	80009d0 <I2C_PeripheralEnable+0x34>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE); //clearing PE also clears ACK
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f023 0201 	bic.w	r2, r3, #1
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	601a      	str	r2, [r3, #0]
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <I2C_MasterSendData>:
 * @return				- none
 * @note				- See the Transfer Sequence diagram for master transmitter on page 849
 * 						  in MCU Reference Manual for more details
 */
void I2C_MasterSendData(I2C_Handle_t* pI2CHandler, uint8_t* pTxBuffer,
		                uint32_t len, uint8_t pSlaveAddress, uint8_t repeatedStart) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
 80009e4:	70fb      	strb	r3, [r7, #3]
    // Note: Setting the START bit causes the interface to generate
    //	  	a Start condition and switch to Master Mode (MSL bit set) when
    //	  	the BUSY bit is cleared.
    //	  	This also set the SB bit by hardware (see I2C_SR1 register for details)
    //      You may also need to enable the I2C_CR1 PE register
	generateStartCondition(pI2CHandler->pI2Cx);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f988 	bl	8000d00 <generateStartCondition>

	// Poll until the SB bit in SR1 register is set
	// This is important if any of the bit is set by HARDWARE
	while (!I2C_CheckStatusFlag(&pI2CHandler->pI2Cx->SR1, I2C_FLAG_SR1_SB));
 80009f0:	bf00      	nop
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	3314      	adds	r3, #20
 80009f8:	2101      	movs	r1, #1
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f96b 	bl	8000cd6 <I2C_CheckStatusFlag>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0f5      	beq.n	80009f2 <I2C_MasterSendData+0x1a>

	// Clear the SB bit by reading SR1 register followed by
	// writing DR register with Address. If SB bit not clear,
	// SCL will be pulled low and the transmission is delay (which
	// we don't want, obviously)
	clearFlagSB(pI2CHandler->pI2Cx);
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f998 	bl	8000d40 <clearFlagSB>
	sendAddressToSlaveWrite(pI2CHandler->pI2Cx, pSlaveAddress);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	78fa      	ldrb	r2, [r7, #3]
 8000a16:	4611      	mov	r1, r2
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 f84b 	bl	8000ab4 <sendAddressToSlaveWrite>


	//Polling until the ADDR bit is set
	while (!I2C_CheckStatusFlag(&pI2CHandler->pI2Cx->SR1, I2C_FLAG_SR1_ADDR));
 8000a1e:	bf00      	nop
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	3314      	adds	r3, #20
 8000a26:	2102      	movs	r1, #2
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f954 	bl	8000cd6 <I2C_CheckStatusFlag>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d0f5      	beq.n	8000a20 <I2C_MasterSendData+0x48>

	//As soon as the slave address is sent, the ADDR bit is set by HARDWARE
	//and an interrupt is generated if the ITEVFEN bit is set (which we don't cover in
	//this case). Clear this by reading SR1 register followed by reading SR2
	clearFlagADDR(pI2CHandler->pI2Cx);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 f98e 	bl	8000d5a <clearFlagADDR>

	//Sending bytes of data to slave
	//Note: writing TxBuffer to DR register clears the BTF bit
	while (len) {
 8000a3e:	e015      	b.n	8000a6c <I2C_MasterSendData+0x94>

		//Polling until the Transmit register buffer is empty (TXE = 1)
		//Then write first data into DR
		while (!I2C_CheckStatusFlag(&pI2CHandler->pI2Cx->SR1, I2C_FLAG_SR1_TXE));
 8000a40:	bf00      	nop
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	3314      	adds	r3, #20
 8000a48:	2180      	movs	r1, #128	; 0x80
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 f943 	bl	8000cd6 <I2C_CheckStatusFlag>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d0f5      	beq.n	8000a42 <I2C_MasterSendData+0x6a>

		//Write TxBuffer into DR
		pI2CHandler->pI2Cx->DR = *pTxBuffer;
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	781a      	ldrb	r2, [r3, #0]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	611a      	str	r2, [r3, #16]
		len--;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	607b      	str	r3, [r7, #4]
		pTxBuffer++;
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
	while (len) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d1e6      	bne.n	8000a40 <I2C_MasterSendData+0x68>
	}

	//Wait for both TXE and BTF is set before closing the communication
	while (!(I2C_CheckStatusFlag(&pI2CHandler->pI2Cx->SR1, I2C_FLAG_SR1_BTF) &&
 8000a72:	bf00      	nop
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	3314      	adds	r3, #20
 8000a7a:	2104      	movs	r1, #4
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 f92a 	bl	8000cd6 <I2C_CheckStatusFlag>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d0f5      	beq.n	8000a74 <I2C_MasterSendData+0x9c>
			 I2C_CheckStatusFlag(&pI2CHandler->pI2Cx->SR1, I2C_FLAG_SR1_TXE)));
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	3314      	adds	r3, #20
 8000a8e:	2180      	movs	r1, #128	; 0x80
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f920 	bl	8000cd6 <I2C_CheckStatusFlag>
 8000a96:	4603      	mov	r3, r0
	while (!(I2C_CheckStatusFlag(&pI2CHandler->pI2Cx->SR1, I2C_FLAG_SR1_BTF) &&
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d0eb      	beq.n	8000a74 <I2C_MasterSendData+0x9c>
	//condition and continues the transaction.
	//Note: The purpose of using the repeated start condition is especially
	//		critical in multi-master transaction. Unless the right repeated start
	//		is inserted, other master can take over the transaction, thus abruptly
	//		cut off the task that the current master is about to perform.
	if (!repeatedStart) {
 8000a9c:	7e3b      	ldrb	r3, [r7, #24]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d104      	bne.n	8000aac <I2C_MasterSendData+0xd4>
		//Generate the Stop condition to terminate the communication automatically clears the BTF bit
		generateStopCondition(pI2CHandler->pI2Cx);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f93a 	bl	8000d20 <generateStopCondition>
	}
	//Memo: Cover the 10-bit addressing mode scenario later
}
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <sendAddressToSlaveWrite>:

static void sendAddressToSlaveWrite(I2C_Reg_t* pI2Cx, uint8_t pSlaveAddress) {
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	460b      	mov	r3, r1
 8000abe:	70fb      	strb	r3, [r7, #3]
	 //Write the slave address to DR register
	pI2Cx->DR = (pSlaveAddress << 1);
 8000ac0:	78fb      	ldrb	r3, [r7, #3]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	611a      	str	r2, [r3, #16]
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <I2C_MasterReceiveData>:
 * @return				- none
 * @note				- See the Transfer Sequence diagram for master recevier on page 850
 * 						  in MCU Reference Manual for more details
 */
void I2C_MasterReceiveData(I2C_Handle_t* pI2CHandler, uint8_t* pRxBuffer,
		                uint32_t len, uint8_t pSlaveAddress, uint8_t repeatedStart) {
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b084      	sub	sp, #16
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	60f8      	str	r0, [r7, #12]
 8000ade:	60b9      	str	r1, [r7, #8]
 8000ae0:	607a      	str	r2, [r7, #4]
 8000ae2:	70fb      	strb	r3, [r7, #3]

	//Generate a start condition
	generateStartCondition(pI2CHandler->pI2Cx);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 f909 	bl	8000d00 <generateStartCondition>

	// Poll until the SB bit in SR1 register is set
	// This is important if any of the bit is set by HARDWARE
	while (!I2C_CheckStatusFlag(&pI2CHandler->pI2Cx->SR1, I2C_FLAG_SR1_SB));
 8000aee:	bf00      	nop
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3314      	adds	r3, #20
 8000af6:	2101      	movs	r1, #1
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 f8ec 	bl	8000cd6 <I2C_CheckStatusFlag>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0f5      	beq.n	8000af0 <I2C_MasterReceiveData+0x1a>

	// Clear the SB bit by reading SR1 register followed by
	// writing DR register with Address. If SB bit not clear,
	// SCL will be pulled low and the transmission is delay (which
	// we don't want, obviously)
	clearFlagSB(pI2CHandler->pI2Cx);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 f919 	bl	8000d40 <clearFlagSB>
	sendAddressToSlaveRead(pI2CHandler->pI2Cx, pSlaveAddress);
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	78fa      	ldrb	r2, [r7, #3]
 8000b14:	4611      	mov	r1, r2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f82c 	bl	8000b74 <sendAddressToSlaveRead>

	//Polling until the ADDR bit is set
	while (!I2C_CheckStatusFlag(&pI2CHandler->pI2Cx->SR1, I2C_FLAG_SR1_ADDR));
 8000b1c:	bf00      	nop
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	3314      	adds	r3, #20
 8000b24:	2102      	movs	r1, #2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f8d5 	bl	8000cd6 <I2C_CheckStatusFlag>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d0f5      	beq.n	8000b1e <I2C_MasterReceiveData+0x48>

	if (len > 1) {
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d908      	bls.n	8000b4a <I2C_MasterReceiveData+0x74>
		//Handle len > 2 bytes reception
		multipleDataRecepHandler(pI2CHandler->pI2Cx, pRxBuffer, len, repeatedStart);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	6818      	ldr	r0, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	7e3b      	ldrb	r3, [r7, #24]
 8000b42:	68b9      	ldr	r1, [r7, #8]
 8000b44:	f000 f850 	bl	8000be8 <multipleDataRecepHandler>
 8000b48:	e006      	b.n	8000b58 <I2C_MasterReceiveData+0x82>
	} else {
		//Handle single data byte reception
		singleDataRecepHandler(pI2CHandler->pI2Cx, pRxBuffer, repeatedStart);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	7e3a      	ldrb	r2, [r7, #24]
 8000b50:	68b9      	ldr	r1, [r7, #8]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f821 	bl	8000b9a <singleDataRecepHandler>
	}

	//Re-enable the ACK
	if (pI2CHandler->I2C_Config.ACKControl == ENABLE) {
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	7b9b      	ldrb	r3, [r3, #14]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d105      	bne.n	8000b6c <I2C_MasterReceiveData+0x96>
		ctrlBitACK(pI2CHandler->pI2Cx, ENABLE);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2101      	movs	r1, #1
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 f87d 	bl	8000c66 <ctrlBitACK>
	}
}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <sendAddressToSlaveRead>:

static void sendAddressToSlaveRead(I2C_Reg_t* pI2Cx, uint8_t pSlaveAddress) {
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	70fb      	strb	r3, [r7, #3]

	//Write the slave address to DR register
	//with the r/w bit high at the end
	pI2Cx->DR = (pSlaveAddress << 1) | 0x1;
 8000b80:	78fb      	ldrb	r3, [r7, #3]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	461a      	mov	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	611a      	str	r2, [r3, #16]
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <singleDataRecepHandler>:
 * @param[in]			- buffer for reception (RxBuffer)
 *
 * @return				- none
 * @note				- none
 */
static void singleDataRecepHandler(I2C_Reg_t* pI2Cx, uint8_t *pRxBuffer, uint8_t repeatedStart) {
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b084      	sub	sp, #16
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	60f8      	str	r0, [r7, #12]
 8000ba2:	60b9      	str	r1, [r7, #8]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	71fb      	strb	r3, [r7, #7]

	//In the even of having 1 byte reception, the Acknowledge bit must be disabled
	//in the EV6 before clearing the ADDR flag
	ctrlBitACK(pI2Cx, DISABLE);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	68f8      	ldr	r0, [r7, #12]
 8000bac:	f000 f85b 	bl	8000c66 <ctrlBitACK>

	//clear the ADDR flag
	clearFlagADDR(pI2Cx);
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f000 f8d2 	bl	8000d5a <clearFlagADDR>

	//Wait until the RXNE is set (DR is not empty)
	while (!I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_RXNE));
 8000bb6:	bf00      	nop
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	3314      	adds	r3, #20
 8000bbc:	2140      	movs	r1, #64	; 0x40
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 f889 	bl	8000cd6 <I2C_CheckStatusFlag>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0f6      	beq.n	8000bb8 <singleDataRecepHandler+0x1e>

	if (!repeatedStart) {
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d102      	bne.n	8000bd6 <singleDataRecepHandler+0x3c>
		//generate stop condition
		generateStopCondition(pI2Cx);
 8000bd0:	68f8      	ldr	r0, [r7, #12]
 8000bd2:	f000 f8a5 	bl	8000d20 <generateStopCondition>
	}

	//Finally read the 1 byte data into the buffer
	*pRxBuffer =  pI2Cx->DR;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	691b      	ldr	r3, [r3, #16]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	701a      	strb	r2, [r3, #0]
}
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <multipleDataRecepHandler>:
 * @param[in]			- length of the buffer (len)
 *
 * @return				- none
 * @note				- none
 */
static void multipleDataRecepHandler(I2C_Reg_t* pI2Cx, uint8_t *pRxBuffer, uint8_t len, uint8_t repeatedStart) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	71fb      	strb	r3, [r7, #7]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	71bb      	strb	r3, [r7, #6]

	//Set the POS bit if len is 2
	if (len == 2) {
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d103      	bne.n	8000c0c <multipleDataRecepHandler+0x24>
		ctrlBitPOS(pI2Cx, ENABLE);
 8000c04:	2101      	movs	r1, #1
 8000c06:	68f8      	ldr	r0, [r7, #12]
 8000c08:	f000 f849 	bl	8000c9e <ctrlBitPOS>
	}

	//As soon as the slave address is sent, the ADDR bit is set by HARDWARE
	//and an interrupt is generated if the ITEVFEN bit is set (which we don't cover in
	//this case). Clear this by reading SR1 register followed by reading SR2
	clearFlagADDR(pI2Cx);
 8000c0c:	68f8      	ldr	r0, [r7, #12]
 8000c0e:	f000 f8a4 	bl	8000d5a <clearFlagADDR>

	while (len) {
 8000c12:	e021      	b.n	8000c58 <multipleDataRecepHandler+0x70>

		//Polling until the Transmit register buffer is empty (RXNE = 1)
		while (!I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_RXNE));
 8000c14:	bf00      	nop
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	3314      	adds	r3, #20
 8000c1a:	2140      	movs	r1, #64	; 0x40
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 f85a 	bl	8000cd6 <I2C_CheckStatusFlag>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d0f6      	beq.n	8000c16 <multipleDataRecepHandler+0x2e>

		//Closing the master reception at the second last byte
		//by sending the NACK to the slave
		if (len == 2) {
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d109      	bne.n	8000c42 <multipleDataRecepHandler+0x5a>
			ctrlBitACK(pI2Cx, DISABLE);
 8000c2e:	2100      	movs	r1, #0
 8000c30:	68f8      	ldr	r0, [r7, #12]
 8000c32:	f000 f818 	bl	8000c66 <ctrlBitACK>

			if (!repeatedStart) {
 8000c36:	79bb      	ldrb	r3, [r7, #6]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <multipleDataRecepHandler+0x5a>
				//generate stop condition
				generateStopCondition(pI2Cx);
 8000c3c:	68f8      	ldr	r0, [r7, #12]
 8000c3e:	f000 f86f 	bl	8000d20 <generateStopCondition>
			}
		}

		//Read the DR register
		*pRxBuffer = pI2Cx->DR;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	691b      	ldr	r3, [r3, #16]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	701a      	strb	r2, [r3, #0]
		len--;
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	71fb      	strb	r3, [r7, #7]
		pRxBuffer++; //increment a byte
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	3301      	adds	r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
	while (len) {
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1da      	bne.n	8000c14 <multipleDataRecepHandler+0x2c>
	}
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <ctrlBitACK>:
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
static void ctrlBitACK(I2C_Reg_t* pI2Cx, uint8_t EnOrDi) {
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
 8000c6e:	460b      	mov	r3, r1
 8000c70:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 8000c72:	78fb      	ldrb	r3, [r7, #3]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d006      	beq.n	8000c86 <ctrlBitACK+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	601a      	str	r2, [r3, #0]
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8000c84:	e005      	b.n	8000c92 <ctrlBitACK+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	601a      	str	r2, [r3, #0]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <ctrlBitPOS>:
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
static void ctrlBitPOS(I2C_Reg_t* pI2Cx, uint8_t EnOrDi) {
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 8000caa:	78fb      	ldrb	r3, [r7, #3]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d006      	beq.n	8000cbe <ctrlBitPOS+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_POS);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	601a      	str	r2, [r3, #0]
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_POS);
	}
}
 8000cbc:	e005      	b.n	8000cca <ctrlBitPOS+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_POS);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	601a      	str	r2, [r3, #0]
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <I2C_CheckStatusFlag>:
 * @param[in]			- the status flag
 *
 * @return				- none
 * @note				- none
 */
uint8_t I2C_CheckStatusFlag(__vo uint32_t* statusReg, uint16_t flag) {
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
 8000cde:	460b      	mov	r3, r1
 8000ce0:	807b      	strh	r3, [r7, #2]
	if ((*statusReg) & flag) {
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	887b      	ldrh	r3, [r7, #2]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <I2C_CheckStatusFlag+0x1c>
		return FLAG_SET;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e000      	b.n	8000cf4 <I2C_CheckStatusFlag+0x1e>
	}
	return FLAG_RESET;
 8000cf2:	2300      	movs	r3, #0
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <generateStartCondition>:
 * @param[in]			- Base address of the specific I2C peripherals (I2C_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- none
 */
static void generateStartCondition(I2C_Reg_t* pI2Cx) {
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= 1 << I2C_CR1_START;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	601a      	str	r2, [r3, #0]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <generateStopCondition>:
 * @param[in]			- Base address of the specific I2C peripherals (I2C_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- none
 */
static void generateStopCondition(I2C_Reg_t* pI2Cx) {
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= 1 << I2C_CR1_STOP;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	601a      	str	r2, [r3, #0]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <clearFlagSB>:
 * @param[in]			- Base address of the specific I2C peripherals (I2C_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- none
 */
static void clearFlagSB(I2C_Reg_t* pI2Cx) {
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	temp = pI2Cx->SR1;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	695b      	ldr	r3, [r3, #20]
 8000d4c:	60fb      	str	r3, [r7, #12]
	(void) temp; //resolve unused variable warning
}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <clearFlagADDR>:
 * @param[in]			- Base address of the specific I2C peripherals (I2C_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- none
 */
static void clearFlagADDR(I2C_Reg_t* pI2Cx) {
 8000d5a:	b480      	push	{r7}
 8000d5c:	b085      	sub	sp, #20
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	temp = pI2Cx->SR1;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	60fb      	str	r3, [r7, #12]
	temp = pI2Cx->SR2;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	60fb      	str	r3, [r7, #12]
	(void) temp; //resolve unused variable warning
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
	...

08000d7c <GPIO_PeriClkCtrl>:
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void GPIO_PeriClkCtrl(GPIO_Reg_t* pGPIOx, uint8_t EnOrDi) {
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	70fb      	strb	r3, [r7, #3]

	//Enable or disable the GPIO clock peripherals
	if (EnOrDi) {
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d074      	beq.n	8000e78 <GPIO_PeriClkCtrl+0xfc>
		//Special note: switch cannot be used for pointer, only integer
		GPIO_PCLK_EN(pGPIOx);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a76      	ldr	r2, [pc, #472]	; (8000f6c <GPIO_PeriClkCtrl+0x1f0>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d106      	bne.n	8000da4 <GPIO_PeriClkCtrl+0x28>
 8000d96:	4b76      	ldr	r3, [pc, #472]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a75      	ldr	r2, [pc, #468]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
	} else {
		GPIO_PCLK_DI(pGPIOx);
	}
}
 8000da2:	e0dd      	b.n	8000f60 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a73      	ldr	r2, [pc, #460]	; (8000f74 <GPIO_PeriClkCtrl+0x1f8>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d106      	bne.n	8000dba <GPIO_PeriClkCtrl+0x3e>
 8000dac:	4b70      	ldr	r3, [pc, #448]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	4a6f      	ldr	r2, [pc, #444]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000db2:	f043 0302 	orr.w	r3, r3, #2
 8000db6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000db8:	e0d2      	b.n	8000f60 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a6e      	ldr	r2, [pc, #440]	; (8000f78 <GPIO_PeriClkCtrl+0x1fc>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d106      	bne.n	8000dd0 <GPIO_PeriClkCtrl+0x54>
 8000dc2:	4b6b      	ldr	r3, [pc, #428]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a6a      	ldr	r2, [pc, #424]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000dce:	e0c7      	b.n	8000f60 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a6a      	ldr	r2, [pc, #424]	; (8000f7c <GPIO_PeriClkCtrl+0x200>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d106      	bne.n	8000de6 <GPIO_PeriClkCtrl+0x6a>
 8000dd8:	4b65      	ldr	r3, [pc, #404]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	4a64      	ldr	r2, [pc, #400]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000dde:	f043 0308 	orr.w	r3, r3, #8
 8000de2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000de4:	e0bc      	b.n	8000f60 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a65      	ldr	r2, [pc, #404]	; (8000f80 <GPIO_PeriClkCtrl+0x204>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d106      	bne.n	8000dfc <GPIO_PeriClkCtrl+0x80>
 8000dee:	4b60      	ldr	r3, [pc, #384]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a5f      	ldr	r2, [pc, #380]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000df4:	f043 0310 	orr.w	r3, r3, #16
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000dfa:	e0b1      	b.n	8000f60 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a61      	ldr	r2, [pc, #388]	; (8000f84 <GPIO_PeriClkCtrl+0x208>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d106      	bne.n	8000e12 <GPIO_PeriClkCtrl+0x96>
 8000e04:	4b5a      	ldr	r3, [pc, #360]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e08:	4a59      	ldr	r2, [pc, #356]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000e0a:	f043 0320 	orr.w	r3, r3, #32
 8000e0e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e10:	e0a6      	b.n	8000f60 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a5c      	ldr	r2, [pc, #368]	; (8000f88 <GPIO_PeriClkCtrl+0x20c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d106      	bne.n	8000e28 <GPIO_PeriClkCtrl+0xac>
 8000e1a:	4b55      	ldr	r3, [pc, #340]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a54      	ldr	r2, [pc, #336]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e26:	e09b      	b.n	8000f60 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a58      	ldr	r2, [pc, #352]	; (8000f8c <GPIO_PeriClkCtrl+0x210>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d106      	bne.n	8000e3e <GPIO_PeriClkCtrl+0xc2>
 8000e30:	4b4f      	ldr	r3, [pc, #316]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	4a4e      	ldr	r2, [pc, #312]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e3a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e3c:	e090      	b.n	8000f60 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a53      	ldr	r2, [pc, #332]	; (8000f90 <GPIO_PeriClkCtrl+0x214>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d106      	bne.n	8000e54 <GPIO_PeriClkCtrl+0xd8>
 8000e46:	4b4a      	ldr	r3, [pc, #296]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a49      	ldr	r2, [pc, #292]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e52:	e085      	b.n	8000f60 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a4f      	ldr	r2, [pc, #316]	; (8000f94 <GPIO_PeriClkCtrl+0x218>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d106      	bne.n	8000e6a <GPIO_PeriClkCtrl+0xee>
 8000e5c:	4b44      	ldr	r3, [pc, #272]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	4a43      	ldr	r2, [pc, #268]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e66:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e68:	e07a      	b.n	8000f60 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000e6a:	4b41      	ldr	r3, [pc, #260]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a40      	ldr	r2, [pc, #256]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000e70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e76:	e073      	b.n	8000f60 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a3c      	ldr	r2, [pc, #240]	; (8000f6c <GPIO_PeriClkCtrl+0x1f0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d106      	bne.n	8000e8e <GPIO_PeriClkCtrl+0x112>
 8000e80:	4b3b      	ldr	r3, [pc, #236]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	4a3a      	ldr	r2, [pc, #232]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000e86:	f023 0301 	bic.w	r3, r3, #1
 8000e8a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e8c:	e068      	b.n	8000f60 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a38      	ldr	r2, [pc, #224]	; (8000f74 <GPIO_PeriClkCtrl+0x1f8>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d106      	bne.n	8000ea4 <GPIO_PeriClkCtrl+0x128>
 8000e96:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a35      	ldr	r2, [pc, #212]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000e9c:	f023 0302 	bic.w	r3, r3, #2
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ea2:	e05d      	b.n	8000f60 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a34      	ldr	r2, [pc, #208]	; (8000f78 <GPIO_PeriClkCtrl+0x1fc>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d106      	bne.n	8000eba <GPIO_PeriClkCtrl+0x13e>
 8000eac:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb0:	4a2f      	ldr	r2, [pc, #188]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000eb2:	f023 0304 	bic.w	r3, r3, #4
 8000eb6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000eb8:	e052      	b.n	8000f60 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a2f      	ldr	r2, [pc, #188]	; (8000f7c <GPIO_PeriClkCtrl+0x200>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d106      	bne.n	8000ed0 <GPIO_PeriClkCtrl+0x154>
 8000ec2:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a2a      	ldr	r2, [pc, #168]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000ec8:	f023 0308 	bic.w	r3, r3, #8
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ece:	e047      	b.n	8000f60 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a2b      	ldr	r2, [pc, #172]	; (8000f80 <GPIO_PeriClkCtrl+0x204>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d106      	bne.n	8000ee6 <GPIO_PeriClkCtrl+0x16a>
 8000ed8:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	4a24      	ldr	r2, [pc, #144]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000ede:	f023 0310 	bic.w	r3, r3, #16
 8000ee2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ee4:	e03c      	b.n	8000f60 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a26      	ldr	r2, [pc, #152]	; (8000f84 <GPIO_PeriClkCtrl+0x208>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d106      	bne.n	8000efc <GPIO_PeriClkCtrl+0x180>
 8000eee:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a1f      	ldr	r2, [pc, #124]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000ef4:	f023 0320 	bic.w	r3, r3, #32
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000efa:	e031      	b.n	8000f60 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a22      	ldr	r2, [pc, #136]	; (8000f88 <GPIO_PeriClkCtrl+0x20c>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d106      	bne.n	8000f12 <GPIO_PeriClkCtrl+0x196>
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	4a19      	ldr	r2, [pc, #100]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f0e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f10:	e026      	b.n	8000f60 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a1d      	ldr	r2, [pc, #116]	; (8000f8c <GPIO_PeriClkCtrl+0x210>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d106      	bne.n	8000f28 <GPIO_PeriClkCtrl+0x1ac>
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f26:	e01b      	b.n	8000f60 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <GPIO_PeriClkCtrl+0x214>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d106      	bne.n	8000f3e <GPIO_PeriClkCtrl+0x1c2>
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f34:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000f36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f3a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f3c:	e010      	b.n	8000f60 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <GPIO_PeriClkCtrl+0x218>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d106      	bne.n	8000f54 <GPIO_PeriClkCtrl+0x1d8>
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f52:	e005      	b.n	8000f60 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <GPIO_PeriClkCtrl+0x1f4>)
 8000f5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f5e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020400 	.word	0x40020400
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	40020c00 	.word	0x40020c00
 8000f80:	40020100 	.word	0x40020100
 8000f84:	40021400 	.word	0x40021400
 8000f88:	40021800 	.word	0x40021800
 8000f8c:	40021c00 	.word	0x40021c00
 8000f90:	40022000 	.word	0x40022000
 8000f94:	40022400 	.word	0x40022400

08000f98 <GPIO_Init>:
 * @param[in]			-
 *
 * @return				- none
 * @note				- none
 */
void GPIO_Init(GPIO_Handle_t* pGPIOHandler) {
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]

	//uint32_t temp;
	GPIO_Reg_t* GPIOx = pGPIOHandler->pGPIOx;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	623b      	str	r3, [r7, #32]
	GPIO_PinConfig_t GPIOx_PinConf = pGPIOHandler->GPIOx_PinConfig;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f107 0408 	add.w	r4, r7, #8
 8000fac:	1d1d      	adds	r5, r3, #4
 8000fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fb2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fb6:	e884 0003 	stmia.w	r4, {r0, r1}

	//Enable the GPIO Clock
	GPIO_PeriClkCtrl(GPIOx, ENABLE);
 8000fba:	2101      	movs	r1, #1
 8000fbc:	6a38      	ldr	r0, [r7, #32]
 8000fbe:	f7ff fedd 	bl	8000d7c <GPIO_PeriClkCtrl>

	/*Note: before setting the bits: make sure those registers are clear */
	//Clearing the registers
	//Setting the bits register
	for (uint16_t i = 0U; i < GPIO_PIN_NUMBER; i++) {
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000fc6:	e0f7      	b.n	80011b8 <GPIO_Init+0x220>

		//Check if the ith bit is set
		if (GPIOx_PinConf.GPIO_PinNumber & (1 << i)) {
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000fcc:	2101      	movs	r1, #1
 8000fce:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f000 80ec 	beq.w	80011b2 <GPIO_Init+0x21a>

			//Handle the GPIO pin alternate function mode and GPIO output mode
			if (GPIOx_PinConf.GPIO_PinMode == GPIO_ALT_FUNC_MODE || GPIOx_PinConf.GPIO_PinMode == GPIO_OUTPUT_MODE) {
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d002      	beq.n	8000fe6 <GPIO_Init+0x4e>
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d12c      	bne.n	8001040 <GPIO_Init+0xa8>
				if (i < (GPIO_PIN_NUMBER / 2)) {
 8000fe6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fe8:	2b07      	cmp	r3, #7
 8000fea:	d80a      	bhi.n	8001002 <GPIO_Init+0x6a>
					GPIOx->AFR[0] |= (GPIOx_PinConf.GPIO_PinAltFuncMode << i * 4U);
 8000fec:	6a3b      	ldr	r3, [r7, #32]
 8000fee:	6a1a      	ldr	r2, [r3, #32]
 8000ff0:	69f9      	ldr	r1, [r7, #28]
 8000ff2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	6a3b      	ldr	r3, [r7, #32]
 8000ffe:	621a      	str	r2, [r3, #32]
 8001000:	e00b      	b.n	800101a <GPIO_Init+0x82>
				} else {
					GPIOx->AFR[1] |= (GPIOx_PinConf.GPIO_PinAltFuncMode << (i % (GPIO_PIN_NUMBER / 2)) * 4U);
 8001002:	6a3b      	ldr	r3, [r7, #32]
 8001004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001006:	69f9      	ldr	r1, [r7, #28]
 8001008:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	fa01 f303 	lsl.w	r3, r1, r3
 8001014:	431a      	orrs	r2, r3
 8001016:	6a3b      	ldr	r3, [r7, #32]
 8001018:	625a      	str	r2, [r3, #36]	; 0x24
				}

				//Configure the OTYPER register
				GPIOx->OTYPER |= (GPIOx_PinConf.GPIO_PinOPType << i);
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	69b9      	ldr	r1, [r7, #24]
 8001020:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	431a      	orrs	r2, r3
 8001028:	6a3b      	ldr	r3, [r7, #32]
 800102a:	605a      	str	r2, [r3, #4]

				//Configure the OSPEED register
				GPIOx->OSPEEDR |= (GPIOx_PinConf.GPIO_PinSpeed << i * 2U);
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	6939      	ldr	r1, [r7, #16]
 8001032:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	431a      	orrs	r2, r3
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	609a      	str	r2, [r3, #8]
			}

			//Handle the GPIO pin interrupt mode
			if ((GPIOx_PinConf.GPIO_PinMode == GPIO_IT_FT_MODE) || (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RT_MODE)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b04      	cmp	r3, #4
 8001044:	d006      	beq.n	8001054 <GPIO_Init+0xbc>
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2b05      	cmp	r3, #5
 800104a:	d003      	beq.n	8001054 <GPIO_Init+0xbc>
				|| (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RFT_MODE)) {
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2b06      	cmp	r3, #6
 8001050:	f040 809b 	bne.w	800118a <GPIO_Init+0x1f2>

				//Enable the clock for SYSCFG registers
				SYSCFG_PCLK_EN();
 8001054:	4b5c      	ldr	r3, [pc, #368]	; (80011c8 <GPIO_Init+0x230>)
 8001056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001058:	4a5b      	ldr	r2, [pc, #364]	; (80011c8 <GPIO_Init+0x230>)
 800105a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105e:	6453      	str	r3, [r2, #68]	; 0x44

				//Handling the falling edge cases
				if (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_FT_MODE) {
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b04      	cmp	r3, #4
 8001064:	d115      	bne.n	8001092 <GPIO_Init+0xfa>
					//Configure the FTSR
					EXTI->FTSR |= (1 << i);
 8001066:	4b59      	ldr	r3, [pc, #356]	; (80011cc <GPIO_Init+0x234>)
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800106c:	2101      	movs	r1, #1
 800106e:	fa01 f202 	lsl.w	r2, r1, r2
 8001072:	4611      	mov	r1, r2
 8001074:	4a55      	ldr	r2, [pc, #340]	; (80011cc <GPIO_Init+0x234>)
 8001076:	430b      	orrs	r3, r1
 8001078:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~(1 << i); //Clear the corresponding RTSR bit
 800107a:	4b54      	ldr	r3, [pc, #336]	; (80011cc <GPIO_Init+0x234>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001080:	2101      	movs	r1, #1
 8001082:	fa01 f202 	lsl.w	r2, r1, r2
 8001086:	43d2      	mvns	r2, r2
 8001088:	4611      	mov	r1, r2
 800108a:	4a50      	ldr	r2, [pc, #320]	; (80011cc <GPIO_Init+0x234>)
 800108c:	400b      	ands	r3, r1
 800108e:	6093      	str	r3, [r2, #8]
 8001090:	e02c      	b.n	80010ec <GPIO_Init+0x154>
				} else if (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RT_MODE) {
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2b05      	cmp	r3, #5
 8001096:	d115      	bne.n	80010c4 <GPIO_Init+0x12c>
					//Configure the RTSR
					EXTI->RTSR |= (1 << i);
 8001098:	4b4c      	ldr	r3, [pc, #304]	; (80011cc <GPIO_Init+0x234>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800109e:	2101      	movs	r1, #1
 80010a0:	fa01 f202 	lsl.w	r2, r1, r2
 80010a4:	4611      	mov	r1, r2
 80010a6:	4a49      	ldr	r2, [pc, #292]	; (80011cc <GPIO_Init+0x234>)
 80010a8:	430b      	orrs	r3, r1
 80010aa:	6093      	str	r3, [r2, #8]
					EXTI->FTSR &= ~(1 << i); //Clear the corresponding FTSR bit
 80010ac:	4b47      	ldr	r3, [pc, #284]	; (80011cc <GPIO_Init+0x234>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010b2:	2101      	movs	r1, #1
 80010b4:	fa01 f202 	lsl.w	r2, r1, r2
 80010b8:	43d2      	mvns	r2, r2
 80010ba:	4611      	mov	r1, r2
 80010bc:	4a43      	ldr	r2, [pc, #268]	; (80011cc <GPIO_Init+0x234>)
 80010be:	400b      	ands	r3, r1
 80010c0:	60d3      	str	r3, [r2, #12]
 80010c2:	e013      	b.n	80010ec <GPIO_Init+0x154>
				}  else {
					//Configure both the FTSR and RTSR
					EXTI->FTSR |= (1 << i);
 80010c4:	4b41      	ldr	r3, [pc, #260]	; (80011cc <GPIO_Init+0x234>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010ca:	2101      	movs	r1, #1
 80010cc:	fa01 f202 	lsl.w	r2, r1, r2
 80010d0:	4611      	mov	r1, r2
 80010d2:	4a3e      	ldr	r2, [pc, #248]	; (80011cc <GPIO_Init+0x234>)
 80010d4:	430b      	orrs	r3, r1
 80010d6:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR |= (1 << i);
 80010d8:	4b3c      	ldr	r3, [pc, #240]	; (80011cc <GPIO_Init+0x234>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010de:	2101      	movs	r1, #1
 80010e0:	fa01 f202 	lsl.w	r2, r1, r2
 80010e4:	4611      	mov	r1, r2
 80010e6:	4a39      	ldr	r2, [pc, #228]	; (80011cc <GPIO_Init+0x234>)
 80010e8:	430b      	orrs	r3, r1
 80010ea:	6093      	str	r3, [r2, #8]
				//Configure the GPIO port selection in SYSCFG_EXTICR
				//Rule: int quotient = n >> z
				//		int remainder = n & (~(~(int) 0) << z)
				//In this case, since we always want z = 2, as we divide by 4,
				//the term ~(~(int) 0) << z) = 0x03U
				SYSCFG->EXTICR[i >> 2U] |= GPIO_PORT_INDEX(GPIOx) << ((i & 0x03U) * 4U);
 80010ec:	4a38      	ldr	r2, [pc, #224]	; (80011d0 <GPIO_Init+0x238>)
 80010ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	3302      	adds	r3, #2
 80010f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010fa:	6a3b      	ldr	r3, [r7, #32]
 80010fc:	4935      	ldr	r1, [pc, #212]	; (80011d4 <GPIO_Init+0x23c>)
 80010fe:	428b      	cmp	r3, r1
 8001100:	d02b      	beq.n	800115a <GPIO_Init+0x1c2>
 8001102:	6a3b      	ldr	r3, [r7, #32]
 8001104:	4934      	ldr	r1, [pc, #208]	; (80011d8 <GPIO_Init+0x240>)
 8001106:	428b      	cmp	r3, r1
 8001108:	d025      	beq.n	8001156 <GPIO_Init+0x1be>
 800110a:	6a3b      	ldr	r3, [r7, #32]
 800110c:	4933      	ldr	r1, [pc, #204]	; (80011dc <GPIO_Init+0x244>)
 800110e:	428b      	cmp	r3, r1
 8001110:	d01f      	beq.n	8001152 <GPIO_Init+0x1ba>
 8001112:	6a3b      	ldr	r3, [r7, #32]
 8001114:	4932      	ldr	r1, [pc, #200]	; (80011e0 <GPIO_Init+0x248>)
 8001116:	428b      	cmp	r3, r1
 8001118:	d019      	beq.n	800114e <GPIO_Init+0x1b6>
 800111a:	6a3b      	ldr	r3, [r7, #32]
 800111c:	4931      	ldr	r1, [pc, #196]	; (80011e4 <GPIO_Init+0x24c>)
 800111e:	428b      	cmp	r3, r1
 8001120:	d013      	beq.n	800114a <GPIO_Init+0x1b2>
 8001122:	6a3b      	ldr	r3, [r7, #32]
 8001124:	4930      	ldr	r1, [pc, #192]	; (80011e8 <GPIO_Init+0x250>)
 8001126:	428b      	cmp	r3, r1
 8001128:	d00d      	beq.n	8001146 <GPIO_Init+0x1ae>
 800112a:	6a3b      	ldr	r3, [r7, #32]
 800112c:	492f      	ldr	r1, [pc, #188]	; (80011ec <GPIO_Init+0x254>)
 800112e:	428b      	cmp	r3, r1
 8001130:	d007      	beq.n	8001142 <GPIO_Init+0x1aa>
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	492e      	ldr	r1, [pc, #184]	; (80011f0 <GPIO_Init+0x258>)
 8001136:	428b      	cmp	r3, r1
 8001138:	d101      	bne.n	800113e <GPIO_Init+0x1a6>
 800113a:	2307      	movs	r3, #7
 800113c:	e00e      	b.n	800115c <GPIO_Init+0x1c4>
 800113e:	2308      	movs	r3, #8
 8001140:	e00c      	b.n	800115c <GPIO_Init+0x1c4>
 8001142:	2306      	movs	r3, #6
 8001144:	e00a      	b.n	800115c <GPIO_Init+0x1c4>
 8001146:	2305      	movs	r3, #5
 8001148:	e008      	b.n	800115c <GPIO_Init+0x1c4>
 800114a:	2304      	movs	r3, #4
 800114c:	e006      	b.n	800115c <GPIO_Init+0x1c4>
 800114e:	2303      	movs	r3, #3
 8001150:	e004      	b.n	800115c <GPIO_Init+0x1c4>
 8001152:	2302      	movs	r3, #2
 8001154:	e002      	b.n	800115c <GPIO_Init+0x1c4>
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <GPIO_Init+0x1c4>
 800115a:	2300      	movs	r3, #0
 800115c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800115e:	f001 0103 	and.w	r1, r1, #3
 8001162:	0089      	lsls	r1, r1, #2
 8001164:	408b      	lsls	r3, r1
 8001166:	481a      	ldr	r0, [pc, #104]	; (80011d0 <GPIO_Init+0x238>)
 8001168:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800116a:	0889      	lsrs	r1, r1, #2
 800116c:	b289      	uxth	r1, r1
 800116e:	431a      	orrs	r2, r3
 8001170:	1c8b      	adds	r3, r1, #2
 8001172:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

				//Enable the EXTI interrupt delivery using IMR
				EXTI->IMR |= (1 << i);
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <GPIO_Init+0x234>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800117c:	2101      	movs	r1, #1
 800117e:	fa01 f202 	lsl.w	r2, r1, r2
 8001182:	4611      	mov	r1, r2
 8001184:	4a11      	ldr	r2, [pc, #68]	; (80011cc <GPIO_Init+0x234>)
 8001186:	430b      	orrs	r3, r1
 8001188:	6013      	str	r3, [r2, #0]
			}

			//Handle the MODER register
			GPIOx->MODER |= (GPIOx_PinConf.GPIO_PinMode << i * 2U);
 800118a:	6a3b      	ldr	r3, [r7, #32]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	68f9      	ldr	r1, [r7, #12]
 8001190:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	fa01 f303 	lsl.w	r3, r1, r3
 8001198:	431a      	orrs	r2, r3
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	601a      	str	r2, [r3, #0]

			//Handle the PuPdCtrl Register
			GPIOx->PUPDR |= (GPIOx_PinConf.GPIO_PinPuPdCtrl << i * 2U);
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	68da      	ldr	r2, [r3, #12]
 80011a2:	6979      	ldr	r1, [r7, #20]
 80011a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ac:	431a      	orrs	r2, r3
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	60da      	str	r2, [r3, #12]
	for (uint16_t i = 0U; i < GPIO_PIN_NUMBER; i++) {
 80011b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011b4:	3301      	adds	r3, #1
 80011b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80011b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	f67f af04 	bls.w	8000fc8 <GPIO_Init+0x30>
		}
	}
}
 80011c0:	bf00      	nop
 80011c2:	3728      	adds	r7, #40	; 0x28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bdb0      	pop	{r4, r5, r7, pc}
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40013c00 	.word	0x40013c00
 80011d0:	40013800 	.word	0x40013800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40020800 	.word	0x40020800
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	40020100 	.word	0x40020100
 80011e8:	40021400 	.word	0x40021400
 80011ec:	40021800 	.word	0x40021800
 80011f0:	40021c00 	.word	0x40021c00

080011f4 <GPIO_DeInit>:
 *
 * @return				- none
 * @note				-  Consult the RCC Peripheral reset registers to reset
 * 					       all the registers of the peripherals
 */
void GPIO_DeInit(GPIO_Reg_t *pGPIOx) {
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

	//Reset all the registers of the respective GPIO peripherals
	if (pGPIOx == GPIOA) {
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a5f      	ldr	r2, [pc, #380]	; (800137c <GPIO_DeInit+0x188>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d10c      	bne.n	800121e <GPIO_DeInit+0x2a>
		GPIOA_PCLK_RST();
 8001204:	4b5e      	ldr	r3, [pc, #376]	; (8001380 <GPIO_DeInit+0x18c>)
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	4a5d      	ldr	r2, [pc, #372]	; (8001380 <GPIO_DeInit+0x18c>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6113      	str	r3, [r2, #16]
 8001210:	4b5b      	ldr	r3, [pc, #364]	; (8001380 <GPIO_DeInit+0x18c>)
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	4a5a      	ldr	r2, [pc, #360]	; (8001380 <GPIO_DeInit+0x18c>)
 8001216:	f023 0301 	bic.w	r3, r3, #1
 800121a:	6113      	str	r3, [r2, #16]
	} else if (pGPIOx == GPIOJ) {
		GPIOJ_PCLK_RST();
	} else if (pGPIOx == GPIOK) {
		GPIOK_PCLK_RST();
	}
}
 800121c:	e0a8      	b.n	8001370 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOB) {
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a58      	ldr	r2, [pc, #352]	; (8001384 <GPIO_DeInit+0x190>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d10c      	bne.n	8001240 <GPIO_DeInit+0x4c>
		GPIOB_PCLK_RST();
 8001226:	4b56      	ldr	r3, [pc, #344]	; (8001380 <GPIO_DeInit+0x18c>)
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	4a55      	ldr	r2, [pc, #340]	; (8001380 <GPIO_DeInit+0x18c>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6113      	str	r3, [r2, #16]
 8001232:	4b53      	ldr	r3, [pc, #332]	; (8001380 <GPIO_DeInit+0x18c>)
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	4a52      	ldr	r2, [pc, #328]	; (8001380 <GPIO_DeInit+0x18c>)
 8001238:	f023 0302 	bic.w	r3, r3, #2
 800123c:	6113      	str	r3, [r2, #16]
}
 800123e:	e097      	b.n	8001370 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOC) {
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a51      	ldr	r2, [pc, #324]	; (8001388 <GPIO_DeInit+0x194>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d10c      	bne.n	8001262 <GPIO_DeInit+0x6e>
		GPIOC_PCLK_RST();
 8001248:	4b4d      	ldr	r3, [pc, #308]	; (8001380 <GPIO_DeInit+0x18c>)
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	4a4c      	ldr	r2, [pc, #304]	; (8001380 <GPIO_DeInit+0x18c>)
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	6113      	str	r3, [r2, #16]
 8001254:	4b4a      	ldr	r3, [pc, #296]	; (8001380 <GPIO_DeInit+0x18c>)
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	4a49      	ldr	r2, [pc, #292]	; (8001380 <GPIO_DeInit+0x18c>)
 800125a:	f023 0304 	bic.w	r3, r3, #4
 800125e:	6113      	str	r3, [r2, #16]
}
 8001260:	e086      	b.n	8001370 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOD) {
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a49      	ldr	r2, [pc, #292]	; (800138c <GPIO_DeInit+0x198>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d10c      	bne.n	8001284 <GPIO_DeInit+0x90>
		GPIOD_PCLK_RST();
 800126a:	4b45      	ldr	r3, [pc, #276]	; (8001380 <GPIO_DeInit+0x18c>)
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	4a44      	ldr	r2, [pc, #272]	; (8001380 <GPIO_DeInit+0x18c>)
 8001270:	f043 0308 	orr.w	r3, r3, #8
 8001274:	6113      	str	r3, [r2, #16]
 8001276:	4b42      	ldr	r3, [pc, #264]	; (8001380 <GPIO_DeInit+0x18c>)
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	4a41      	ldr	r2, [pc, #260]	; (8001380 <GPIO_DeInit+0x18c>)
 800127c:	f023 0308 	bic.w	r3, r3, #8
 8001280:	6113      	str	r3, [r2, #16]
}
 8001282:	e075      	b.n	8001370 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOE) {
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a42      	ldr	r2, [pc, #264]	; (8001390 <GPIO_DeInit+0x19c>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d10c      	bne.n	80012a6 <GPIO_DeInit+0xb2>
		GPIOE_PCLK_RST();
 800128c:	4b3c      	ldr	r3, [pc, #240]	; (8001380 <GPIO_DeInit+0x18c>)
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	4a3b      	ldr	r2, [pc, #236]	; (8001380 <GPIO_DeInit+0x18c>)
 8001292:	f043 0310 	orr.w	r3, r3, #16
 8001296:	6113      	str	r3, [r2, #16]
 8001298:	4b39      	ldr	r3, [pc, #228]	; (8001380 <GPIO_DeInit+0x18c>)
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	4a38      	ldr	r2, [pc, #224]	; (8001380 <GPIO_DeInit+0x18c>)
 800129e:	f023 0310 	bic.w	r3, r3, #16
 80012a2:	6113      	str	r3, [r2, #16]
}
 80012a4:	e064      	b.n	8001370 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOF) {
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a3a      	ldr	r2, [pc, #232]	; (8001394 <GPIO_DeInit+0x1a0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d10c      	bne.n	80012c8 <GPIO_DeInit+0xd4>
		GPIOF_PCLK_RST();
 80012ae:	4b34      	ldr	r3, [pc, #208]	; (8001380 <GPIO_DeInit+0x18c>)
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	4a33      	ldr	r2, [pc, #204]	; (8001380 <GPIO_DeInit+0x18c>)
 80012b4:	f043 0320 	orr.w	r3, r3, #32
 80012b8:	6113      	str	r3, [r2, #16]
 80012ba:	4b31      	ldr	r3, [pc, #196]	; (8001380 <GPIO_DeInit+0x18c>)
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	4a30      	ldr	r2, [pc, #192]	; (8001380 <GPIO_DeInit+0x18c>)
 80012c0:	f023 0320 	bic.w	r3, r3, #32
 80012c4:	6113      	str	r3, [r2, #16]
}
 80012c6:	e053      	b.n	8001370 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOG) {
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a33      	ldr	r2, [pc, #204]	; (8001398 <GPIO_DeInit+0x1a4>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d10c      	bne.n	80012ea <GPIO_DeInit+0xf6>
		GPIOG_PCLK_RST();
 80012d0:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <GPIO_DeInit+0x18c>)
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	4a2a      	ldr	r2, [pc, #168]	; (8001380 <GPIO_DeInit+0x18c>)
 80012d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012da:	6113      	str	r3, [r2, #16]
 80012dc:	4b28      	ldr	r3, [pc, #160]	; (8001380 <GPIO_DeInit+0x18c>)
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	4a27      	ldr	r2, [pc, #156]	; (8001380 <GPIO_DeInit+0x18c>)
 80012e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012e6:	6113      	str	r3, [r2, #16]
}
 80012e8:	e042      	b.n	8001370 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOH) {
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a2b      	ldr	r2, [pc, #172]	; (800139c <GPIO_DeInit+0x1a8>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10c      	bne.n	800130c <GPIO_DeInit+0x118>
		GPIOH_PCLK_RST();
 80012f2:	4b23      	ldr	r3, [pc, #140]	; (8001380 <GPIO_DeInit+0x18c>)
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	4a22      	ldr	r2, [pc, #136]	; (8001380 <GPIO_DeInit+0x18c>)
 80012f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012fc:	6113      	str	r3, [r2, #16]
 80012fe:	4b20      	ldr	r3, [pc, #128]	; (8001380 <GPIO_DeInit+0x18c>)
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	4a1f      	ldr	r2, [pc, #124]	; (8001380 <GPIO_DeInit+0x18c>)
 8001304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001308:	6113      	str	r3, [r2, #16]
}
 800130a:	e031      	b.n	8001370 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOI) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a24      	ldr	r2, [pc, #144]	; (80013a0 <GPIO_DeInit+0x1ac>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d10c      	bne.n	800132e <GPIO_DeInit+0x13a>
		GPIOI_PCLK_RST();
 8001314:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <GPIO_DeInit+0x18c>)
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	4a19      	ldr	r2, [pc, #100]	; (8001380 <GPIO_DeInit+0x18c>)
 800131a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131e:	6113      	str	r3, [r2, #16]
 8001320:	4b17      	ldr	r3, [pc, #92]	; (8001380 <GPIO_DeInit+0x18c>)
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	4a16      	ldr	r2, [pc, #88]	; (8001380 <GPIO_DeInit+0x18c>)
 8001326:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800132a:	6113      	str	r3, [r2, #16]
}
 800132c:	e020      	b.n	8001370 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOJ) {
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a1c      	ldr	r2, [pc, #112]	; (80013a4 <GPIO_DeInit+0x1b0>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d10c      	bne.n	8001350 <GPIO_DeInit+0x15c>
		GPIOJ_PCLK_RST();
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <GPIO_DeInit+0x18c>)
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	4a11      	ldr	r2, [pc, #68]	; (8001380 <GPIO_DeInit+0x18c>)
 800133c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001340:	6113      	str	r3, [r2, #16]
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <GPIO_DeInit+0x18c>)
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <GPIO_DeInit+0x18c>)
 8001348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800134c:	6113      	str	r3, [r2, #16]
}
 800134e:	e00f      	b.n	8001370 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOK) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a15      	ldr	r2, [pc, #84]	; (80013a8 <GPIO_DeInit+0x1b4>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d10b      	bne.n	8001370 <GPIO_DeInit+0x17c>
		GPIOK_PCLK_RST();
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <GPIO_DeInit+0x18c>)
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	4a08      	ldr	r2, [pc, #32]	; (8001380 <GPIO_DeInit+0x18c>)
 800135e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001362:	6113      	str	r3, [r2, #16]
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <GPIO_DeInit+0x18c>)
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	4a05      	ldr	r2, [pc, #20]	; (8001380 <GPIO_DeInit+0x18c>)
 800136a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800136e:	6113      	str	r3, [r2, #16]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	40020000 	.word	0x40020000
 8001380:	40023800 	.word	0x40023800
 8001384:	40020400 	.word	0x40020400
 8001388:	40020800 	.word	0x40020800
 800138c:	40020c00 	.word	0x40020c00
 8001390:	40020100 	.word	0x40020100
 8001394:	40021400 	.word	0x40021400
 8001398:	40021800 	.word	0x40021800
 800139c:	40021c00 	.word	0x40021c00
 80013a0:	40022000 	.word	0x40022000
 80013a4:	40022400 	.word	0x40022400
 80013a8:	40022800 	.word	0x40022800

080013ac <GPIO_ReadFromInputPin>:
 * @param[in]			- The pin number
 *
 * @return				- unsigned 8 bit integer
 * @note				- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_Reg_t* pGPIOx, uint16_t pinNumber) {
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
	//value = (uint8_t) ((pGPIOx->IDR & (1 << pinNumber)) >> pinNumber);
	/*or value = (uint8_t) ((pGPIOx->IDR >> pinNumber) & 0x1);*/
	return ((pGPIOx->IDR & pinNumber) == pinNumber) ? 1 : 0;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	887b      	ldrh	r3, [r7, #2]
 80013be:	401a      	ands	r2, r3
 80013c0:	887b      	ldrh	r3, [r7, #2]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	bf0c      	ite	eq
 80013c6:	2301      	moveq	r3, #1
 80013c8:	2300      	movne	r3, #0
 80013ca:	b2db      	uxtb	r3, r3
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <__errno>:
 80013d8:	4b01      	ldr	r3, [pc, #4]	; (80013e0 <__errno+0x8>)
 80013da:	6818      	ldr	r0, [r3, #0]
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000000 	.word	0x20000000

080013e4 <__libc_init_array>:
 80013e4:	b570      	push	{r4, r5, r6, lr}
 80013e6:	4e0d      	ldr	r6, [pc, #52]	; (800141c <__libc_init_array+0x38>)
 80013e8:	4c0d      	ldr	r4, [pc, #52]	; (8001420 <__libc_init_array+0x3c>)
 80013ea:	1ba4      	subs	r4, r4, r6
 80013ec:	10a4      	asrs	r4, r4, #2
 80013ee:	2500      	movs	r5, #0
 80013f0:	42a5      	cmp	r5, r4
 80013f2:	d109      	bne.n	8001408 <__libc_init_array+0x24>
 80013f4:	4e0b      	ldr	r6, [pc, #44]	; (8001424 <__libc_init_array+0x40>)
 80013f6:	4c0c      	ldr	r4, [pc, #48]	; (8001428 <__libc_init_array+0x44>)
 80013f8:	f000 ff04 	bl	8002204 <_init>
 80013fc:	1ba4      	subs	r4, r4, r6
 80013fe:	10a4      	asrs	r4, r4, #2
 8001400:	2500      	movs	r5, #0
 8001402:	42a5      	cmp	r5, r4
 8001404:	d105      	bne.n	8001412 <__libc_init_array+0x2e>
 8001406:	bd70      	pop	{r4, r5, r6, pc}
 8001408:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800140c:	4798      	blx	r3
 800140e:	3501      	adds	r5, #1
 8001410:	e7ee      	b.n	80013f0 <__libc_init_array+0xc>
 8001412:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001416:	4798      	blx	r3
 8001418:	3501      	adds	r5, #1
 800141a:	e7f2      	b.n	8001402 <__libc_init_array+0x1e>
 800141c:	080022d8 	.word	0x080022d8
 8001420:	080022d8 	.word	0x080022d8
 8001424:	080022d8 	.word	0x080022d8
 8001428:	080022dc 	.word	0x080022dc

0800142c <memset>:
 800142c:	4402      	add	r2, r0
 800142e:	4603      	mov	r3, r0
 8001430:	4293      	cmp	r3, r2
 8001432:	d100      	bne.n	8001436 <memset+0xa>
 8001434:	4770      	bx	lr
 8001436:	f803 1b01 	strb.w	r1, [r3], #1
 800143a:	e7f9      	b.n	8001430 <memset+0x4>

0800143c <iprintf>:
 800143c:	b40f      	push	{r0, r1, r2, r3}
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <iprintf+0x2c>)
 8001440:	b513      	push	{r0, r1, r4, lr}
 8001442:	681c      	ldr	r4, [r3, #0]
 8001444:	b124      	cbz	r4, 8001450 <iprintf+0x14>
 8001446:	69a3      	ldr	r3, [r4, #24]
 8001448:	b913      	cbnz	r3, 8001450 <iprintf+0x14>
 800144a:	4620      	mov	r0, r4
 800144c:	f000 f84e 	bl	80014ec <__sinit>
 8001450:	ab05      	add	r3, sp, #20
 8001452:	9a04      	ldr	r2, [sp, #16]
 8001454:	68a1      	ldr	r1, [r4, #8]
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	4620      	mov	r0, r4
 800145a:	f000 f955 	bl	8001708 <_vfiprintf_r>
 800145e:	b002      	add	sp, #8
 8001460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001464:	b004      	add	sp, #16
 8001466:	4770      	bx	lr
 8001468:	20000000 	.word	0x20000000

0800146c <std>:
 800146c:	2300      	movs	r3, #0
 800146e:	b510      	push	{r4, lr}
 8001470:	4604      	mov	r4, r0
 8001472:	e9c0 3300 	strd	r3, r3, [r0]
 8001476:	6083      	str	r3, [r0, #8]
 8001478:	8181      	strh	r1, [r0, #12]
 800147a:	6643      	str	r3, [r0, #100]	; 0x64
 800147c:	81c2      	strh	r2, [r0, #14]
 800147e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001482:	6183      	str	r3, [r0, #24]
 8001484:	4619      	mov	r1, r3
 8001486:	2208      	movs	r2, #8
 8001488:	305c      	adds	r0, #92	; 0x5c
 800148a:	f7ff ffcf 	bl	800142c <memset>
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <std+0x38>)
 8001490:	6263      	str	r3, [r4, #36]	; 0x24
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <std+0x3c>)
 8001494:	62a3      	str	r3, [r4, #40]	; 0x28
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <std+0x40>)
 8001498:	62e3      	str	r3, [r4, #44]	; 0x2c
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <std+0x44>)
 800149c:	6224      	str	r4, [r4, #32]
 800149e:	6323      	str	r3, [r4, #48]	; 0x30
 80014a0:	bd10      	pop	{r4, pc}
 80014a2:	bf00      	nop
 80014a4:	08001c65 	.word	0x08001c65
 80014a8:	08001c87 	.word	0x08001c87
 80014ac:	08001cbf 	.word	0x08001cbf
 80014b0:	08001ce3 	.word	0x08001ce3

080014b4 <_cleanup_r>:
 80014b4:	4901      	ldr	r1, [pc, #4]	; (80014bc <_cleanup_r+0x8>)
 80014b6:	f000 b885 	b.w	80015c4 <_fwalk_reent>
 80014ba:	bf00      	nop
 80014bc:	08001fbd 	.word	0x08001fbd

080014c0 <__sfmoreglue>:
 80014c0:	b570      	push	{r4, r5, r6, lr}
 80014c2:	1e4a      	subs	r2, r1, #1
 80014c4:	2568      	movs	r5, #104	; 0x68
 80014c6:	4355      	muls	r5, r2
 80014c8:	460e      	mov	r6, r1
 80014ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80014ce:	f000 f897 	bl	8001600 <_malloc_r>
 80014d2:	4604      	mov	r4, r0
 80014d4:	b140      	cbz	r0, 80014e8 <__sfmoreglue+0x28>
 80014d6:	2100      	movs	r1, #0
 80014d8:	e9c0 1600 	strd	r1, r6, [r0]
 80014dc:	300c      	adds	r0, #12
 80014de:	60a0      	str	r0, [r4, #8]
 80014e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80014e4:	f7ff ffa2 	bl	800142c <memset>
 80014e8:	4620      	mov	r0, r4
 80014ea:	bd70      	pop	{r4, r5, r6, pc}

080014ec <__sinit>:
 80014ec:	6983      	ldr	r3, [r0, #24]
 80014ee:	b510      	push	{r4, lr}
 80014f0:	4604      	mov	r4, r0
 80014f2:	bb33      	cbnz	r3, 8001542 <__sinit+0x56>
 80014f4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80014f8:	6503      	str	r3, [r0, #80]	; 0x50
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <__sinit+0x58>)
 80014fc:	4a12      	ldr	r2, [pc, #72]	; (8001548 <__sinit+0x5c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6282      	str	r2, [r0, #40]	; 0x28
 8001502:	4298      	cmp	r0, r3
 8001504:	bf04      	itt	eq
 8001506:	2301      	moveq	r3, #1
 8001508:	6183      	streq	r3, [r0, #24]
 800150a:	f000 f81f 	bl	800154c <__sfp>
 800150e:	6060      	str	r0, [r4, #4]
 8001510:	4620      	mov	r0, r4
 8001512:	f000 f81b 	bl	800154c <__sfp>
 8001516:	60a0      	str	r0, [r4, #8]
 8001518:	4620      	mov	r0, r4
 800151a:	f000 f817 	bl	800154c <__sfp>
 800151e:	2200      	movs	r2, #0
 8001520:	60e0      	str	r0, [r4, #12]
 8001522:	2104      	movs	r1, #4
 8001524:	6860      	ldr	r0, [r4, #4]
 8001526:	f7ff ffa1 	bl	800146c <std>
 800152a:	2201      	movs	r2, #1
 800152c:	2109      	movs	r1, #9
 800152e:	68a0      	ldr	r0, [r4, #8]
 8001530:	f7ff ff9c 	bl	800146c <std>
 8001534:	2202      	movs	r2, #2
 8001536:	2112      	movs	r1, #18
 8001538:	68e0      	ldr	r0, [r4, #12]
 800153a:	f7ff ff97 	bl	800146c <std>
 800153e:	2301      	movs	r3, #1
 8001540:	61a3      	str	r3, [r4, #24]
 8001542:	bd10      	pop	{r4, pc}
 8001544:	08002240 	.word	0x08002240
 8001548:	080014b5 	.word	0x080014b5

0800154c <__sfp>:
 800154c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800154e:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <__sfp+0x70>)
 8001550:	681e      	ldr	r6, [r3, #0]
 8001552:	69b3      	ldr	r3, [r6, #24]
 8001554:	4607      	mov	r7, r0
 8001556:	b913      	cbnz	r3, 800155e <__sfp+0x12>
 8001558:	4630      	mov	r0, r6
 800155a:	f7ff ffc7 	bl	80014ec <__sinit>
 800155e:	3648      	adds	r6, #72	; 0x48
 8001560:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001564:	3b01      	subs	r3, #1
 8001566:	d503      	bpl.n	8001570 <__sfp+0x24>
 8001568:	6833      	ldr	r3, [r6, #0]
 800156a:	b133      	cbz	r3, 800157a <__sfp+0x2e>
 800156c:	6836      	ldr	r6, [r6, #0]
 800156e:	e7f7      	b.n	8001560 <__sfp+0x14>
 8001570:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001574:	b16d      	cbz	r5, 8001592 <__sfp+0x46>
 8001576:	3468      	adds	r4, #104	; 0x68
 8001578:	e7f4      	b.n	8001564 <__sfp+0x18>
 800157a:	2104      	movs	r1, #4
 800157c:	4638      	mov	r0, r7
 800157e:	f7ff ff9f 	bl	80014c0 <__sfmoreglue>
 8001582:	6030      	str	r0, [r6, #0]
 8001584:	2800      	cmp	r0, #0
 8001586:	d1f1      	bne.n	800156c <__sfp+0x20>
 8001588:	230c      	movs	r3, #12
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	4604      	mov	r4, r0
 800158e:	4620      	mov	r0, r4
 8001590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <__sfp+0x74>)
 8001594:	6665      	str	r5, [r4, #100]	; 0x64
 8001596:	e9c4 5500 	strd	r5, r5, [r4]
 800159a:	60a5      	str	r5, [r4, #8]
 800159c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80015a0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80015a4:	2208      	movs	r2, #8
 80015a6:	4629      	mov	r1, r5
 80015a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80015ac:	f7ff ff3e 	bl	800142c <memset>
 80015b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80015b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80015b8:	e7e9      	b.n	800158e <__sfp+0x42>
 80015ba:	bf00      	nop
 80015bc:	08002240 	.word	0x08002240
 80015c0:	ffff0001 	.word	0xffff0001

080015c4 <_fwalk_reent>:
 80015c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015c8:	4680      	mov	r8, r0
 80015ca:	4689      	mov	r9, r1
 80015cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80015d0:	2600      	movs	r6, #0
 80015d2:	b914      	cbnz	r4, 80015da <_fwalk_reent+0x16>
 80015d4:	4630      	mov	r0, r6
 80015d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015da:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80015de:	3f01      	subs	r7, #1
 80015e0:	d501      	bpl.n	80015e6 <_fwalk_reent+0x22>
 80015e2:	6824      	ldr	r4, [r4, #0]
 80015e4:	e7f5      	b.n	80015d2 <_fwalk_reent+0xe>
 80015e6:	89ab      	ldrh	r3, [r5, #12]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d907      	bls.n	80015fc <_fwalk_reent+0x38>
 80015ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80015f0:	3301      	adds	r3, #1
 80015f2:	d003      	beq.n	80015fc <_fwalk_reent+0x38>
 80015f4:	4629      	mov	r1, r5
 80015f6:	4640      	mov	r0, r8
 80015f8:	47c8      	blx	r9
 80015fa:	4306      	orrs	r6, r0
 80015fc:	3568      	adds	r5, #104	; 0x68
 80015fe:	e7ee      	b.n	80015de <_fwalk_reent+0x1a>

08001600 <_malloc_r>:
 8001600:	b570      	push	{r4, r5, r6, lr}
 8001602:	1ccd      	adds	r5, r1, #3
 8001604:	f025 0503 	bic.w	r5, r5, #3
 8001608:	3508      	adds	r5, #8
 800160a:	2d0c      	cmp	r5, #12
 800160c:	bf38      	it	cc
 800160e:	250c      	movcc	r5, #12
 8001610:	2d00      	cmp	r5, #0
 8001612:	4606      	mov	r6, r0
 8001614:	db01      	blt.n	800161a <_malloc_r+0x1a>
 8001616:	42a9      	cmp	r1, r5
 8001618:	d903      	bls.n	8001622 <_malloc_r+0x22>
 800161a:	230c      	movs	r3, #12
 800161c:	6033      	str	r3, [r6, #0]
 800161e:	2000      	movs	r0, #0
 8001620:	bd70      	pop	{r4, r5, r6, pc}
 8001622:	f000 fd6b 	bl	80020fc <__malloc_lock>
 8001626:	4a21      	ldr	r2, [pc, #132]	; (80016ac <_malloc_r+0xac>)
 8001628:	6814      	ldr	r4, [r2, #0]
 800162a:	4621      	mov	r1, r4
 800162c:	b991      	cbnz	r1, 8001654 <_malloc_r+0x54>
 800162e:	4c20      	ldr	r4, [pc, #128]	; (80016b0 <_malloc_r+0xb0>)
 8001630:	6823      	ldr	r3, [r4, #0]
 8001632:	b91b      	cbnz	r3, 800163c <_malloc_r+0x3c>
 8001634:	4630      	mov	r0, r6
 8001636:	f000 fb05 	bl	8001c44 <_sbrk_r>
 800163a:	6020      	str	r0, [r4, #0]
 800163c:	4629      	mov	r1, r5
 800163e:	4630      	mov	r0, r6
 8001640:	f000 fb00 	bl	8001c44 <_sbrk_r>
 8001644:	1c43      	adds	r3, r0, #1
 8001646:	d124      	bne.n	8001692 <_malloc_r+0x92>
 8001648:	230c      	movs	r3, #12
 800164a:	6033      	str	r3, [r6, #0]
 800164c:	4630      	mov	r0, r6
 800164e:	f000 fd56 	bl	80020fe <__malloc_unlock>
 8001652:	e7e4      	b.n	800161e <_malloc_r+0x1e>
 8001654:	680b      	ldr	r3, [r1, #0]
 8001656:	1b5b      	subs	r3, r3, r5
 8001658:	d418      	bmi.n	800168c <_malloc_r+0x8c>
 800165a:	2b0b      	cmp	r3, #11
 800165c:	d90f      	bls.n	800167e <_malloc_r+0x7e>
 800165e:	600b      	str	r3, [r1, #0]
 8001660:	50cd      	str	r5, [r1, r3]
 8001662:	18cc      	adds	r4, r1, r3
 8001664:	4630      	mov	r0, r6
 8001666:	f000 fd4a 	bl	80020fe <__malloc_unlock>
 800166a:	f104 000b 	add.w	r0, r4, #11
 800166e:	1d23      	adds	r3, r4, #4
 8001670:	f020 0007 	bic.w	r0, r0, #7
 8001674:	1ac3      	subs	r3, r0, r3
 8001676:	d0d3      	beq.n	8001620 <_malloc_r+0x20>
 8001678:	425a      	negs	r2, r3
 800167a:	50e2      	str	r2, [r4, r3]
 800167c:	e7d0      	b.n	8001620 <_malloc_r+0x20>
 800167e:	428c      	cmp	r4, r1
 8001680:	684b      	ldr	r3, [r1, #4]
 8001682:	bf16      	itet	ne
 8001684:	6063      	strne	r3, [r4, #4]
 8001686:	6013      	streq	r3, [r2, #0]
 8001688:	460c      	movne	r4, r1
 800168a:	e7eb      	b.n	8001664 <_malloc_r+0x64>
 800168c:	460c      	mov	r4, r1
 800168e:	6849      	ldr	r1, [r1, #4]
 8001690:	e7cc      	b.n	800162c <_malloc_r+0x2c>
 8001692:	1cc4      	adds	r4, r0, #3
 8001694:	f024 0403 	bic.w	r4, r4, #3
 8001698:	42a0      	cmp	r0, r4
 800169a:	d005      	beq.n	80016a8 <_malloc_r+0xa8>
 800169c:	1a21      	subs	r1, r4, r0
 800169e:	4630      	mov	r0, r6
 80016a0:	f000 fad0 	bl	8001c44 <_sbrk_r>
 80016a4:	3001      	adds	r0, #1
 80016a6:	d0cf      	beq.n	8001648 <_malloc_r+0x48>
 80016a8:	6025      	str	r5, [r4, #0]
 80016aa:	e7db      	b.n	8001664 <_malloc_r+0x64>
 80016ac:	20000084 	.word	0x20000084
 80016b0:	20000088 	.word	0x20000088

080016b4 <__sfputc_r>:
 80016b4:	6893      	ldr	r3, [r2, #8]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	b410      	push	{r4}
 80016bc:	6093      	str	r3, [r2, #8]
 80016be:	da08      	bge.n	80016d2 <__sfputc_r+0x1e>
 80016c0:	6994      	ldr	r4, [r2, #24]
 80016c2:	42a3      	cmp	r3, r4
 80016c4:	db01      	blt.n	80016ca <__sfputc_r+0x16>
 80016c6:	290a      	cmp	r1, #10
 80016c8:	d103      	bne.n	80016d2 <__sfputc_r+0x1e>
 80016ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016ce:	f000 bb0d 	b.w	8001cec <__swbuf_r>
 80016d2:	6813      	ldr	r3, [r2, #0]
 80016d4:	1c58      	adds	r0, r3, #1
 80016d6:	6010      	str	r0, [r2, #0]
 80016d8:	7019      	strb	r1, [r3, #0]
 80016da:	4608      	mov	r0, r1
 80016dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <__sfputs_r>:
 80016e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e4:	4606      	mov	r6, r0
 80016e6:	460f      	mov	r7, r1
 80016e8:	4614      	mov	r4, r2
 80016ea:	18d5      	adds	r5, r2, r3
 80016ec:	42ac      	cmp	r4, r5
 80016ee:	d101      	bne.n	80016f4 <__sfputs_r+0x12>
 80016f0:	2000      	movs	r0, #0
 80016f2:	e007      	b.n	8001704 <__sfputs_r+0x22>
 80016f4:	463a      	mov	r2, r7
 80016f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016fa:	4630      	mov	r0, r6
 80016fc:	f7ff ffda 	bl	80016b4 <__sfputc_r>
 8001700:	1c43      	adds	r3, r0, #1
 8001702:	d1f3      	bne.n	80016ec <__sfputs_r+0xa>
 8001704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001708 <_vfiprintf_r>:
 8001708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800170c:	460c      	mov	r4, r1
 800170e:	b09d      	sub	sp, #116	; 0x74
 8001710:	4617      	mov	r7, r2
 8001712:	461d      	mov	r5, r3
 8001714:	4606      	mov	r6, r0
 8001716:	b118      	cbz	r0, 8001720 <_vfiprintf_r+0x18>
 8001718:	6983      	ldr	r3, [r0, #24]
 800171a:	b90b      	cbnz	r3, 8001720 <_vfiprintf_r+0x18>
 800171c:	f7ff fee6 	bl	80014ec <__sinit>
 8001720:	4b7c      	ldr	r3, [pc, #496]	; (8001914 <_vfiprintf_r+0x20c>)
 8001722:	429c      	cmp	r4, r3
 8001724:	d158      	bne.n	80017d8 <_vfiprintf_r+0xd0>
 8001726:	6874      	ldr	r4, [r6, #4]
 8001728:	89a3      	ldrh	r3, [r4, #12]
 800172a:	0718      	lsls	r0, r3, #28
 800172c:	d55e      	bpl.n	80017ec <_vfiprintf_r+0xe4>
 800172e:	6923      	ldr	r3, [r4, #16]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d05b      	beq.n	80017ec <_vfiprintf_r+0xe4>
 8001734:	2300      	movs	r3, #0
 8001736:	9309      	str	r3, [sp, #36]	; 0x24
 8001738:	2320      	movs	r3, #32
 800173a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800173e:	2330      	movs	r3, #48	; 0x30
 8001740:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001744:	9503      	str	r5, [sp, #12]
 8001746:	f04f 0b01 	mov.w	fp, #1
 800174a:	46b8      	mov	r8, r7
 800174c:	4645      	mov	r5, r8
 800174e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001752:	b10b      	cbz	r3, 8001758 <_vfiprintf_r+0x50>
 8001754:	2b25      	cmp	r3, #37	; 0x25
 8001756:	d154      	bne.n	8001802 <_vfiprintf_r+0xfa>
 8001758:	ebb8 0a07 	subs.w	sl, r8, r7
 800175c:	d00b      	beq.n	8001776 <_vfiprintf_r+0x6e>
 800175e:	4653      	mov	r3, sl
 8001760:	463a      	mov	r2, r7
 8001762:	4621      	mov	r1, r4
 8001764:	4630      	mov	r0, r6
 8001766:	f7ff ffbc 	bl	80016e2 <__sfputs_r>
 800176a:	3001      	adds	r0, #1
 800176c:	f000 80c2 	beq.w	80018f4 <_vfiprintf_r+0x1ec>
 8001770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001772:	4453      	add	r3, sl
 8001774:	9309      	str	r3, [sp, #36]	; 0x24
 8001776:	f898 3000 	ldrb.w	r3, [r8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 80ba 	beq.w	80018f4 <_vfiprintf_r+0x1ec>
 8001780:	2300      	movs	r3, #0
 8001782:	f04f 32ff 	mov.w	r2, #4294967295
 8001786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800178a:	9304      	str	r3, [sp, #16]
 800178c:	9307      	str	r3, [sp, #28]
 800178e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001792:	931a      	str	r3, [sp, #104]	; 0x68
 8001794:	46a8      	mov	r8, r5
 8001796:	2205      	movs	r2, #5
 8001798:	f818 1b01 	ldrb.w	r1, [r8], #1
 800179c:	485e      	ldr	r0, [pc, #376]	; (8001918 <_vfiprintf_r+0x210>)
 800179e:	f7fe fd27 	bl	80001f0 <memchr>
 80017a2:	9b04      	ldr	r3, [sp, #16]
 80017a4:	bb78      	cbnz	r0, 8001806 <_vfiprintf_r+0xfe>
 80017a6:	06d9      	lsls	r1, r3, #27
 80017a8:	bf44      	itt	mi
 80017aa:	2220      	movmi	r2, #32
 80017ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80017b0:	071a      	lsls	r2, r3, #28
 80017b2:	bf44      	itt	mi
 80017b4:	222b      	movmi	r2, #43	; 0x2b
 80017b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80017ba:	782a      	ldrb	r2, [r5, #0]
 80017bc:	2a2a      	cmp	r2, #42	; 0x2a
 80017be:	d02a      	beq.n	8001816 <_vfiprintf_r+0x10e>
 80017c0:	9a07      	ldr	r2, [sp, #28]
 80017c2:	46a8      	mov	r8, r5
 80017c4:	2000      	movs	r0, #0
 80017c6:	250a      	movs	r5, #10
 80017c8:	4641      	mov	r1, r8
 80017ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017ce:	3b30      	subs	r3, #48	; 0x30
 80017d0:	2b09      	cmp	r3, #9
 80017d2:	d969      	bls.n	80018a8 <_vfiprintf_r+0x1a0>
 80017d4:	b360      	cbz	r0, 8001830 <_vfiprintf_r+0x128>
 80017d6:	e024      	b.n	8001822 <_vfiprintf_r+0x11a>
 80017d8:	4b50      	ldr	r3, [pc, #320]	; (800191c <_vfiprintf_r+0x214>)
 80017da:	429c      	cmp	r4, r3
 80017dc:	d101      	bne.n	80017e2 <_vfiprintf_r+0xda>
 80017de:	68b4      	ldr	r4, [r6, #8]
 80017e0:	e7a2      	b.n	8001728 <_vfiprintf_r+0x20>
 80017e2:	4b4f      	ldr	r3, [pc, #316]	; (8001920 <_vfiprintf_r+0x218>)
 80017e4:	429c      	cmp	r4, r3
 80017e6:	bf08      	it	eq
 80017e8:	68f4      	ldreq	r4, [r6, #12]
 80017ea:	e79d      	b.n	8001728 <_vfiprintf_r+0x20>
 80017ec:	4621      	mov	r1, r4
 80017ee:	4630      	mov	r0, r6
 80017f0:	f000 fae0 	bl	8001db4 <__swsetup_r>
 80017f4:	2800      	cmp	r0, #0
 80017f6:	d09d      	beq.n	8001734 <_vfiprintf_r+0x2c>
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	b01d      	add	sp, #116	; 0x74
 80017fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001802:	46a8      	mov	r8, r5
 8001804:	e7a2      	b.n	800174c <_vfiprintf_r+0x44>
 8001806:	4a44      	ldr	r2, [pc, #272]	; (8001918 <_vfiprintf_r+0x210>)
 8001808:	1a80      	subs	r0, r0, r2
 800180a:	fa0b f000 	lsl.w	r0, fp, r0
 800180e:	4318      	orrs	r0, r3
 8001810:	9004      	str	r0, [sp, #16]
 8001812:	4645      	mov	r5, r8
 8001814:	e7be      	b.n	8001794 <_vfiprintf_r+0x8c>
 8001816:	9a03      	ldr	r2, [sp, #12]
 8001818:	1d11      	adds	r1, r2, #4
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	9103      	str	r1, [sp, #12]
 800181e:	2a00      	cmp	r2, #0
 8001820:	db01      	blt.n	8001826 <_vfiprintf_r+0x11e>
 8001822:	9207      	str	r2, [sp, #28]
 8001824:	e004      	b.n	8001830 <_vfiprintf_r+0x128>
 8001826:	4252      	negs	r2, r2
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	9207      	str	r2, [sp, #28]
 800182e:	9304      	str	r3, [sp, #16]
 8001830:	f898 3000 	ldrb.w	r3, [r8]
 8001834:	2b2e      	cmp	r3, #46	; 0x2e
 8001836:	d10e      	bne.n	8001856 <_vfiprintf_r+0x14e>
 8001838:	f898 3001 	ldrb.w	r3, [r8, #1]
 800183c:	2b2a      	cmp	r3, #42	; 0x2a
 800183e:	d138      	bne.n	80018b2 <_vfiprintf_r+0x1aa>
 8001840:	9b03      	ldr	r3, [sp, #12]
 8001842:	1d1a      	adds	r2, r3, #4
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	9203      	str	r2, [sp, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	bfb8      	it	lt
 800184c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001850:	f108 0802 	add.w	r8, r8, #2
 8001854:	9305      	str	r3, [sp, #20]
 8001856:	4d33      	ldr	r5, [pc, #204]	; (8001924 <_vfiprintf_r+0x21c>)
 8001858:	f898 1000 	ldrb.w	r1, [r8]
 800185c:	2203      	movs	r2, #3
 800185e:	4628      	mov	r0, r5
 8001860:	f7fe fcc6 	bl	80001f0 <memchr>
 8001864:	b140      	cbz	r0, 8001878 <_vfiprintf_r+0x170>
 8001866:	2340      	movs	r3, #64	; 0x40
 8001868:	1b40      	subs	r0, r0, r5
 800186a:	fa03 f000 	lsl.w	r0, r3, r0
 800186e:	9b04      	ldr	r3, [sp, #16]
 8001870:	4303      	orrs	r3, r0
 8001872:	f108 0801 	add.w	r8, r8, #1
 8001876:	9304      	str	r3, [sp, #16]
 8001878:	f898 1000 	ldrb.w	r1, [r8]
 800187c:	482a      	ldr	r0, [pc, #168]	; (8001928 <_vfiprintf_r+0x220>)
 800187e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001882:	2206      	movs	r2, #6
 8001884:	f108 0701 	add.w	r7, r8, #1
 8001888:	f7fe fcb2 	bl	80001f0 <memchr>
 800188c:	2800      	cmp	r0, #0
 800188e:	d037      	beq.n	8001900 <_vfiprintf_r+0x1f8>
 8001890:	4b26      	ldr	r3, [pc, #152]	; (800192c <_vfiprintf_r+0x224>)
 8001892:	bb1b      	cbnz	r3, 80018dc <_vfiprintf_r+0x1d4>
 8001894:	9b03      	ldr	r3, [sp, #12]
 8001896:	3307      	adds	r3, #7
 8001898:	f023 0307 	bic.w	r3, r3, #7
 800189c:	3308      	adds	r3, #8
 800189e:	9303      	str	r3, [sp, #12]
 80018a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018a2:	444b      	add	r3, r9
 80018a4:	9309      	str	r3, [sp, #36]	; 0x24
 80018a6:	e750      	b.n	800174a <_vfiprintf_r+0x42>
 80018a8:	fb05 3202 	mla	r2, r5, r2, r3
 80018ac:	2001      	movs	r0, #1
 80018ae:	4688      	mov	r8, r1
 80018b0:	e78a      	b.n	80017c8 <_vfiprintf_r+0xc0>
 80018b2:	2300      	movs	r3, #0
 80018b4:	f108 0801 	add.w	r8, r8, #1
 80018b8:	9305      	str	r3, [sp, #20]
 80018ba:	4619      	mov	r1, r3
 80018bc:	250a      	movs	r5, #10
 80018be:	4640      	mov	r0, r8
 80018c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018c4:	3a30      	subs	r2, #48	; 0x30
 80018c6:	2a09      	cmp	r2, #9
 80018c8:	d903      	bls.n	80018d2 <_vfiprintf_r+0x1ca>
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0c3      	beq.n	8001856 <_vfiprintf_r+0x14e>
 80018ce:	9105      	str	r1, [sp, #20]
 80018d0:	e7c1      	b.n	8001856 <_vfiprintf_r+0x14e>
 80018d2:	fb05 2101 	mla	r1, r5, r1, r2
 80018d6:	2301      	movs	r3, #1
 80018d8:	4680      	mov	r8, r0
 80018da:	e7f0      	b.n	80018be <_vfiprintf_r+0x1b6>
 80018dc:	ab03      	add	r3, sp, #12
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	4622      	mov	r2, r4
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <_vfiprintf_r+0x228>)
 80018e4:	a904      	add	r1, sp, #16
 80018e6:	4630      	mov	r0, r6
 80018e8:	f3af 8000 	nop.w
 80018ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80018f0:	4681      	mov	r9, r0
 80018f2:	d1d5      	bne.n	80018a0 <_vfiprintf_r+0x198>
 80018f4:	89a3      	ldrh	r3, [r4, #12]
 80018f6:	065b      	lsls	r3, r3, #25
 80018f8:	f53f af7e 	bmi.w	80017f8 <_vfiprintf_r+0xf0>
 80018fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018fe:	e77d      	b.n	80017fc <_vfiprintf_r+0xf4>
 8001900:	ab03      	add	r3, sp, #12
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	4622      	mov	r2, r4
 8001906:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <_vfiprintf_r+0x228>)
 8001908:	a904      	add	r1, sp, #16
 800190a:	4630      	mov	r0, r6
 800190c:	f000 f888 	bl	8001a20 <_printf_i>
 8001910:	e7ec      	b.n	80018ec <_vfiprintf_r+0x1e4>
 8001912:	bf00      	nop
 8001914:	08002264 	.word	0x08002264
 8001918:	080022a4 	.word	0x080022a4
 800191c:	08002284 	.word	0x08002284
 8001920:	08002244 	.word	0x08002244
 8001924:	080022aa 	.word	0x080022aa
 8001928:	080022ae 	.word	0x080022ae
 800192c:	00000000 	.word	0x00000000
 8001930:	080016e3 	.word	0x080016e3

08001934 <_printf_common>:
 8001934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001938:	4691      	mov	r9, r2
 800193a:	461f      	mov	r7, r3
 800193c:	688a      	ldr	r2, [r1, #8]
 800193e:	690b      	ldr	r3, [r1, #16]
 8001940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001944:	4293      	cmp	r3, r2
 8001946:	bfb8      	it	lt
 8001948:	4613      	movlt	r3, r2
 800194a:	f8c9 3000 	str.w	r3, [r9]
 800194e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001952:	4606      	mov	r6, r0
 8001954:	460c      	mov	r4, r1
 8001956:	b112      	cbz	r2, 800195e <_printf_common+0x2a>
 8001958:	3301      	adds	r3, #1
 800195a:	f8c9 3000 	str.w	r3, [r9]
 800195e:	6823      	ldr	r3, [r4, #0]
 8001960:	0699      	lsls	r1, r3, #26
 8001962:	bf42      	ittt	mi
 8001964:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001968:	3302      	addmi	r3, #2
 800196a:	f8c9 3000 	strmi.w	r3, [r9]
 800196e:	6825      	ldr	r5, [r4, #0]
 8001970:	f015 0506 	ands.w	r5, r5, #6
 8001974:	d107      	bne.n	8001986 <_printf_common+0x52>
 8001976:	f104 0a19 	add.w	sl, r4, #25
 800197a:	68e3      	ldr	r3, [r4, #12]
 800197c:	f8d9 2000 	ldr.w	r2, [r9]
 8001980:	1a9b      	subs	r3, r3, r2
 8001982:	42ab      	cmp	r3, r5
 8001984:	dc28      	bgt.n	80019d8 <_printf_common+0xa4>
 8001986:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800198a:	6822      	ldr	r2, [r4, #0]
 800198c:	3300      	adds	r3, #0
 800198e:	bf18      	it	ne
 8001990:	2301      	movne	r3, #1
 8001992:	0692      	lsls	r2, r2, #26
 8001994:	d42d      	bmi.n	80019f2 <_printf_common+0xbe>
 8001996:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800199a:	4639      	mov	r1, r7
 800199c:	4630      	mov	r0, r6
 800199e:	47c0      	blx	r8
 80019a0:	3001      	adds	r0, #1
 80019a2:	d020      	beq.n	80019e6 <_printf_common+0xb2>
 80019a4:	6823      	ldr	r3, [r4, #0]
 80019a6:	68e5      	ldr	r5, [r4, #12]
 80019a8:	f8d9 2000 	ldr.w	r2, [r9]
 80019ac:	f003 0306 	and.w	r3, r3, #6
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	bf08      	it	eq
 80019b4:	1aad      	subeq	r5, r5, r2
 80019b6:	68a3      	ldr	r3, [r4, #8]
 80019b8:	6922      	ldr	r2, [r4, #16]
 80019ba:	bf0c      	ite	eq
 80019bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019c0:	2500      	movne	r5, #0
 80019c2:	4293      	cmp	r3, r2
 80019c4:	bfc4      	itt	gt
 80019c6:	1a9b      	subgt	r3, r3, r2
 80019c8:	18ed      	addgt	r5, r5, r3
 80019ca:	f04f 0900 	mov.w	r9, #0
 80019ce:	341a      	adds	r4, #26
 80019d0:	454d      	cmp	r5, r9
 80019d2:	d11a      	bne.n	8001a0a <_printf_common+0xd6>
 80019d4:	2000      	movs	r0, #0
 80019d6:	e008      	b.n	80019ea <_printf_common+0xb6>
 80019d8:	2301      	movs	r3, #1
 80019da:	4652      	mov	r2, sl
 80019dc:	4639      	mov	r1, r7
 80019de:	4630      	mov	r0, r6
 80019e0:	47c0      	blx	r8
 80019e2:	3001      	adds	r0, #1
 80019e4:	d103      	bne.n	80019ee <_printf_common+0xba>
 80019e6:	f04f 30ff 	mov.w	r0, #4294967295
 80019ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019ee:	3501      	adds	r5, #1
 80019f0:	e7c3      	b.n	800197a <_printf_common+0x46>
 80019f2:	18e1      	adds	r1, r4, r3
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	2030      	movs	r0, #48	; 0x30
 80019f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80019fc:	4422      	add	r2, r4
 80019fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001a02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001a06:	3302      	adds	r3, #2
 8001a08:	e7c5      	b.n	8001996 <_printf_common+0x62>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	4622      	mov	r2, r4
 8001a0e:	4639      	mov	r1, r7
 8001a10:	4630      	mov	r0, r6
 8001a12:	47c0      	blx	r8
 8001a14:	3001      	adds	r0, #1
 8001a16:	d0e6      	beq.n	80019e6 <_printf_common+0xb2>
 8001a18:	f109 0901 	add.w	r9, r9, #1
 8001a1c:	e7d8      	b.n	80019d0 <_printf_common+0x9c>
	...

08001a20 <_printf_i>:
 8001a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001a28:	460c      	mov	r4, r1
 8001a2a:	7e09      	ldrb	r1, [r1, #24]
 8001a2c:	b085      	sub	sp, #20
 8001a2e:	296e      	cmp	r1, #110	; 0x6e
 8001a30:	4617      	mov	r7, r2
 8001a32:	4606      	mov	r6, r0
 8001a34:	4698      	mov	r8, r3
 8001a36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001a38:	f000 80b3 	beq.w	8001ba2 <_printf_i+0x182>
 8001a3c:	d822      	bhi.n	8001a84 <_printf_i+0x64>
 8001a3e:	2963      	cmp	r1, #99	; 0x63
 8001a40:	d036      	beq.n	8001ab0 <_printf_i+0x90>
 8001a42:	d80a      	bhi.n	8001a5a <_printf_i+0x3a>
 8001a44:	2900      	cmp	r1, #0
 8001a46:	f000 80b9 	beq.w	8001bbc <_printf_i+0x19c>
 8001a4a:	2958      	cmp	r1, #88	; 0x58
 8001a4c:	f000 8083 	beq.w	8001b56 <_printf_i+0x136>
 8001a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001a58:	e032      	b.n	8001ac0 <_printf_i+0xa0>
 8001a5a:	2964      	cmp	r1, #100	; 0x64
 8001a5c:	d001      	beq.n	8001a62 <_printf_i+0x42>
 8001a5e:	2969      	cmp	r1, #105	; 0x69
 8001a60:	d1f6      	bne.n	8001a50 <_printf_i+0x30>
 8001a62:	6820      	ldr	r0, [r4, #0]
 8001a64:	6813      	ldr	r3, [r2, #0]
 8001a66:	0605      	lsls	r5, r0, #24
 8001a68:	f103 0104 	add.w	r1, r3, #4
 8001a6c:	d52a      	bpl.n	8001ac4 <_printf_i+0xa4>
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6011      	str	r1, [r2, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	da03      	bge.n	8001a7e <_printf_i+0x5e>
 8001a76:	222d      	movs	r2, #45	; 0x2d
 8001a78:	425b      	negs	r3, r3
 8001a7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001a7e:	486f      	ldr	r0, [pc, #444]	; (8001c3c <_printf_i+0x21c>)
 8001a80:	220a      	movs	r2, #10
 8001a82:	e039      	b.n	8001af8 <_printf_i+0xd8>
 8001a84:	2973      	cmp	r1, #115	; 0x73
 8001a86:	f000 809d 	beq.w	8001bc4 <_printf_i+0x1a4>
 8001a8a:	d808      	bhi.n	8001a9e <_printf_i+0x7e>
 8001a8c:	296f      	cmp	r1, #111	; 0x6f
 8001a8e:	d020      	beq.n	8001ad2 <_printf_i+0xb2>
 8001a90:	2970      	cmp	r1, #112	; 0x70
 8001a92:	d1dd      	bne.n	8001a50 <_printf_i+0x30>
 8001a94:	6823      	ldr	r3, [r4, #0]
 8001a96:	f043 0320 	orr.w	r3, r3, #32
 8001a9a:	6023      	str	r3, [r4, #0]
 8001a9c:	e003      	b.n	8001aa6 <_printf_i+0x86>
 8001a9e:	2975      	cmp	r1, #117	; 0x75
 8001aa0:	d017      	beq.n	8001ad2 <_printf_i+0xb2>
 8001aa2:	2978      	cmp	r1, #120	; 0x78
 8001aa4:	d1d4      	bne.n	8001a50 <_printf_i+0x30>
 8001aa6:	2378      	movs	r3, #120	; 0x78
 8001aa8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001aac:	4864      	ldr	r0, [pc, #400]	; (8001c40 <_printf_i+0x220>)
 8001aae:	e055      	b.n	8001b5c <_printf_i+0x13c>
 8001ab0:	6813      	ldr	r3, [r2, #0]
 8001ab2:	1d19      	adds	r1, r3, #4
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6011      	str	r1, [r2, #0]
 8001ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001abc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e08c      	b.n	8001bde <_printf_i+0x1be>
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6011      	str	r1, [r2, #0]
 8001ac8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001acc:	bf18      	it	ne
 8001ace:	b21b      	sxthne	r3, r3
 8001ad0:	e7cf      	b.n	8001a72 <_printf_i+0x52>
 8001ad2:	6813      	ldr	r3, [r2, #0]
 8001ad4:	6825      	ldr	r5, [r4, #0]
 8001ad6:	1d18      	adds	r0, r3, #4
 8001ad8:	6010      	str	r0, [r2, #0]
 8001ada:	0628      	lsls	r0, r5, #24
 8001adc:	d501      	bpl.n	8001ae2 <_printf_i+0xc2>
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	e002      	b.n	8001ae8 <_printf_i+0xc8>
 8001ae2:	0668      	lsls	r0, r5, #25
 8001ae4:	d5fb      	bpl.n	8001ade <_printf_i+0xbe>
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	4854      	ldr	r0, [pc, #336]	; (8001c3c <_printf_i+0x21c>)
 8001aea:	296f      	cmp	r1, #111	; 0x6f
 8001aec:	bf14      	ite	ne
 8001aee:	220a      	movne	r2, #10
 8001af0:	2208      	moveq	r2, #8
 8001af2:	2100      	movs	r1, #0
 8001af4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001af8:	6865      	ldr	r5, [r4, #4]
 8001afa:	60a5      	str	r5, [r4, #8]
 8001afc:	2d00      	cmp	r5, #0
 8001afe:	f2c0 8095 	blt.w	8001c2c <_printf_i+0x20c>
 8001b02:	6821      	ldr	r1, [r4, #0]
 8001b04:	f021 0104 	bic.w	r1, r1, #4
 8001b08:	6021      	str	r1, [r4, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d13d      	bne.n	8001b8a <_printf_i+0x16a>
 8001b0e:	2d00      	cmp	r5, #0
 8001b10:	f040 808e 	bne.w	8001c30 <_printf_i+0x210>
 8001b14:	4665      	mov	r5, ip
 8001b16:	2a08      	cmp	r2, #8
 8001b18:	d10b      	bne.n	8001b32 <_printf_i+0x112>
 8001b1a:	6823      	ldr	r3, [r4, #0]
 8001b1c:	07db      	lsls	r3, r3, #31
 8001b1e:	d508      	bpl.n	8001b32 <_printf_i+0x112>
 8001b20:	6923      	ldr	r3, [r4, #16]
 8001b22:	6862      	ldr	r2, [r4, #4]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	bfde      	ittt	le
 8001b28:	2330      	movle	r3, #48	; 0x30
 8001b2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001b2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001b32:	ebac 0305 	sub.w	r3, ip, r5
 8001b36:	6123      	str	r3, [r4, #16]
 8001b38:	f8cd 8000 	str.w	r8, [sp]
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	aa03      	add	r2, sp, #12
 8001b40:	4621      	mov	r1, r4
 8001b42:	4630      	mov	r0, r6
 8001b44:	f7ff fef6 	bl	8001934 <_printf_common>
 8001b48:	3001      	adds	r0, #1
 8001b4a:	d14d      	bne.n	8001be8 <_printf_i+0x1c8>
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	b005      	add	sp, #20
 8001b52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b56:	4839      	ldr	r0, [pc, #228]	; (8001c3c <_printf_i+0x21c>)
 8001b58:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001b5c:	6813      	ldr	r3, [r2, #0]
 8001b5e:	6821      	ldr	r1, [r4, #0]
 8001b60:	1d1d      	adds	r5, r3, #4
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6015      	str	r5, [r2, #0]
 8001b66:	060a      	lsls	r2, r1, #24
 8001b68:	d50b      	bpl.n	8001b82 <_printf_i+0x162>
 8001b6a:	07ca      	lsls	r2, r1, #31
 8001b6c:	bf44      	itt	mi
 8001b6e:	f041 0120 	orrmi.w	r1, r1, #32
 8001b72:	6021      	strmi	r1, [r4, #0]
 8001b74:	b91b      	cbnz	r3, 8001b7e <_printf_i+0x15e>
 8001b76:	6822      	ldr	r2, [r4, #0]
 8001b78:	f022 0220 	bic.w	r2, r2, #32
 8001b7c:	6022      	str	r2, [r4, #0]
 8001b7e:	2210      	movs	r2, #16
 8001b80:	e7b7      	b.n	8001af2 <_printf_i+0xd2>
 8001b82:	064d      	lsls	r5, r1, #25
 8001b84:	bf48      	it	mi
 8001b86:	b29b      	uxthmi	r3, r3
 8001b88:	e7ef      	b.n	8001b6a <_printf_i+0x14a>
 8001b8a:	4665      	mov	r5, ip
 8001b8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b90:	fb02 3311 	mls	r3, r2, r1, r3
 8001b94:	5cc3      	ldrb	r3, [r0, r3]
 8001b96:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	2900      	cmp	r1, #0
 8001b9e:	d1f5      	bne.n	8001b8c <_printf_i+0x16c>
 8001ba0:	e7b9      	b.n	8001b16 <_printf_i+0xf6>
 8001ba2:	6813      	ldr	r3, [r2, #0]
 8001ba4:	6825      	ldr	r5, [r4, #0]
 8001ba6:	6961      	ldr	r1, [r4, #20]
 8001ba8:	1d18      	adds	r0, r3, #4
 8001baa:	6010      	str	r0, [r2, #0]
 8001bac:	0628      	lsls	r0, r5, #24
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	d501      	bpl.n	8001bb6 <_printf_i+0x196>
 8001bb2:	6019      	str	r1, [r3, #0]
 8001bb4:	e002      	b.n	8001bbc <_printf_i+0x19c>
 8001bb6:	066a      	lsls	r2, r5, #25
 8001bb8:	d5fb      	bpl.n	8001bb2 <_printf_i+0x192>
 8001bba:	8019      	strh	r1, [r3, #0]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	6123      	str	r3, [r4, #16]
 8001bc0:	4665      	mov	r5, ip
 8001bc2:	e7b9      	b.n	8001b38 <_printf_i+0x118>
 8001bc4:	6813      	ldr	r3, [r2, #0]
 8001bc6:	1d19      	adds	r1, r3, #4
 8001bc8:	6011      	str	r1, [r2, #0]
 8001bca:	681d      	ldr	r5, [r3, #0]
 8001bcc:	6862      	ldr	r2, [r4, #4]
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4628      	mov	r0, r5
 8001bd2:	f7fe fb0d 	bl	80001f0 <memchr>
 8001bd6:	b108      	cbz	r0, 8001bdc <_printf_i+0x1bc>
 8001bd8:	1b40      	subs	r0, r0, r5
 8001bda:	6060      	str	r0, [r4, #4]
 8001bdc:	6863      	ldr	r3, [r4, #4]
 8001bde:	6123      	str	r3, [r4, #16]
 8001be0:	2300      	movs	r3, #0
 8001be2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001be6:	e7a7      	b.n	8001b38 <_printf_i+0x118>
 8001be8:	6923      	ldr	r3, [r4, #16]
 8001bea:	462a      	mov	r2, r5
 8001bec:	4639      	mov	r1, r7
 8001bee:	4630      	mov	r0, r6
 8001bf0:	47c0      	blx	r8
 8001bf2:	3001      	adds	r0, #1
 8001bf4:	d0aa      	beq.n	8001b4c <_printf_i+0x12c>
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	079b      	lsls	r3, r3, #30
 8001bfa:	d413      	bmi.n	8001c24 <_printf_i+0x204>
 8001bfc:	68e0      	ldr	r0, [r4, #12]
 8001bfe:	9b03      	ldr	r3, [sp, #12]
 8001c00:	4298      	cmp	r0, r3
 8001c02:	bfb8      	it	lt
 8001c04:	4618      	movlt	r0, r3
 8001c06:	e7a3      	b.n	8001b50 <_printf_i+0x130>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	464a      	mov	r2, r9
 8001c0c:	4639      	mov	r1, r7
 8001c0e:	4630      	mov	r0, r6
 8001c10:	47c0      	blx	r8
 8001c12:	3001      	adds	r0, #1
 8001c14:	d09a      	beq.n	8001b4c <_printf_i+0x12c>
 8001c16:	3501      	adds	r5, #1
 8001c18:	68e3      	ldr	r3, [r4, #12]
 8001c1a:	9a03      	ldr	r2, [sp, #12]
 8001c1c:	1a9b      	subs	r3, r3, r2
 8001c1e:	42ab      	cmp	r3, r5
 8001c20:	dcf2      	bgt.n	8001c08 <_printf_i+0x1e8>
 8001c22:	e7eb      	b.n	8001bfc <_printf_i+0x1dc>
 8001c24:	2500      	movs	r5, #0
 8001c26:	f104 0919 	add.w	r9, r4, #25
 8001c2a:	e7f5      	b.n	8001c18 <_printf_i+0x1f8>
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1ac      	bne.n	8001b8a <_printf_i+0x16a>
 8001c30:	7803      	ldrb	r3, [r0, #0]
 8001c32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c3a:	e76c      	b.n	8001b16 <_printf_i+0xf6>
 8001c3c:	080022b5 	.word	0x080022b5
 8001c40:	080022c6 	.word	0x080022c6

08001c44 <_sbrk_r>:
 8001c44:	b538      	push	{r3, r4, r5, lr}
 8001c46:	4c06      	ldr	r4, [pc, #24]	; (8001c60 <_sbrk_r+0x1c>)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	4605      	mov	r5, r0
 8001c4c:	4608      	mov	r0, r1
 8001c4e:	6023      	str	r3, [r4, #0]
 8001c50:	f7fe fc82 	bl	8000558 <_sbrk>
 8001c54:	1c43      	adds	r3, r0, #1
 8001c56:	d102      	bne.n	8001c5e <_sbrk_r+0x1a>
 8001c58:	6823      	ldr	r3, [r4, #0]
 8001c5a:	b103      	cbz	r3, 8001c5e <_sbrk_r+0x1a>
 8001c5c:	602b      	str	r3, [r5, #0]
 8001c5e:	bd38      	pop	{r3, r4, r5, pc}
 8001c60:	2000008c 	.word	0x2000008c

08001c64 <__sread>:
 8001c64:	b510      	push	{r4, lr}
 8001c66:	460c      	mov	r4, r1
 8001c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c6c:	f000 fa96 	bl	800219c <_read_r>
 8001c70:	2800      	cmp	r0, #0
 8001c72:	bfab      	itete	ge
 8001c74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001c76:	89a3      	ldrhlt	r3, [r4, #12]
 8001c78:	181b      	addge	r3, r3, r0
 8001c7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001c7e:	bfac      	ite	ge
 8001c80:	6563      	strge	r3, [r4, #84]	; 0x54
 8001c82:	81a3      	strhlt	r3, [r4, #12]
 8001c84:	bd10      	pop	{r4, pc}

08001c86 <__swrite>:
 8001c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c8a:	461f      	mov	r7, r3
 8001c8c:	898b      	ldrh	r3, [r1, #12]
 8001c8e:	05db      	lsls	r3, r3, #23
 8001c90:	4605      	mov	r5, r0
 8001c92:	460c      	mov	r4, r1
 8001c94:	4616      	mov	r6, r2
 8001c96:	d505      	bpl.n	8001ca4 <__swrite+0x1e>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ca0:	f000 f9b6 	bl	8002010 <_lseek_r>
 8001ca4:	89a3      	ldrh	r3, [r4, #12]
 8001ca6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001caa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cae:	81a3      	strh	r3, [r4, #12]
 8001cb0:	4632      	mov	r2, r6
 8001cb2:	463b      	mov	r3, r7
 8001cb4:	4628      	mov	r0, r5
 8001cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cba:	f000 b869 	b.w	8001d90 <_write_r>

08001cbe <__sseek>:
 8001cbe:	b510      	push	{r4, lr}
 8001cc0:	460c      	mov	r4, r1
 8001cc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cc6:	f000 f9a3 	bl	8002010 <_lseek_r>
 8001cca:	1c43      	adds	r3, r0, #1
 8001ccc:	89a3      	ldrh	r3, [r4, #12]
 8001cce:	bf15      	itete	ne
 8001cd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8001cd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001cd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001cda:	81a3      	strheq	r3, [r4, #12]
 8001cdc:	bf18      	it	ne
 8001cde:	81a3      	strhne	r3, [r4, #12]
 8001ce0:	bd10      	pop	{r4, pc}

08001ce2 <__sclose>:
 8001ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ce6:	f000 b8d3 	b.w	8001e90 <_close_r>
	...

08001cec <__swbuf_r>:
 8001cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cee:	460e      	mov	r6, r1
 8001cf0:	4614      	mov	r4, r2
 8001cf2:	4605      	mov	r5, r0
 8001cf4:	b118      	cbz	r0, 8001cfe <__swbuf_r+0x12>
 8001cf6:	6983      	ldr	r3, [r0, #24]
 8001cf8:	b90b      	cbnz	r3, 8001cfe <__swbuf_r+0x12>
 8001cfa:	f7ff fbf7 	bl	80014ec <__sinit>
 8001cfe:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <__swbuf_r+0x98>)
 8001d00:	429c      	cmp	r4, r3
 8001d02:	d12a      	bne.n	8001d5a <__swbuf_r+0x6e>
 8001d04:	686c      	ldr	r4, [r5, #4]
 8001d06:	69a3      	ldr	r3, [r4, #24]
 8001d08:	60a3      	str	r3, [r4, #8]
 8001d0a:	89a3      	ldrh	r3, [r4, #12]
 8001d0c:	071a      	lsls	r2, r3, #28
 8001d0e:	d52e      	bpl.n	8001d6e <__swbuf_r+0x82>
 8001d10:	6923      	ldr	r3, [r4, #16]
 8001d12:	b363      	cbz	r3, 8001d6e <__swbuf_r+0x82>
 8001d14:	6923      	ldr	r3, [r4, #16]
 8001d16:	6820      	ldr	r0, [r4, #0]
 8001d18:	1ac0      	subs	r0, r0, r3
 8001d1a:	6963      	ldr	r3, [r4, #20]
 8001d1c:	b2f6      	uxtb	r6, r6
 8001d1e:	4283      	cmp	r3, r0
 8001d20:	4637      	mov	r7, r6
 8001d22:	dc04      	bgt.n	8001d2e <__swbuf_r+0x42>
 8001d24:	4621      	mov	r1, r4
 8001d26:	4628      	mov	r0, r5
 8001d28:	f000 f948 	bl	8001fbc <_fflush_r>
 8001d2c:	bb28      	cbnz	r0, 8001d7a <__swbuf_r+0x8e>
 8001d2e:	68a3      	ldr	r3, [r4, #8]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	60a3      	str	r3, [r4, #8]
 8001d34:	6823      	ldr	r3, [r4, #0]
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	6022      	str	r2, [r4, #0]
 8001d3a:	701e      	strb	r6, [r3, #0]
 8001d3c:	6963      	ldr	r3, [r4, #20]
 8001d3e:	3001      	adds	r0, #1
 8001d40:	4283      	cmp	r3, r0
 8001d42:	d004      	beq.n	8001d4e <__swbuf_r+0x62>
 8001d44:	89a3      	ldrh	r3, [r4, #12]
 8001d46:	07db      	lsls	r3, r3, #31
 8001d48:	d519      	bpl.n	8001d7e <__swbuf_r+0x92>
 8001d4a:	2e0a      	cmp	r6, #10
 8001d4c:	d117      	bne.n	8001d7e <__swbuf_r+0x92>
 8001d4e:	4621      	mov	r1, r4
 8001d50:	4628      	mov	r0, r5
 8001d52:	f000 f933 	bl	8001fbc <_fflush_r>
 8001d56:	b190      	cbz	r0, 8001d7e <__swbuf_r+0x92>
 8001d58:	e00f      	b.n	8001d7a <__swbuf_r+0x8e>
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <__swbuf_r+0x9c>)
 8001d5c:	429c      	cmp	r4, r3
 8001d5e:	d101      	bne.n	8001d64 <__swbuf_r+0x78>
 8001d60:	68ac      	ldr	r4, [r5, #8]
 8001d62:	e7d0      	b.n	8001d06 <__swbuf_r+0x1a>
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <__swbuf_r+0xa0>)
 8001d66:	429c      	cmp	r4, r3
 8001d68:	bf08      	it	eq
 8001d6a:	68ec      	ldreq	r4, [r5, #12]
 8001d6c:	e7cb      	b.n	8001d06 <__swbuf_r+0x1a>
 8001d6e:	4621      	mov	r1, r4
 8001d70:	4628      	mov	r0, r5
 8001d72:	f000 f81f 	bl	8001db4 <__swsetup_r>
 8001d76:	2800      	cmp	r0, #0
 8001d78:	d0cc      	beq.n	8001d14 <__swbuf_r+0x28>
 8001d7a:	f04f 37ff 	mov.w	r7, #4294967295
 8001d7e:	4638      	mov	r0, r7
 8001d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d82:	bf00      	nop
 8001d84:	08002264 	.word	0x08002264
 8001d88:	08002284 	.word	0x08002284
 8001d8c:	08002244 	.word	0x08002244

08001d90 <_write_r>:
 8001d90:	b538      	push	{r3, r4, r5, lr}
 8001d92:	4c07      	ldr	r4, [pc, #28]	; (8001db0 <_write_r+0x20>)
 8001d94:	4605      	mov	r5, r0
 8001d96:	4608      	mov	r0, r1
 8001d98:	4611      	mov	r1, r2
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	6022      	str	r2, [r4, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	f7fe fb89 	bl	80004b6 <_write>
 8001da4:	1c43      	adds	r3, r0, #1
 8001da6:	d102      	bne.n	8001dae <_write_r+0x1e>
 8001da8:	6823      	ldr	r3, [r4, #0]
 8001daa:	b103      	cbz	r3, 8001dae <_write_r+0x1e>
 8001dac:	602b      	str	r3, [r5, #0]
 8001dae:	bd38      	pop	{r3, r4, r5, pc}
 8001db0:	2000008c 	.word	0x2000008c

08001db4 <__swsetup_r>:
 8001db4:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <__swsetup_r+0xcc>)
 8001db6:	b570      	push	{r4, r5, r6, lr}
 8001db8:	681d      	ldr	r5, [r3, #0]
 8001dba:	4606      	mov	r6, r0
 8001dbc:	460c      	mov	r4, r1
 8001dbe:	b125      	cbz	r5, 8001dca <__swsetup_r+0x16>
 8001dc0:	69ab      	ldr	r3, [r5, #24]
 8001dc2:	b913      	cbnz	r3, 8001dca <__swsetup_r+0x16>
 8001dc4:	4628      	mov	r0, r5
 8001dc6:	f7ff fb91 	bl	80014ec <__sinit>
 8001dca:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <__swsetup_r+0xd0>)
 8001dcc:	429c      	cmp	r4, r3
 8001dce:	d10f      	bne.n	8001df0 <__swsetup_r+0x3c>
 8001dd0:	686c      	ldr	r4, [r5, #4]
 8001dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	0715      	lsls	r5, r2, #28
 8001dda:	d42c      	bmi.n	8001e36 <__swsetup_r+0x82>
 8001ddc:	06d0      	lsls	r0, r2, #27
 8001dde:	d411      	bmi.n	8001e04 <__swsetup_r+0x50>
 8001de0:	2209      	movs	r2, #9
 8001de2:	6032      	str	r2, [r6, #0]
 8001de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001de8:	81a3      	strh	r3, [r4, #12]
 8001dea:	f04f 30ff 	mov.w	r0, #4294967295
 8001dee:	e03e      	b.n	8001e6e <__swsetup_r+0xba>
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <__swsetup_r+0xd4>)
 8001df2:	429c      	cmp	r4, r3
 8001df4:	d101      	bne.n	8001dfa <__swsetup_r+0x46>
 8001df6:	68ac      	ldr	r4, [r5, #8]
 8001df8:	e7eb      	b.n	8001dd2 <__swsetup_r+0x1e>
 8001dfa:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <__swsetup_r+0xd8>)
 8001dfc:	429c      	cmp	r4, r3
 8001dfe:	bf08      	it	eq
 8001e00:	68ec      	ldreq	r4, [r5, #12]
 8001e02:	e7e6      	b.n	8001dd2 <__swsetup_r+0x1e>
 8001e04:	0751      	lsls	r1, r2, #29
 8001e06:	d512      	bpl.n	8001e2e <__swsetup_r+0x7a>
 8001e08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e0a:	b141      	cbz	r1, 8001e1e <__swsetup_r+0x6a>
 8001e0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e10:	4299      	cmp	r1, r3
 8001e12:	d002      	beq.n	8001e1a <__swsetup_r+0x66>
 8001e14:	4630      	mov	r0, r6
 8001e16:	f000 f973 	bl	8002100 <_free_r>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	6363      	str	r3, [r4, #52]	; 0x34
 8001e1e:	89a3      	ldrh	r3, [r4, #12]
 8001e20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001e24:	81a3      	strh	r3, [r4, #12]
 8001e26:	2300      	movs	r3, #0
 8001e28:	6063      	str	r3, [r4, #4]
 8001e2a:	6923      	ldr	r3, [r4, #16]
 8001e2c:	6023      	str	r3, [r4, #0]
 8001e2e:	89a3      	ldrh	r3, [r4, #12]
 8001e30:	f043 0308 	orr.w	r3, r3, #8
 8001e34:	81a3      	strh	r3, [r4, #12]
 8001e36:	6923      	ldr	r3, [r4, #16]
 8001e38:	b94b      	cbnz	r3, 8001e4e <__swsetup_r+0x9a>
 8001e3a:	89a3      	ldrh	r3, [r4, #12]
 8001e3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e44:	d003      	beq.n	8001e4e <__swsetup_r+0x9a>
 8001e46:	4621      	mov	r1, r4
 8001e48:	4630      	mov	r0, r6
 8001e4a:	f000 f917 	bl	800207c <__smakebuf_r>
 8001e4e:	89a2      	ldrh	r2, [r4, #12]
 8001e50:	f012 0301 	ands.w	r3, r2, #1
 8001e54:	d00c      	beq.n	8001e70 <__swsetup_r+0xbc>
 8001e56:	2300      	movs	r3, #0
 8001e58:	60a3      	str	r3, [r4, #8]
 8001e5a:	6963      	ldr	r3, [r4, #20]
 8001e5c:	425b      	negs	r3, r3
 8001e5e:	61a3      	str	r3, [r4, #24]
 8001e60:	6923      	ldr	r3, [r4, #16]
 8001e62:	b953      	cbnz	r3, 8001e7a <__swsetup_r+0xc6>
 8001e64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e68:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001e6c:	d1ba      	bne.n	8001de4 <__swsetup_r+0x30>
 8001e6e:	bd70      	pop	{r4, r5, r6, pc}
 8001e70:	0792      	lsls	r2, r2, #30
 8001e72:	bf58      	it	pl
 8001e74:	6963      	ldrpl	r3, [r4, #20]
 8001e76:	60a3      	str	r3, [r4, #8]
 8001e78:	e7f2      	b.n	8001e60 <__swsetup_r+0xac>
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	e7f7      	b.n	8001e6e <__swsetup_r+0xba>
 8001e7e:	bf00      	nop
 8001e80:	20000000 	.word	0x20000000
 8001e84:	08002264 	.word	0x08002264
 8001e88:	08002284 	.word	0x08002284
 8001e8c:	08002244 	.word	0x08002244

08001e90 <_close_r>:
 8001e90:	b538      	push	{r3, r4, r5, lr}
 8001e92:	4c06      	ldr	r4, [pc, #24]	; (8001eac <_close_r+0x1c>)
 8001e94:	2300      	movs	r3, #0
 8001e96:	4605      	mov	r5, r0
 8001e98:	4608      	mov	r0, r1
 8001e9a:	6023      	str	r3, [r4, #0]
 8001e9c:	f7fe fb27 	bl	80004ee <_close>
 8001ea0:	1c43      	adds	r3, r0, #1
 8001ea2:	d102      	bne.n	8001eaa <_close_r+0x1a>
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	b103      	cbz	r3, 8001eaa <_close_r+0x1a>
 8001ea8:	602b      	str	r3, [r5, #0]
 8001eaa:	bd38      	pop	{r3, r4, r5, pc}
 8001eac:	2000008c 	.word	0x2000008c

08001eb0 <__sflush_r>:
 8001eb0:	898a      	ldrh	r2, [r1, #12]
 8001eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001eb6:	4605      	mov	r5, r0
 8001eb8:	0710      	lsls	r0, r2, #28
 8001eba:	460c      	mov	r4, r1
 8001ebc:	d458      	bmi.n	8001f70 <__sflush_r+0xc0>
 8001ebe:	684b      	ldr	r3, [r1, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	dc05      	bgt.n	8001ed0 <__sflush_r+0x20>
 8001ec4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	dc02      	bgt.n	8001ed0 <__sflush_r+0x20>
 8001eca:	2000      	movs	r0, #0
 8001ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ed0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ed2:	2e00      	cmp	r6, #0
 8001ed4:	d0f9      	beq.n	8001eca <__sflush_r+0x1a>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001edc:	682f      	ldr	r7, [r5, #0]
 8001ede:	6a21      	ldr	r1, [r4, #32]
 8001ee0:	602b      	str	r3, [r5, #0]
 8001ee2:	d032      	beq.n	8001f4a <__sflush_r+0x9a>
 8001ee4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001ee6:	89a3      	ldrh	r3, [r4, #12]
 8001ee8:	075a      	lsls	r2, r3, #29
 8001eea:	d505      	bpl.n	8001ef8 <__sflush_r+0x48>
 8001eec:	6863      	ldr	r3, [r4, #4]
 8001eee:	1ac0      	subs	r0, r0, r3
 8001ef0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001ef2:	b10b      	cbz	r3, 8001ef8 <__sflush_r+0x48>
 8001ef4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ef6:	1ac0      	subs	r0, r0, r3
 8001ef8:	2300      	movs	r3, #0
 8001efa:	4602      	mov	r2, r0
 8001efc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001efe:	6a21      	ldr	r1, [r4, #32]
 8001f00:	4628      	mov	r0, r5
 8001f02:	47b0      	blx	r6
 8001f04:	1c43      	adds	r3, r0, #1
 8001f06:	89a3      	ldrh	r3, [r4, #12]
 8001f08:	d106      	bne.n	8001f18 <__sflush_r+0x68>
 8001f0a:	6829      	ldr	r1, [r5, #0]
 8001f0c:	291d      	cmp	r1, #29
 8001f0e:	d848      	bhi.n	8001fa2 <__sflush_r+0xf2>
 8001f10:	4a29      	ldr	r2, [pc, #164]	; (8001fb8 <__sflush_r+0x108>)
 8001f12:	40ca      	lsrs	r2, r1
 8001f14:	07d6      	lsls	r6, r2, #31
 8001f16:	d544      	bpl.n	8001fa2 <__sflush_r+0xf2>
 8001f18:	2200      	movs	r2, #0
 8001f1a:	6062      	str	r2, [r4, #4]
 8001f1c:	04d9      	lsls	r1, r3, #19
 8001f1e:	6922      	ldr	r2, [r4, #16]
 8001f20:	6022      	str	r2, [r4, #0]
 8001f22:	d504      	bpl.n	8001f2e <__sflush_r+0x7e>
 8001f24:	1c42      	adds	r2, r0, #1
 8001f26:	d101      	bne.n	8001f2c <__sflush_r+0x7c>
 8001f28:	682b      	ldr	r3, [r5, #0]
 8001f2a:	b903      	cbnz	r3, 8001f2e <__sflush_r+0x7e>
 8001f2c:	6560      	str	r0, [r4, #84]	; 0x54
 8001f2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001f30:	602f      	str	r7, [r5, #0]
 8001f32:	2900      	cmp	r1, #0
 8001f34:	d0c9      	beq.n	8001eca <__sflush_r+0x1a>
 8001f36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001f3a:	4299      	cmp	r1, r3
 8001f3c:	d002      	beq.n	8001f44 <__sflush_r+0x94>
 8001f3e:	4628      	mov	r0, r5
 8001f40:	f000 f8de 	bl	8002100 <_free_r>
 8001f44:	2000      	movs	r0, #0
 8001f46:	6360      	str	r0, [r4, #52]	; 0x34
 8001f48:	e7c0      	b.n	8001ecc <__sflush_r+0x1c>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	4628      	mov	r0, r5
 8001f4e:	47b0      	blx	r6
 8001f50:	1c41      	adds	r1, r0, #1
 8001f52:	d1c8      	bne.n	8001ee6 <__sflush_r+0x36>
 8001f54:	682b      	ldr	r3, [r5, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0c5      	beq.n	8001ee6 <__sflush_r+0x36>
 8001f5a:	2b1d      	cmp	r3, #29
 8001f5c:	d001      	beq.n	8001f62 <__sflush_r+0xb2>
 8001f5e:	2b16      	cmp	r3, #22
 8001f60:	d101      	bne.n	8001f66 <__sflush_r+0xb6>
 8001f62:	602f      	str	r7, [r5, #0]
 8001f64:	e7b1      	b.n	8001eca <__sflush_r+0x1a>
 8001f66:	89a3      	ldrh	r3, [r4, #12]
 8001f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f6c:	81a3      	strh	r3, [r4, #12]
 8001f6e:	e7ad      	b.n	8001ecc <__sflush_r+0x1c>
 8001f70:	690f      	ldr	r7, [r1, #16]
 8001f72:	2f00      	cmp	r7, #0
 8001f74:	d0a9      	beq.n	8001eca <__sflush_r+0x1a>
 8001f76:	0793      	lsls	r3, r2, #30
 8001f78:	680e      	ldr	r6, [r1, #0]
 8001f7a:	bf08      	it	eq
 8001f7c:	694b      	ldreq	r3, [r1, #20]
 8001f7e:	600f      	str	r7, [r1, #0]
 8001f80:	bf18      	it	ne
 8001f82:	2300      	movne	r3, #0
 8001f84:	eba6 0807 	sub.w	r8, r6, r7
 8001f88:	608b      	str	r3, [r1, #8]
 8001f8a:	f1b8 0f00 	cmp.w	r8, #0
 8001f8e:	dd9c      	ble.n	8001eca <__sflush_r+0x1a>
 8001f90:	4643      	mov	r3, r8
 8001f92:	463a      	mov	r2, r7
 8001f94:	6a21      	ldr	r1, [r4, #32]
 8001f96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001f98:	4628      	mov	r0, r5
 8001f9a:	47b0      	blx	r6
 8001f9c:	2800      	cmp	r0, #0
 8001f9e:	dc06      	bgt.n	8001fae <__sflush_r+0xfe>
 8001fa0:	89a3      	ldrh	r3, [r4, #12]
 8001fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fa6:	81a3      	strh	r3, [r4, #12]
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	e78e      	b.n	8001ecc <__sflush_r+0x1c>
 8001fae:	4407      	add	r7, r0
 8001fb0:	eba8 0800 	sub.w	r8, r8, r0
 8001fb4:	e7e9      	b.n	8001f8a <__sflush_r+0xda>
 8001fb6:	bf00      	nop
 8001fb8:	20400001 	.word	0x20400001

08001fbc <_fflush_r>:
 8001fbc:	b538      	push	{r3, r4, r5, lr}
 8001fbe:	690b      	ldr	r3, [r1, #16]
 8001fc0:	4605      	mov	r5, r0
 8001fc2:	460c      	mov	r4, r1
 8001fc4:	b1db      	cbz	r3, 8001ffe <_fflush_r+0x42>
 8001fc6:	b118      	cbz	r0, 8001fd0 <_fflush_r+0x14>
 8001fc8:	6983      	ldr	r3, [r0, #24]
 8001fca:	b90b      	cbnz	r3, 8001fd0 <_fflush_r+0x14>
 8001fcc:	f7ff fa8e 	bl	80014ec <__sinit>
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <_fflush_r+0x48>)
 8001fd2:	429c      	cmp	r4, r3
 8001fd4:	d109      	bne.n	8001fea <_fflush_r+0x2e>
 8001fd6:	686c      	ldr	r4, [r5, #4]
 8001fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fdc:	b17b      	cbz	r3, 8001ffe <_fflush_r+0x42>
 8001fde:	4621      	mov	r1, r4
 8001fe0:	4628      	mov	r0, r5
 8001fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001fe6:	f7ff bf63 	b.w	8001eb0 <__sflush_r>
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <_fflush_r+0x4c>)
 8001fec:	429c      	cmp	r4, r3
 8001fee:	d101      	bne.n	8001ff4 <_fflush_r+0x38>
 8001ff0:	68ac      	ldr	r4, [r5, #8]
 8001ff2:	e7f1      	b.n	8001fd8 <_fflush_r+0x1c>
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <_fflush_r+0x50>)
 8001ff6:	429c      	cmp	r4, r3
 8001ff8:	bf08      	it	eq
 8001ffa:	68ec      	ldreq	r4, [r5, #12]
 8001ffc:	e7ec      	b.n	8001fd8 <_fflush_r+0x1c>
 8001ffe:	2000      	movs	r0, #0
 8002000:	bd38      	pop	{r3, r4, r5, pc}
 8002002:	bf00      	nop
 8002004:	08002264 	.word	0x08002264
 8002008:	08002284 	.word	0x08002284
 800200c:	08002244 	.word	0x08002244

08002010 <_lseek_r>:
 8002010:	b538      	push	{r3, r4, r5, lr}
 8002012:	4c07      	ldr	r4, [pc, #28]	; (8002030 <_lseek_r+0x20>)
 8002014:	4605      	mov	r5, r0
 8002016:	4608      	mov	r0, r1
 8002018:	4611      	mov	r1, r2
 800201a:	2200      	movs	r2, #0
 800201c:	6022      	str	r2, [r4, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	f7fe fa8c 	bl	800053c <_lseek>
 8002024:	1c43      	adds	r3, r0, #1
 8002026:	d102      	bne.n	800202e <_lseek_r+0x1e>
 8002028:	6823      	ldr	r3, [r4, #0]
 800202a:	b103      	cbz	r3, 800202e <_lseek_r+0x1e>
 800202c:	602b      	str	r3, [r5, #0]
 800202e:	bd38      	pop	{r3, r4, r5, pc}
 8002030:	2000008c 	.word	0x2000008c

08002034 <__swhatbuf_r>:
 8002034:	b570      	push	{r4, r5, r6, lr}
 8002036:	460e      	mov	r6, r1
 8002038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800203c:	2900      	cmp	r1, #0
 800203e:	b096      	sub	sp, #88	; 0x58
 8002040:	4614      	mov	r4, r2
 8002042:	461d      	mov	r5, r3
 8002044:	da07      	bge.n	8002056 <__swhatbuf_r+0x22>
 8002046:	2300      	movs	r3, #0
 8002048:	602b      	str	r3, [r5, #0]
 800204a:	89b3      	ldrh	r3, [r6, #12]
 800204c:	061a      	lsls	r2, r3, #24
 800204e:	d410      	bmi.n	8002072 <__swhatbuf_r+0x3e>
 8002050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002054:	e00e      	b.n	8002074 <__swhatbuf_r+0x40>
 8002056:	466a      	mov	r2, sp
 8002058:	f000 f8b2 	bl	80021c0 <_fstat_r>
 800205c:	2800      	cmp	r0, #0
 800205e:	dbf2      	blt.n	8002046 <__swhatbuf_r+0x12>
 8002060:	9a01      	ldr	r2, [sp, #4]
 8002062:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002066:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800206a:	425a      	negs	r2, r3
 800206c:	415a      	adcs	r2, r3
 800206e:	602a      	str	r2, [r5, #0]
 8002070:	e7ee      	b.n	8002050 <__swhatbuf_r+0x1c>
 8002072:	2340      	movs	r3, #64	; 0x40
 8002074:	2000      	movs	r0, #0
 8002076:	6023      	str	r3, [r4, #0]
 8002078:	b016      	add	sp, #88	; 0x58
 800207a:	bd70      	pop	{r4, r5, r6, pc}

0800207c <__smakebuf_r>:
 800207c:	898b      	ldrh	r3, [r1, #12]
 800207e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002080:	079d      	lsls	r5, r3, #30
 8002082:	4606      	mov	r6, r0
 8002084:	460c      	mov	r4, r1
 8002086:	d507      	bpl.n	8002098 <__smakebuf_r+0x1c>
 8002088:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800208c:	6023      	str	r3, [r4, #0]
 800208e:	6123      	str	r3, [r4, #16]
 8002090:	2301      	movs	r3, #1
 8002092:	6163      	str	r3, [r4, #20]
 8002094:	b002      	add	sp, #8
 8002096:	bd70      	pop	{r4, r5, r6, pc}
 8002098:	ab01      	add	r3, sp, #4
 800209a:	466a      	mov	r2, sp
 800209c:	f7ff ffca 	bl	8002034 <__swhatbuf_r>
 80020a0:	9900      	ldr	r1, [sp, #0]
 80020a2:	4605      	mov	r5, r0
 80020a4:	4630      	mov	r0, r6
 80020a6:	f7ff faab 	bl	8001600 <_malloc_r>
 80020aa:	b948      	cbnz	r0, 80020c0 <__smakebuf_r+0x44>
 80020ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020b0:	059a      	lsls	r2, r3, #22
 80020b2:	d4ef      	bmi.n	8002094 <__smakebuf_r+0x18>
 80020b4:	f023 0303 	bic.w	r3, r3, #3
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	81a3      	strh	r3, [r4, #12]
 80020be:	e7e3      	b.n	8002088 <__smakebuf_r+0xc>
 80020c0:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <__smakebuf_r+0x7c>)
 80020c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80020c4:	89a3      	ldrh	r3, [r4, #12]
 80020c6:	6020      	str	r0, [r4, #0]
 80020c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020cc:	81a3      	strh	r3, [r4, #12]
 80020ce:	9b00      	ldr	r3, [sp, #0]
 80020d0:	6163      	str	r3, [r4, #20]
 80020d2:	9b01      	ldr	r3, [sp, #4]
 80020d4:	6120      	str	r0, [r4, #16]
 80020d6:	b15b      	cbz	r3, 80020f0 <__smakebuf_r+0x74>
 80020d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020dc:	4630      	mov	r0, r6
 80020de:	f000 f881 	bl	80021e4 <_isatty_r>
 80020e2:	b128      	cbz	r0, 80020f0 <__smakebuf_r+0x74>
 80020e4:	89a3      	ldrh	r3, [r4, #12]
 80020e6:	f023 0303 	bic.w	r3, r3, #3
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	81a3      	strh	r3, [r4, #12]
 80020f0:	89a3      	ldrh	r3, [r4, #12]
 80020f2:	431d      	orrs	r5, r3
 80020f4:	81a5      	strh	r5, [r4, #12]
 80020f6:	e7cd      	b.n	8002094 <__smakebuf_r+0x18>
 80020f8:	080014b5 	.word	0x080014b5

080020fc <__malloc_lock>:
 80020fc:	4770      	bx	lr

080020fe <__malloc_unlock>:
 80020fe:	4770      	bx	lr

08002100 <_free_r>:
 8002100:	b538      	push	{r3, r4, r5, lr}
 8002102:	4605      	mov	r5, r0
 8002104:	2900      	cmp	r1, #0
 8002106:	d045      	beq.n	8002194 <_free_r+0x94>
 8002108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800210c:	1f0c      	subs	r4, r1, #4
 800210e:	2b00      	cmp	r3, #0
 8002110:	bfb8      	it	lt
 8002112:	18e4      	addlt	r4, r4, r3
 8002114:	f7ff fff2 	bl	80020fc <__malloc_lock>
 8002118:	4a1f      	ldr	r2, [pc, #124]	; (8002198 <_free_r+0x98>)
 800211a:	6813      	ldr	r3, [r2, #0]
 800211c:	4610      	mov	r0, r2
 800211e:	b933      	cbnz	r3, 800212e <_free_r+0x2e>
 8002120:	6063      	str	r3, [r4, #4]
 8002122:	6014      	str	r4, [r2, #0]
 8002124:	4628      	mov	r0, r5
 8002126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800212a:	f7ff bfe8 	b.w	80020fe <__malloc_unlock>
 800212e:	42a3      	cmp	r3, r4
 8002130:	d90c      	bls.n	800214c <_free_r+0x4c>
 8002132:	6821      	ldr	r1, [r4, #0]
 8002134:	1862      	adds	r2, r4, r1
 8002136:	4293      	cmp	r3, r2
 8002138:	bf04      	itt	eq
 800213a:	681a      	ldreq	r2, [r3, #0]
 800213c:	685b      	ldreq	r3, [r3, #4]
 800213e:	6063      	str	r3, [r4, #4]
 8002140:	bf04      	itt	eq
 8002142:	1852      	addeq	r2, r2, r1
 8002144:	6022      	streq	r2, [r4, #0]
 8002146:	6004      	str	r4, [r0, #0]
 8002148:	e7ec      	b.n	8002124 <_free_r+0x24>
 800214a:	4613      	mov	r3, r2
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	b10a      	cbz	r2, 8002154 <_free_r+0x54>
 8002150:	42a2      	cmp	r2, r4
 8002152:	d9fa      	bls.n	800214a <_free_r+0x4a>
 8002154:	6819      	ldr	r1, [r3, #0]
 8002156:	1858      	adds	r0, r3, r1
 8002158:	42a0      	cmp	r0, r4
 800215a:	d10b      	bne.n	8002174 <_free_r+0x74>
 800215c:	6820      	ldr	r0, [r4, #0]
 800215e:	4401      	add	r1, r0
 8002160:	1858      	adds	r0, r3, r1
 8002162:	4282      	cmp	r2, r0
 8002164:	6019      	str	r1, [r3, #0]
 8002166:	d1dd      	bne.n	8002124 <_free_r+0x24>
 8002168:	6810      	ldr	r0, [r2, #0]
 800216a:	6852      	ldr	r2, [r2, #4]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	4401      	add	r1, r0
 8002170:	6019      	str	r1, [r3, #0]
 8002172:	e7d7      	b.n	8002124 <_free_r+0x24>
 8002174:	d902      	bls.n	800217c <_free_r+0x7c>
 8002176:	230c      	movs	r3, #12
 8002178:	602b      	str	r3, [r5, #0]
 800217a:	e7d3      	b.n	8002124 <_free_r+0x24>
 800217c:	6820      	ldr	r0, [r4, #0]
 800217e:	1821      	adds	r1, r4, r0
 8002180:	428a      	cmp	r2, r1
 8002182:	bf04      	itt	eq
 8002184:	6811      	ldreq	r1, [r2, #0]
 8002186:	6852      	ldreq	r2, [r2, #4]
 8002188:	6062      	str	r2, [r4, #4]
 800218a:	bf04      	itt	eq
 800218c:	1809      	addeq	r1, r1, r0
 800218e:	6021      	streq	r1, [r4, #0]
 8002190:	605c      	str	r4, [r3, #4]
 8002192:	e7c7      	b.n	8002124 <_free_r+0x24>
 8002194:	bd38      	pop	{r3, r4, r5, pc}
 8002196:	bf00      	nop
 8002198:	20000084 	.word	0x20000084

0800219c <_read_r>:
 800219c:	b538      	push	{r3, r4, r5, lr}
 800219e:	4c07      	ldr	r4, [pc, #28]	; (80021bc <_read_r+0x20>)
 80021a0:	4605      	mov	r5, r0
 80021a2:	4608      	mov	r0, r1
 80021a4:	4611      	mov	r1, r2
 80021a6:	2200      	movs	r2, #0
 80021a8:	6022      	str	r2, [r4, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	f7fe f966 	bl	800047c <_read>
 80021b0:	1c43      	adds	r3, r0, #1
 80021b2:	d102      	bne.n	80021ba <_read_r+0x1e>
 80021b4:	6823      	ldr	r3, [r4, #0]
 80021b6:	b103      	cbz	r3, 80021ba <_read_r+0x1e>
 80021b8:	602b      	str	r3, [r5, #0]
 80021ba:	bd38      	pop	{r3, r4, r5, pc}
 80021bc:	2000008c 	.word	0x2000008c

080021c0 <_fstat_r>:
 80021c0:	b538      	push	{r3, r4, r5, lr}
 80021c2:	4c07      	ldr	r4, [pc, #28]	; (80021e0 <_fstat_r+0x20>)
 80021c4:	2300      	movs	r3, #0
 80021c6:	4605      	mov	r5, r0
 80021c8:	4608      	mov	r0, r1
 80021ca:	4611      	mov	r1, r2
 80021cc:	6023      	str	r3, [r4, #0]
 80021ce:	f7fe f99a 	bl	8000506 <_fstat>
 80021d2:	1c43      	adds	r3, r0, #1
 80021d4:	d102      	bne.n	80021dc <_fstat_r+0x1c>
 80021d6:	6823      	ldr	r3, [r4, #0]
 80021d8:	b103      	cbz	r3, 80021dc <_fstat_r+0x1c>
 80021da:	602b      	str	r3, [r5, #0]
 80021dc:	bd38      	pop	{r3, r4, r5, pc}
 80021de:	bf00      	nop
 80021e0:	2000008c 	.word	0x2000008c

080021e4 <_isatty_r>:
 80021e4:	b538      	push	{r3, r4, r5, lr}
 80021e6:	4c06      	ldr	r4, [pc, #24]	; (8002200 <_isatty_r+0x1c>)
 80021e8:	2300      	movs	r3, #0
 80021ea:	4605      	mov	r5, r0
 80021ec:	4608      	mov	r0, r1
 80021ee:	6023      	str	r3, [r4, #0]
 80021f0:	f7fe f999 	bl	8000526 <_isatty>
 80021f4:	1c43      	adds	r3, r0, #1
 80021f6:	d102      	bne.n	80021fe <_isatty_r+0x1a>
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	b103      	cbz	r3, 80021fe <_isatty_r+0x1a>
 80021fc:	602b      	str	r3, [r5, #0]
 80021fe:	bd38      	pop	{r3, r4, r5, pc}
 8002200:	2000008c 	.word	0x2000008c

08002204 <_init>:
 8002204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002206:	bf00      	nop
 8002208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800220a:	bc08      	pop	{r3}
 800220c:	469e      	mov	lr, r3
 800220e:	4770      	bx	lr

08002210 <_fini>:
 8002210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002212:	bf00      	nop
 8002214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002216:	bc08      	pop	{r3}
 8002218:	469e      	mov	lr, r3
 800221a:	4770      	bx	lr
