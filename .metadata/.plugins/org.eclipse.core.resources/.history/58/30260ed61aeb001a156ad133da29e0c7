/*

 * STM32F407xx_SPI_Driver.h
 *
 *  Created on: Aug 28, 2020
 *      Author: Donavan Tran
 *      Description: This header file contains specific details and implementations
 *      			 of the SPI peripheral interface


#ifndef INC_STM32F407XX_SPI_DRIVER_H_
#define INC_STM32F407XX_SPI_DRIVER_H_
#include "stm32f407xx.h"

****************SPECIFIC MACROS FOR SPI********************


 * @SPI_DEVICE_MODE

#define SPI_DEVICE_SLAVE_MODE					0U
#define SPI_DEVICE_MASTER_MODE					1U


 * @SPI_BUS

#define SPI_BUS_CONFIG_FULL_DUPLX				0U
#define SPI_BUS_CONFIG_HALF_DUPLX				1U
#define SPI_BUS_CONFIG_SIMPLEX_RX_ONLLY			2U
//#define SPI_BUS_CONFIG_SIMPLEX_TX_ONLY		3U //Similar to full duplex, so no needed


 * DFF SET or RESET

#define SPI_DFF_8_BIT							0U
#define SPI_DFF_16_BIT							1U


 * CPOL SET or RESET

#define	SPI_CPOL_HIGH							SET
#define SPI_CPOL_LOW							RESET


 * CPHA SET or RESET

#define SPI_CPHA_HIGH							SET
#define SPI_CPHA_LOW							RESET


 * @SPI_SSM

#define SPI_HSM									0U	//Default
#define SPI_SSM									1U


 * SPI_SR status flag

#define SPI_TXE_FLAG							(1 << SPI_SR_TXE)
#define SPI_RXNE_FLAG							(1 << SPI_SR_RXNE)
#define SPI_BUSY_FLAG							(1 << SPI_SR_BSY)

 *  Baud Rate Control Macros

#define SPI_SCLK_SPEED_DIV2						0U
#define SPI_SCLK_SPEED_DIV4						1U
#define SPI_SCLK_SPEED_DIV8						2U
#define SPI_SCLK_SPEED_DIV16					3U
#define SPI_SCLK_SPEED_DIV32					4U
#define SPI_SCLK_SPEED_DIV64 					5U
#define SPI_SCLK_SPEED_DIV128					6U
#define SPI_SCLK_SPEED_DIV256					7U

***********************************************************
**************************FUNCTION MACRO*******************

 * SPI Peripheral Clock Enable

#define SPIx_PCLK_EN(__SPIx__) 	((__SPIx__) == SPI1) ? SPI1_PCLK_EN() :\
								((__SPIx__) == SPI2) ? SPI2_PCLK_EN() : SPI3_PCLK_EN()

 * SPI Peripheral Clock Disable

#define SPIx_PCLK_DI(__SPIx__) 	((__SPIx__) == SPI1) ? SPI1_PCLK_DI() :\
								((__SPIx__) == SPI2) ? SPI2_PCLK_DI() : SPI3_PCLK_DI()


 * SPI Enable

#define SPIx_EN(__INDEX__)		(__INDEX__)->CR1 |= (1 << SPI_CR1_SPE)


 * SPI Disable

#define SPIx_DI(__INDEX__)		(__INDEX__)->CR1 &= ~(1 << SPI_CR1_SPE)

***********************************************************


 * SPI configuration structure

typedef struct {
	uint8_t  SclkSpeed;
	uint8_t  DeviceMode;	//@SPI_DEVICE_MODE
	uint8_t  BusConfig;		//@SPI_BUS
	uint8_t  SSM;			//Slave Select Management
	uint8_t  DFF;   		//Data Frame Format
	uint8_t  CPOL;  		//Clock Polarity
	uint8_t  CPHA;  		//Clock Phase
} SPI_Config_t;



 * SPI Handle structure

typedef struct {
	SPI_Reg_t*		pSPIx;
	SPI_Config_t	SPI_Config;
} SPI_Handle_t;

*******************************SPI FUNCTION API DECLARATION************************


 * Peripheral clock control

void SPI_PeriClkCtrl(SPI_Reg_t* pSPIx, uint8_t EnOrDi);


 * SPI initialization and de-initialization
 * Parameter: Pointer to the GPIO Handle Structure

void SPI_Init(SPI_Handle_t* pSPIHandler);


 * Enable the SPI peripherals

void SPI_PeripheralEnable(SPI_Reg_t* pSPIx, uint8_t EnOrDi);

 Consult the RCC Peripheral reset registers for more details
void SPI_DeInit(SPI_Reg_t* pSPIx);


 * SPI Send and Receive API
 * Note: blocking is non-interrupt-based and non-blocking is interrupt-based send and receive method

//Blocking-based API
void SPI_SendData(SPI_Reg_t* pSPIx, uint8_t* pTxBuffer, uint32_t len); //Note: it is a standard practice to define len as uint32_t
void SPI_ReceiveData(SPI_Reg_t* pSPIx, uint8_t* pRxBuffer, uint32_t len);



 * SPI Interrupt Configuration and Handling

void SPI_IRQITConfig(uint8_t IRQNumber, uint8_t EnOrDi);
void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriorityValue);
void SPI_IRQHandling(SPI_Handle_t* pSPIHandler);


 * Other controllers API



 * Check if the SPI is still busy transmitting bytes of data

uint8_t SPI_CheckStatusFlag(SPI_Reg_t* pSPIx, uint8_t flag);
#endif  INC_STM32F407XX_SPI_DRIVER_H_
*/

/*
 * stm32f407xx_spi_driver.h
 *
 *  Created on: Feb 9, 2019
 *      Author: admin
 */

#ifndef INC_STM32F407XX_SPI_DRIVER_H_
#define INC_STM32F407XX_SPI_DRIVER_H_

#include "stm32f407xx.h"

/*
 *  Configuration structure for SPIx peripheral
 */
typedef struct
{
	uint8_t SPI_DeviceMode;
	uint8_t SPI_BusConfig;
	uint8_t SPI_SclkSpeed;
	uint8_t SPI_DFF;
	uint8_t SPI_CPOL;
	uint8_t SPI_CPHA;
	uint8_t SPI_SSM;
}SPI_Config_t;


/*
 *Handle structure for SPIx peripheral
 */
typedef struct
{
	SPI_RegDef_t 	*pSPIx;   /*!< This holds the base address of SPIx(x:0,1,2) peripheral >*/
	SPI_Config_t 	SPIConfig;
	uint8_t 		*pTxBuffer; /* !< To store the app. Tx buffer address > */
	uint8_t 		*pRxBuffer;	/* !< To store the app. Rx buffer address > */
	uint32_t 		TxLen;		/* !< To store Tx len > */
	uint32_t 		RxLen;		/* !< To store Tx len > */
	uint8_t 		TxState;	/* !< To store Tx state > */
	uint8_t 		RxState;	/* !< To store Rx state > */
}SPI_Handle_t;


/*
 * SPI application states
 */
#define SPI_READY 					0
#define SPI_BUSY_IN_RX 				1
#define SPI_BUSY_IN_TX 				2

/*
 * Possible SPI Application events
 */
#define SPI_EVENT_TX_CMPLT   1
#define SPI_EVENT_RX_CMPLT   2
#define SPI_EVENT_OVR_ERR    3
#define SPI_EVENT_CRC_ERR    4



/*
 * @SPI_DeviceMode
 */
#define SPI_DEVICE_MODE_MASTER    1
#define SPI_DEVICE_MODE_SLAVE     0


/*
 * @SPI_BusConfig
 */
#define SPI_BUS_CONFIG_FD                1
#define SPI_BUS_CONFIG_HD                2
#define SPI_BUS_CONFIG_SIMPLEX_RXONLY    3

/*
 * @SPI_SclkSpeed
 */
#define SPI_SCLK_SPEED_DIV2             	0
#define SPI_SCLK_SPEED_DIV4             	1
#define SPI_SCLK_SPEED_DIV8             	2
#define SPI_SCLK_SPEED_DIV16             	3
#define SPI_SCLK_SPEED_DIV32             	4
#define SPI_SCLK_SPEED_DIV64             	5
#define SPI_SCLK_SPEED_DIV128             	6
#define SPI_SCLK_SPEED_DIV256             	7

/*
 * @SPI_DFF
 */
#define SPI_DFF_8BITS 	0
#define SPI_DFF_16BITS  1

/*
 * @CPOL
 */
#define SPI_CPOL_HIGH 1
#define SPI_CPOL_LOW 0

/*
 * @CPHA
 */
#define SPI_CPHA_HIGH 1
#define SPI_CPHA_LOW 0

/*
 * @SPI_SSM
 */
#define SPI_SSM_EN     1
#define SPI_SSM_DI     0


/*
 * SPI related status flags definitions
 */
#define SPI_TXE_FLAG    ( 1 << SPI_SR_TXE)
#define SPI_RXNE_FLAG   ( 1 << SPI_SR_RXNE)
#define SPI_BUSY_FLAG   ( 1 << SPI_SR_BSY)



/******************************************************************************************
 *								APIs supported by this driver
 *		 For more information about the APIs check the function definitions
 ******************************************************************************************/
/*
 * Peripheral Clock setup
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi);

/*
 * Init and De-init
 */
void SPI_Init(SPI_Handle_t *pSPIHandle);
void SPI_DeInit(SPI_RegDef_t *pSPIx);


/*
 * Data Send and Receive
 */
void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer, uint32_t Len);
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len);

uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle,uint8_t *pTxBuffer, uint32_t Len);
uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len);

/*
 * IRQ Configuration and ISR handling
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi);
void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority);
void SPI_IRQHandling(SPI_Handle_t *pHandle);

/*
 * Other Peripheral Control APIs
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi);
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi);
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi);
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName);
void SPI_ClearOVRFlag(SPI_RegDef_t *pSPIx);
void SPI_CloseTransmisson(SPI_Handle_t *pSPIHandle);
void SPI_CloseReception(SPI_Handle_t *pSPIHandle);
uint8_t I2C_DeviceMode(I2C_RegDef_t *I2Cx);

/*
 * Application callback
 */
void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle,uint8_t AppEv);

#endif /* INC_STM32F407XX_SPI_DRIVER_H_ */
