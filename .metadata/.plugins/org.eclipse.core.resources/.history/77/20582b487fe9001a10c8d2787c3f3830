/*
 * STM32F407xx_SPI_Driver.c
 *
 *  Created on: Aug 28, 2020
 *      Author: Donavan Tran
 *      Description: This source file contains specific definitions of SPI
 *      			 function API
 */

#include "../Inc/STM32F407xx_SPI_Driver.h"

/*****************************************************
 * @fn					- SPI_PeriClkCtrl
 *
 * @brief				- Enable or disable the SPIx clock peripherals
 *
 * @param[in]			- SPI_Reg_t* pSPIx: Base address of the specific SPI
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void SPI_PeriClkCtrl(SPI_Reg_t* pSPIx, uint8_t EnOrDi) {
	if (EnOrDi) {
		SPIx_PCLK_EN(pSPIx); //Go to SPIx_PCLK_EN macro for more details
	} else {
		SPIx_PCLK_DI(pSPIx); //Go to SPIx_PCLK_DI macro for more details
	}
}

/*****************************************************
 * @fn					- SPI_Init
 *
 * @brief				- Initialize the SPI port given the handle structure
 *
 * @param[in]			- Handle Structure of SPI that contains all SPI configuration and port
 *
 * @return				- none
 * @note				- none
 */
void SPI_Init(SPI_Handle_t* pSPIHandler) {


}

/*****************************************************
 * @fn					- GPIO_PeriClkCtrl
 *
 * @brief				- Enable or disable the GPIOx clock peripherals
 *
 * @param[in]			- GPIO_Reg_t* pGPIOx: Base address of the GPIO port
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void SPI_DeInit(SPI_Reg_t* pSPIx);

/*****************************************************
 * @fn					- GPIO_PeriClkCtrl
 *
 * @brief				- Enable or disable the GPIOx clock peripherals
 *
 * @param[in]			- GPIO_Reg_t* pGPIOx: Base address of the GPIO port
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void SPI_SendData(SPI_Reg_t* pSPIx, uint8_t* pTxBuffer, uint32_t len); //Note: it is a standard practice to define len as uint32_t

/*****************************************************
 * @fn					- GPIO_PeriClkCtrl
 *
 * @brief				- Enable or disable the GPIOx clock peripherals
 *
 * @param[in]			- GPIO_Reg_t* pGPIOx: Base address of the GPIO port
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void SPI_ReceiveData(SPI_Reg_t* pSPIx, uint8_t* pRxBuffer, uint32_t len);


/*****************************************************
 * @fn					- GPIO_PeriClkCtrl
 *
 * @brief				- Enable or disable the GPIOx clock peripherals
 *
 * @param[in]			- GPIO_Reg_t* pGPIOx: Base address of the GPIO port
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void SPI_IRQITConfig(uint8_t IRQNumber, uint8_t EnOrDi);

/*****************************************************
 * @fn					- GPIO_PeriClkCtrl
 *
 * @brief				- Enable or disable the GPIOx clock peripherals
 *
 * @param[in]			- GPIO_Reg_t* pGPIOx: Base address of the GPIO port
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriorityValue);

/*****************************************************
 * @fn					- GPIO_PeriClkCtrl
 *
 * @brief				- Enable or disable the GPIOx clock peripherals
 *
 * @param[in]			- GPIO_Reg_t* pGPIOx: Base address of the GPIO port
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void SPI_IRQHandling(SPI_Handle_t* pSPIHandler);

