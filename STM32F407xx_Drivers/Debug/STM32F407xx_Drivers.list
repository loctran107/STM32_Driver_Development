
STM32F407xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006a8  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000850  08000858  00010858  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000850  08000850  00010858  2**0
                  CONTENTS
  4 .ARM          00000000  08000850  08000850  00010858  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000850  08000858  00010858  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000850  08000850  00010850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000854  08000854  00010854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010858  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000858  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000858  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010858  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019b6  00000000  00000000  00010888  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000416  00000000  00000000  0001223e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000d0  00000000  00000000  00012658  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a8  00000000  00000000  00012728  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001e3f  00000000  00000000  000127d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000ded  00000000  00000000  0001460f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009199  00000000  00000000  000153fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001e595  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000029c  00000000  00000000  0001e610  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000838 	.word	0x08000838

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000838 	.word	0x08000838

080001e8 <delay>:
  ******************************************************************************
*/

#include "../drivers/Inc/gpio_driver.h"

void delay() {
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 1000000 / 4; i++);
 80001ee:	2300      	movs	r3, #0
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	e002      	b.n	80001fa <delay+0x12>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3301      	adds	r3, #1
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <delay+0x28>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d9f8      	bls.n	80001f4 <delay+0xc>
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	0003d08f 	.word	0x0003d08f

08000214 <LEDEnable>:

void LEDEnable(GPIO_Handle_t* GPIO_LED) {
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
	//Enable the LED
	//GPIO_Handle_t GPIO_LED;
	GPIO_LED->pGPIOx = GPIOD;
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4a0c      	ldr	r2, [pc, #48]	; (8000250 <LEDEnable+0x3c>)
 8000220:	601a      	str	r2, [r3, #0]
	GPIO_LED->GPIOx_PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2204      	movs	r2, #4
 8000226:	605a      	str	r2, [r3, #4]
	GPIO_LED->GPIOx_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2202      	movs	r2, #2
 800022c:	60da      	str	r2, [r3, #12]
	GPIO_LED->GPIOx_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PU_PD;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	2200      	movs	r2, #0
 8000232:	611a      	str	r2, [r3, #16]
	GPIO_LED->GPIOx_PinConfig.GPIO_PinMode = GPIO_OUTPUT_MODE;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2201      	movs	r2, #1
 8000238:	609a      	str	r2, [r3, #8]
	GPIO_LED->GPIOx_PinConfig.GPIO_PinOPType = GPIO_PUSH_PULL;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	2200      	movs	r2, #0
 800023e:	615a      	str	r2, [r3, #20]
	GPIO_Init(GPIO_LED);
 8000240:	6878      	ldr	r0, [r7, #4]
 8000242:	f000 f97f 	bl	8000544 <GPIO_Init>
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40020c00 	.word	0x40020c00

08000254 <ButtonEnable>:

void ButtonEnable(GPIO_Handle_t* GPIO_Button) {
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	//Enable the Button
	//GPIO_Handle_t GPIO_Button;
	GPIO_Button->pGPIOx = GPIOD;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	4a09      	ldr	r2, [pc, #36]	; (8000284 <ButtonEnable+0x30>)
 8000260:	601a      	str	r2, [r3, #0]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2210      	movs	r2, #16
 8000266:	605a      	str	r2, [r3, #4]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PU_PD;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2200      	movs	r2, #0
 800026c:	611a      	str	r2, [r3, #16]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinMode = GPIO_INPUT_MODE;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	2200      	movs	r2, #0
 8000272:	609a      	str	r2, [r3, #8]
	GPIO_Init(GPIO_Button);
 8000274:	6878      	ldr	r0, [r7, #4]
 8000276:	f000 f965 	bl	8000544 <GPIO_Init>
}
 800027a:	bf00      	nop
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	40020c00 	.word	0x40020c00

08000288 <main>:
/*
 * Write the program that handles the on board LED using on board
 * button
 */
int main(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b08e      	sub	sp, #56	; 0x38
 800028c:	af00      	add	r7, sp, #0
	//Setting up the on board LED configuration

	//Enable the GPIO peripheral clock for on board LED and button
	GPIO_PeriClkCtrl(GPIOD, ENABLE);
 800028e:	2101      	movs	r1, #1
 8000290:	480f      	ldr	r0, [pc, #60]	; (80002d0 <main+0x48>)
 8000292:	f000 f849 	bl	8000328 <GPIO_PeriClkCtrl>
	//GPIO_PeriClkCtrl(GPIOA, ENABLE);

	//On-board hardware enable
	GPIO_Handle_t GPIO_LED, GPIO_Button;
	LEDEnable(&GPIO_LED);
 8000296:	f107 031c 	add.w	r3, r7, #28
 800029a:	4618      	mov	r0, r3
 800029c:	f7ff ffba 	bl	8000214 <LEDEnable>
	ButtonEnable(&GPIO_Button);
 80002a0:	463b      	mov	r3, r7
 80002a2:	4618      	mov	r0, r3
 80002a4:	f7ff ffd6 	bl	8000254 <ButtonEnable>

	//handle the LED pressing application
	while (1) {
		if (GPIO_ReadFromInputPin(GPIO_Button.pGPIOx, GPIO_Button.GPIOx_PinConfig.GPIO_PinNumber) == BUTTON_PRESSED) {
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	b292      	uxth	r2, r2
 80002ae:	4611      	mov	r1, r2
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 fa6d 	bl	8000790 <GPIO_ReadFromInputPin>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d1f5      	bne.n	80002a8 <main+0x20>
			delay();
 80002bc:	f7ff ff94 	bl	80001e8 <delay>
			//GPIO_WriteToOutputPin(GPIOD, GPIO_LED.GPIOx_PinConfig.GPIO_PinNumber, 1);
			GPIO_ToggleOutputPin(GPIO_LED.pGPIOx, GPIO_LED.GPIOx_PinConfig.GPIO_PinNumber);
 80002c0:	69fb      	ldr	r3, [r7, #28]
 80002c2:	6a3a      	ldr	r2, [r7, #32]
 80002c4:	4611      	mov	r1, r2
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 fa78 	bl	80007bc <GPIO_ToggleOutputPin>
		if (GPIO_ReadFromInputPin(GPIO_Button.pGPIOx, GPIO_Button.GPIOx_PinConfig.GPIO_PinNumber) == BUTTON_PRESSED) {
 80002cc:	e7ec      	b.n	80002a8 <main+0x20>
 80002ce:	bf00      	nop
 80002d0:	40020c00 	.word	0x40020c00

080002d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d4:	480d      	ldr	r0, [pc, #52]	; (800030c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d8:	480d      	ldr	r0, [pc, #52]	; (8000310 <LoopForever+0x6>)
  ldr r1, =_edata
 80002da:	490e      	ldr	r1, [pc, #56]	; (8000314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002dc:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <LoopForever+0xe>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0b      	ldr	r2, [pc, #44]	; (800031c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f0:	4c0b      	ldr	r4, [pc, #44]	; (8000320 <LoopForever+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002fe:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000302:	f000 fa75 	bl	80007f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000306:	f7ff ffbf 	bl	8000288 <main>

0800030a <LoopForever>:

LoopForever:
    b LoopForever
 800030a:	e7fe      	b.n	800030a <LoopForever>
  ldr   r0, =_estack
 800030c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000314:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000318:	08000858 	.word	0x08000858
  ldr r2, =_sbss
 800031c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000320:	2000001c 	.word	0x2000001c

08000324 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000324:	e7fe      	b.n	8000324 <ADC_IRQHandler>
	...

08000328 <GPIO_PeriClkCtrl>:
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void GPIO_PeriClkCtrl(GPIO_Reg_t* pGPIOx, uint8_t EnOrDi) {
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	460b      	mov	r3, r1
 8000332:	70fb      	strb	r3, [r7, #3]

	//Enable or disable the GPIO clock peripherals
	if (EnOrDi) {
 8000334:	78fb      	ldrb	r3, [r7, #3]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d074      	beq.n	8000424 <GPIO_PeriClkCtrl+0xfc>
		//Special note: switch cannot be used for pointer, only integer
		GPIO_PCLK_EN(pGPIOx);
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a76      	ldr	r2, [pc, #472]	; (8000518 <GPIO_PeriClkCtrl+0x1f0>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d106      	bne.n	8000350 <GPIO_PeriClkCtrl+0x28>
 8000342:	4b76      	ldr	r3, [pc, #472]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 8000344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000346:	4a75      	ldr	r2, [pc, #468]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	6313      	str	r3, [r2, #48]	; 0x30
	} else {
		GPIO_PCLK_DI(pGPIOx);
	}
}
 800034e:	e0dd      	b.n	800050c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a73      	ldr	r2, [pc, #460]	; (8000520 <GPIO_PeriClkCtrl+0x1f8>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d106      	bne.n	8000366 <GPIO_PeriClkCtrl+0x3e>
 8000358:	4b70      	ldr	r3, [pc, #448]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 800035a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035c:	4a6f      	ldr	r2, [pc, #444]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 800035e:	f043 0302 	orr.w	r3, r3, #2
 8000362:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000364:	e0d2      	b.n	800050c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a6e      	ldr	r2, [pc, #440]	; (8000524 <GPIO_PeriClkCtrl+0x1fc>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d106      	bne.n	800037c <GPIO_PeriClkCtrl+0x54>
 800036e:	4b6b      	ldr	r3, [pc, #428]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 8000370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000372:	4a6a      	ldr	r2, [pc, #424]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 8000374:	f043 0304 	orr.w	r3, r3, #4
 8000378:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037a:	e0c7      	b.n	800050c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a6a      	ldr	r2, [pc, #424]	; (8000528 <GPIO_PeriClkCtrl+0x200>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d106      	bne.n	8000392 <GPIO_PeriClkCtrl+0x6a>
 8000384:	4b65      	ldr	r3, [pc, #404]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000388:	4a64      	ldr	r2, [pc, #400]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 800038a:	f043 0308 	orr.w	r3, r3, #8
 800038e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000390:	e0bc      	b.n	800050c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a65      	ldr	r2, [pc, #404]	; (800052c <GPIO_PeriClkCtrl+0x204>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d106      	bne.n	80003a8 <GPIO_PeriClkCtrl+0x80>
 800039a:	4b60      	ldr	r3, [pc, #384]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039e:	4a5f      	ldr	r2, [pc, #380]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 80003a0:	f043 0310 	orr.w	r3, r3, #16
 80003a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a6:	e0b1      	b.n	800050c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a61      	ldr	r2, [pc, #388]	; (8000530 <GPIO_PeriClkCtrl+0x208>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d106      	bne.n	80003be <GPIO_PeriClkCtrl+0x96>
 80003b0:	4b5a      	ldr	r3, [pc, #360]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b4:	4a59      	ldr	r2, [pc, #356]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 80003b6:	f043 0320 	orr.w	r3, r3, #32
 80003ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003bc:	e0a6      	b.n	800050c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a5c      	ldr	r2, [pc, #368]	; (8000534 <GPIO_PeriClkCtrl+0x20c>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d106      	bne.n	80003d4 <GPIO_PeriClkCtrl+0xac>
 80003c6:	4b55      	ldr	r3, [pc, #340]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ca:	4a54      	ldr	r2, [pc, #336]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 80003cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d2:	e09b      	b.n	800050c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a58      	ldr	r2, [pc, #352]	; (8000538 <GPIO_PeriClkCtrl+0x210>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <GPIO_PeriClkCtrl+0xc2>
 80003dc:	4b4f      	ldr	r3, [pc, #316]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 80003de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e0:	4a4e      	ldr	r2, [pc, #312]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 80003e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e8:	e090      	b.n	800050c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a53      	ldr	r2, [pc, #332]	; (800053c <GPIO_PeriClkCtrl+0x214>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <GPIO_PeriClkCtrl+0xd8>
 80003f2:	4b4a      	ldr	r3, [pc, #296]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 80003f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f6:	4a49      	ldr	r2, [pc, #292]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 80003f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fe:	e085      	b.n	800050c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a4f      	ldr	r2, [pc, #316]	; (8000540 <GPIO_PeriClkCtrl+0x218>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d106      	bne.n	8000416 <GPIO_PeriClkCtrl+0xee>
 8000408:	4b44      	ldr	r3, [pc, #272]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040c:	4a43      	ldr	r2, [pc, #268]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 800040e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000412:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000414:	e07a      	b.n	800050c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000416:	4b41      	ldr	r3, [pc, #260]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 8000418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041a:	4a40      	ldr	r2, [pc, #256]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 800041c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000420:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000422:	e073      	b.n	800050c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	4a3c      	ldr	r2, [pc, #240]	; (8000518 <GPIO_PeriClkCtrl+0x1f0>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d106      	bne.n	800043a <GPIO_PeriClkCtrl+0x112>
 800042c:	4b3b      	ldr	r3, [pc, #236]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 800042e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000430:	4a3a      	ldr	r2, [pc, #232]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 8000432:	f023 0301 	bic.w	r3, r3, #1
 8000436:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000438:	e068      	b.n	800050c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4a38      	ldr	r2, [pc, #224]	; (8000520 <GPIO_PeriClkCtrl+0x1f8>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d106      	bne.n	8000450 <GPIO_PeriClkCtrl+0x128>
 8000442:	4b36      	ldr	r3, [pc, #216]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	4a35      	ldr	r2, [pc, #212]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 8000448:	f023 0302 	bic.w	r3, r3, #2
 800044c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044e:	e05d      	b.n	800050c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a34      	ldr	r2, [pc, #208]	; (8000524 <GPIO_PeriClkCtrl+0x1fc>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d106      	bne.n	8000466 <GPIO_PeriClkCtrl+0x13e>
 8000458:	4b30      	ldr	r3, [pc, #192]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 800045a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045c:	4a2f      	ldr	r2, [pc, #188]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 800045e:	f023 0304 	bic.w	r3, r3, #4
 8000462:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000464:	e052      	b.n	800050c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a2f      	ldr	r2, [pc, #188]	; (8000528 <GPIO_PeriClkCtrl+0x200>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d106      	bne.n	800047c <GPIO_PeriClkCtrl+0x154>
 800046e:	4b2b      	ldr	r3, [pc, #172]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000472:	4a2a      	ldr	r2, [pc, #168]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 8000474:	f023 0308 	bic.w	r3, r3, #8
 8000478:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047a:	e047      	b.n	800050c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a2b      	ldr	r2, [pc, #172]	; (800052c <GPIO_PeriClkCtrl+0x204>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d106      	bne.n	8000492 <GPIO_PeriClkCtrl+0x16a>
 8000484:	4b25      	ldr	r3, [pc, #148]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 8000486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000488:	4a24      	ldr	r2, [pc, #144]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 800048a:	f023 0310 	bic.w	r3, r3, #16
 800048e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000490:	e03c      	b.n	800050c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4a26      	ldr	r2, [pc, #152]	; (8000530 <GPIO_PeriClkCtrl+0x208>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d106      	bne.n	80004a8 <GPIO_PeriClkCtrl+0x180>
 800049a:	4b20      	ldr	r3, [pc, #128]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 800049c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049e:	4a1f      	ldr	r2, [pc, #124]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 80004a0:	f023 0320 	bic.w	r3, r3, #32
 80004a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a6:	e031      	b.n	800050c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a22      	ldr	r2, [pc, #136]	; (8000534 <GPIO_PeriClkCtrl+0x20c>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d106      	bne.n	80004be <GPIO_PeriClkCtrl+0x196>
 80004b0:	4b1a      	ldr	r3, [pc, #104]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 80004b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b4:	4a19      	ldr	r2, [pc, #100]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 80004b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004bc:	e026      	b.n	800050c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4a1d      	ldr	r2, [pc, #116]	; (8000538 <GPIO_PeriClkCtrl+0x210>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d106      	bne.n	80004d4 <GPIO_PeriClkCtrl+0x1ac>
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 80004c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ca:	4a14      	ldr	r2, [pc, #80]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 80004cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d2:	e01b      	b.n	800050c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a19      	ldr	r2, [pc, #100]	; (800053c <GPIO_PeriClkCtrl+0x214>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d106      	bne.n	80004ea <GPIO_PeriClkCtrl+0x1c2>
 80004dc:	4b0f      	ldr	r3, [pc, #60]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 80004de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e0:	4a0e      	ldr	r2, [pc, #56]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 80004e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004e8:	e010      	b.n	800050c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4a14      	ldr	r2, [pc, #80]	; (8000540 <GPIO_PeriClkCtrl+0x218>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d106      	bne.n	8000500 <GPIO_PeriClkCtrl+0x1d8>
 80004f2:	4b0a      	ldr	r3, [pc, #40]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a09      	ldr	r2, [pc, #36]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 80004f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004fe:	e005      	b.n	800050c <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 8000502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000504:	4a05      	ldr	r2, [pc, #20]	; (800051c <GPIO_PeriClkCtrl+0x1f4>)
 8000506:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800050a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	40020000 	.word	0x40020000
 800051c:	40023800 	.word	0x40023800
 8000520:	40020400 	.word	0x40020400
 8000524:	40020800 	.word	0x40020800
 8000528:	40020c00 	.word	0x40020c00
 800052c:	40020100 	.word	0x40020100
 8000530:	40021400 	.word	0x40021400
 8000534:	40021800 	.word	0x40021800
 8000538:	40021c00 	.word	0x40021c00
 800053c:	40022000 	.word	0x40022000
 8000540:	40022400 	.word	0x40022400

08000544 <GPIO_Init>:
 * @param[in]			-
 *
 * @return				- none
 * @note				- none
 */
void GPIO_Init(GPIO_Handle_t* pGPIOHandler) {
 8000544:	b4b0      	push	{r4, r5, r7}
 8000546:	b08b      	sub	sp, #44	; 0x2c
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	//uint32_t temp;
	GPIO_Reg_t* GPIOx = pGPIOHandler->pGPIOx;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	623b      	str	r3, [r7, #32]
	GPIO_PinConfig_t GPIOx_PinConf = pGPIOHandler->GPIOx_PinConfig;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	f107 0408 	add.w	r4, r7, #8
 8000558:	1d1d      	adds	r5, r3, #4
 800055a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000562:	e884 0003 	stmia.w	r4, {r0, r1}

	/*Note: before setting the bits: make sure those registers are clear */
	//Clearing the registers
	//Setting the bits register
	for (uint16_t i = 0U; i < GPIO_PIN_NUMBER; i++) {
 8000566:	2300      	movs	r3, #0
 8000568:	84fb      	strh	r3, [r7, #38]	; 0x26
 800056a:	e0f1      	b.n	8000750 <GPIO_Init+0x20c>

		//Check if the ith bit is set
		if (GPIOx_PinConf.GPIO_PinNumber & (1 << i)) {
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000570:	2101      	movs	r1, #1
 8000572:	fa01 f202 	lsl.w	r2, r1, r2
 8000576:	4013      	ands	r3, r2
 8000578:	2b00      	cmp	r3, #0
 800057a:	f000 80e6 	beq.w	800074a <GPIO_Init+0x206>

			//Handle the non-interrupt case ifG the ith bit is set
			if (GPIOx_PinConf.GPIO_PinMode <= GPIO_ANALOG_MODE) {
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	2b03      	cmp	r3, #3
 8000582:	d847      	bhi.n	8000614 <GPIO_Init+0xd0>

				//Handle the GPIO pin OUTPUT Mode
				if (GPIOx_PinConf.GPIO_PinMode == GPIO_OUTPUT_MODE) {
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d112      	bne.n	80005b0 <GPIO_Init+0x6c>

					//Configure the OTYPER register
					GPIOx->OTYPER |= (GPIOx_PinConf.GPIO_PinOPType << i);
 800058a:	6a3b      	ldr	r3, [r7, #32]
 800058c:	685a      	ldr	r2, [r3, #4]
 800058e:	69b9      	ldr	r1, [r7, #24]
 8000590:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000592:	fa01 f303 	lsl.w	r3, r1, r3
 8000596:	431a      	orrs	r2, r3
 8000598:	6a3b      	ldr	r3, [r7, #32]
 800059a:	605a      	str	r2, [r3, #4]

					//Configure the OSPEED register
					GPIOx->OSPEEDR |= (GPIOx_PinConf.GPIO_PinSpeed << i * 2U);
 800059c:	6a3b      	ldr	r3, [r7, #32]
 800059e:	689a      	ldr	r2, [r3, #8]
 80005a0:	6939      	ldr	r1, [r7, #16]
 80005a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	fa01 f303 	lsl.w	r3, r1, r3
 80005aa:	431a      	orrs	r2, r3
 80005ac:	6a3b      	ldr	r3, [r7, #32]
 80005ae:	609a      	str	r2, [r3, #8]
				}

				if (GPIOx_PinConf.GPIO_PinMode == GPIO_ALT_FUNC_MODE) {
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d119      	bne.n	80005ea <GPIO_Init+0xa6>

					//Handle the alternate function mode register
					if (i < (GPIO_PIN_NUMBER / 2)) {
 80005b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005b8:	2b07      	cmp	r3, #7
 80005ba:	d80a      	bhi.n	80005d2 <GPIO_Init+0x8e>
						GPIOx->AFR[0] |= (GPIOx_PinConf.GPIO_PinAltFuncMode << i * 4U);
 80005bc:	6a3b      	ldr	r3, [r7, #32]
 80005be:	6a1a      	ldr	r2, [r3, #32]
 80005c0:	69f9      	ldr	r1, [r7, #28]
 80005c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ca:	431a      	orrs	r2, r3
 80005cc:	6a3b      	ldr	r3, [r7, #32]
 80005ce:	621a      	str	r2, [r3, #32]
 80005d0:	e00b      	b.n	80005ea <GPIO_Init+0xa6>
					} else {
						GPIOx->AFR[1] |= (GPIOx_PinConf.GPIO_PinAltFuncMode << (i % (GPIO_PIN_NUMBER / 2)) * 4U);
 80005d2:	6a3b      	ldr	r3, [r7, #32]
 80005d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005d6:	69f9      	ldr	r1, [r7, #28]
 80005d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005da:	f003 0307 	and.w	r3, r3, #7
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	fa01 f303 	lsl.w	r3, r1, r3
 80005e4:	431a      	orrs	r2, r3
 80005e6:	6a3b      	ldr	r3, [r7, #32]
 80005e8:	625a      	str	r2, [r3, #36]	; 0x24
					}
				}

				//Handle the MODER register
				GPIOx->MODER |= (GPIOx_PinConf.GPIO_PinMode << i * 2U);
 80005ea:	6a3b      	ldr	r3, [r7, #32]
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	68f9      	ldr	r1, [r7, #12]
 80005f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	fa01 f303 	lsl.w	r3, r1, r3
 80005f8:	431a      	orrs	r2, r3
 80005fa:	6a3b      	ldr	r3, [r7, #32]
 80005fc:	601a      	str	r2, [r3, #0]

				//Handle the PuPdCtrl Register
				GPIOx->PUPDR |= (GPIOx_PinConf.GPIO_PinPuPdCtrl << i * 2U);
 80005fe:	6a3b      	ldr	r3, [r7, #32]
 8000600:	68da      	ldr	r2, [r3, #12]
 8000602:	6979      	ldr	r1, [r7, #20]
 8000604:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	fa01 f303 	lsl.w	r3, r1, r3
 800060c:	431a      	orrs	r2, r3
 800060e:	6a3b      	ldr	r3, [r7, #32]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	e09a      	b.n	800074a <GPIO_Init+0x206>

			} else {

				//Enable the clock for SYSCFG registers
				SYSCFG_PCLK_EN();
 8000614:	4b53      	ldr	r3, [pc, #332]	; (8000764 <GPIO_Init+0x220>)
 8000616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000618:	4a52      	ldr	r2, [pc, #328]	; (8000764 <GPIO_Init+0x220>)
 800061a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061e:	6453      	str	r3, [r2, #68]	; 0x44

				//Handling the falling edge cases
				if (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_FT_MODE) {
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2b04      	cmp	r3, #4
 8000624:	d115      	bne.n	8000652 <GPIO_Init+0x10e>
					//Configure the FTSR
					EXTI->FTSR |= (1 << i);
 8000626:	4b50      	ldr	r3, [pc, #320]	; (8000768 <GPIO_Init+0x224>)
 8000628:	68db      	ldr	r3, [r3, #12]
 800062a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800062c:	2101      	movs	r1, #1
 800062e:	fa01 f202 	lsl.w	r2, r1, r2
 8000632:	4611      	mov	r1, r2
 8000634:	4a4c      	ldr	r2, [pc, #304]	; (8000768 <GPIO_Init+0x224>)
 8000636:	430b      	orrs	r3, r1
 8000638:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~(1 << i); //Clear the corresponding RTSR bit
 800063a:	4b4b      	ldr	r3, [pc, #300]	; (8000768 <GPIO_Init+0x224>)
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000640:	2101      	movs	r1, #1
 8000642:	fa01 f202 	lsl.w	r2, r1, r2
 8000646:	43d2      	mvns	r2, r2
 8000648:	4611      	mov	r1, r2
 800064a:	4a47      	ldr	r2, [pc, #284]	; (8000768 <GPIO_Init+0x224>)
 800064c:	400b      	ands	r3, r1
 800064e:	6093      	str	r3, [r2, #8]
 8000650:	e02c      	b.n	80006ac <GPIO_Init+0x168>
				} else if (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RT_MODE) {
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	2b05      	cmp	r3, #5
 8000656:	d115      	bne.n	8000684 <GPIO_Init+0x140>
					//Configure the RTSR
					EXTI->RTSR |= (1 << i);
 8000658:	4b43      	ldr	r3, [pc, #268]	; (8000768 <GPIO_Init+0x224>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800065e:	2101      	movs	r1, #1
 8000660:	fa01 f202 	lsl.w	r2, r1, r2
 8000664:	4611      	mov	r1, r2
 8000666:	4a40      	ldr	r2, [pc, #256]	; (8000768 <GPIO_Init+0x224>)
 8000668:	430b      	orrs	r3, r1
 800066a:	6093      	str	r3, [r2, #8]
					EXTI->FTSR &= ~(1 << i); //Clear the corresponding FTSR bit
 800066c:	4b3e      	ldr	r3, [pc, #248]	; (8000768 <GPIO_Init+0x224>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000672:	2101      	movs	r1, #1
 8000674:	fa01 f202 	lsl.w	r2, r1, r2
 8000678:	43d2      	mvns	r2, r2
 800067a:	4611      	mov	r1, r2
 800067c:	4a3a      	ldr	r2, [pc, #232]	; (8000768 <GPIO_Init+0x224>)
 800067e:	400b      	ands	r3, r1
 8000680:	60d3      	str	r3, [r2, #12]
 8000682:	e013      	b.n	80006ac <GPIO_Init+0x168>
				}  else {
					//Configure both the FTSR and RTSR
					EXTI->FTSR |= (1 << i);
 8000684:	4b38      	ldr	r3, [pc, #224]	; (8000768 <GPIO_Init+0x224>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800068a:	2101      	movs	r1, #1
 800068c:	fa01 f202 	lsl.w	r2, r1, r2
 8000690:	4611      	mov	r1, r2
 8000692:	4a35      	ldr	r2, [pc, #212]	; (8000768 <GPIO_Init+0x224>)
 8000694:	430b      	orrs	r3, r1
 8000696:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR |= (1 << i);
 8000698:	4b33      	ldr	r3, [pc, #204]	; (8000768 <GPIO_Init+0x224>)
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800069e:	2101      	movs	r1, #1
 80006a0:	fa01 f202 	lsl.w	r2, r1, r2
 80006a4:	4611      	mov	r1, r2
 80006a6:	4a30      	ldr	r2, [pc, #192]	; (8000768 <GPIO_Init+0x224>)
 80006a8:	430b      	orrs	r3, r1
 80006aa:	6093      	str	r3, [r2, #8]
				//Configure the GPIO port selection in SYSCFG_EXTICR
				//Rule: int quotient = n >> z
				//		int remainder = n & (~(~(int) 0) << z)
				//In this case, since we always want z = 2, as we divide by 4,
				//the term ~(~(int) 0) << z) = 0x03U
				SYSCFG->EXTICR[i >> 2U] |= GPIO_PORT_INDEX(GPIOx) << ((i & 0x03U) * 4U);
 80006ac:	4a2f      	ldr	r2, [pc, #188]	; (800076c <GPIO_Init+0x228>)
 80006ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006b0:	089b      	lsrs	r3, r3, #2
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	3302      	adds	r3, #2
 80006b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006ba:	6a3b      	ldr	r3, [r7, #32]
 80006bc:	492c      	ldr	r1, [pc, #176]	; (8000770 <GPIO_Init+0x22c>)
 80006be:	428b      	cmp	r3, r1
 80006c0:	d02b      	beq.n	800071a <GPIO_Init+0x1d6>
 80006c2:	6a3b      	ldr	r3, [r7, #32]
 80006c4:	492b      	ldr	r1, [pc, #172]	; (8000774 <GPIO_Init+0x230>)
 80006c6:	428b      	cmp	r3, r1
 80006c8:	d025      	beq.n	8000716 <GPIO_Init+0x1d2>
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	492a      	ldr	r1, [pc, #168]	; (8000778 <GPIO_Init+0x234>)
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d01f      	beq.n	8000712 <GPIO_Init+0x1ce>
 80006d2:	6a3b      	ldr	r3, [r7, #32]
 80006d4:	4929      	ldr	r1, [pc, #164]	; (800077c <GPIO_Init+0x238>)
 80006d6:	428b      	cmp	r3, r1
 80006d8:	d019      	beq.n	800070e <GPIO_Init+0x1ca>
 80006da:	6a3b      	ldr	r3, [r7, #32]
 80006dc:	4928      	ldr	r1, [pc, #160]	; (8000780 <GPIO_Init+0x23c>)
 80006de:	428b      	cmp	r3, r1
 80006e0:	d013      	beq.n	800070a <GPIO_Init+0x1c6>
 80006e2:	6a3b      	ldr	r3, [r7, #32]
 80006e4:	4927      	ldr	r1, [pc, #156]	; (8000784 <GPIO_Init+0x240>)
 80006e6:	428b      	cmp	r3, r1
 80006e8:	d00d      	beq.n	8000706 <GPIO_Init+0x1c2>
 80006ea:	6a3b      	ldr	r3, [r7, #32]
 80006ec:	4926      	ldr	r1, [pc, #152]	; (8000788 <GPIO_Init+0x244>)
 80006ee:	428b      	cmp	r3, r1
 80006f0:	d007      	beq.n	8000702 <GPIO_Init+0x1be>
 80006f2:	6a3b      	ldr	r3, [r7, #32]
 80006f4:	4925      	ldr	r1, [pc, #148]	; (800078c <GPIO_Init+0x248>)
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d101      	bne.n	80006fe <GPIO_Init+0x1ba>
 80006fa:	2307      	movs	r3, #7
 80006fc:	e00e      	b.n	800071c <GPIO_Init+0x1d8>
 80006fe:	2308      	movs	r3, #8
 8000700:	e00c      	b.n	800071c <GPIO_Init+0x1d8>
 8000702:	2306      	movs	r3, #6
 8000704:	e00a      	b.n	800071c <GPIO_Init+0x1d8>
 8000706:	2305      	movs	r3, #5
 8000708:	e008      	b.n	800071c <GPIO_Init+0x1d8>
 800070a:	2304      	movs	r3, #4
 800070c:	e006      	b.n	800071c <GPIO_Init+0x1d8>
 800070e:	2303      	movs	r3, #3
 8000710:	e004      	b.n	800071c <GPIO_Init+0x1d8>
 8000712:	2302      	movs	r3, #2
 8000714:	e002      	b.n	800071c <GPIO_Init+0x1d8>
 8000716:	2301      	movs	r3, #1
 8000718:	e000      	b.n	800071c <GPIO_Init+0x1d8>
 800071a:	2300      	movs	r3, #0
 800071c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800071e:	f001 0103 	and.w	r1, r1, #3
 8000722:	0089      	lsls	r1, r1, #2
 8000724:	408b      	lsls	r3, r1
 8000726:	4811      	ldr	r0, [pc, #68]	; (800076c <GPIO_Init+0x228>)
 8000728:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800072a:	0889      	lsrs	r1, r1, #2
 800072c:	b289      	uxth	r1, r1
 800072e:	431a      	orrs	r2, r3
 8000730:	1c8b      	adds	r3, r1, #2
 8000732:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

				//Enable the EXTI interrupt delivery using IMR
				EXTI->IMR |= (1 << i);
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <GPIO_Init+0x224>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800073c:	2101      	movs	r1, #1
 800073e:	fa01 f202 	lsl.w	r2, r1, r2
 8000742:	4611      	mov	r1, r2
 8000744:	4a08      	ldr	r2, [pc, #32]	; (8000768 <GPIO_Init+0x224>)
 8000746:	430b      	orrs	r3, r1
 8000748:	6013      	str	r3, [r2, #0]
	for (uint16_t i = 0U; i < GPIO_PIN_NUMBER; i++) {
 800074a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800074c:	3301      	adds	r3, #1
 800074e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000750:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000752:	2b0f      	cmp	r3, #15
 8000754:	f67f af0a 	bls.w	800056c <GPIO_Init+0x28>

			}
		}
	}
}
 8000758:	bf00      	nop
 800075a:	372c      	adds	r7, #44	; 0x2c
 800075c:	46bd      	mov	sp, r7
 800075e:	bcb0      	pop	{r4, r5, r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40013c00 	.word	0x40013c00
 800076c:	40013800 	.word	0x40013800
 8000770:	40020000 	.word	0x40020000
 8000774:	40020400 	.word	0x40020400
 8000778:	40020800 	.word	0x40020800
 800077c:	40020c00 	.word	0x40020c00
 8000780:	40020100 	.word	0x40020100
 8000784:	40021400 	.word	0x40021400
 8000788:	40021800 	.word	0x40021800
 800078c:	40021c00 	.word	0x40021c00

08000790 <GPIO_ReadFromInputPin>:
 * @param[in]			- The pin number
 *
 * @return				- unsigned 8 bit integer
 * @note				- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_Reg_t* pGPIOx, uint16_t pinNumber) {
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	460b      	mov	r3, r1
 800079a:	807b      	strh	r3, [r7, #2]
	//value = (uint8_t) ((pGPIOx->IDR & (1 << pinNumber)) >> pinNumber);
	/*or value = (uint8_t) ((pGPIOx->IDR >> pinNumber) & 0x1);*/
	return ((pGPIOx->IDR & pinNumber) == pinNumber) ? 1 : 0;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	691a      	ldr	r2, [r3, #16]
 80007a0:	887b      	ldrh	r3, [r7, #2]
 80007a2:	401a      	ands	r2, r3
 80007a4:	887b      	ldrh	r3, [r7, #2]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	bf0c      	ite	eq
 80007aa:	2301      	moveq	r3, #1
 80007ac:	2300      	movne	r3, #0
 80007ae:	b2db      	uxtb	r3, r3
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <GPIO_ToggleOutputPin>:
 * @param[in]			- unsigned 8 bit integer pin number
 *
 * @return				- none
 * @note				- none
 */
void GPIO_ToggleOutputPin(GPIO_Reg_t* pGPIOx, uint32_t pinNumber) {
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
	 * Second: Use BSRR register and check if the ODR is currently on or off at
	 * 		   the corresponding pin
	 */

	/*Second method*/
	if ((pGPIOx->ODR & pinNumber) == pinNumber) { //all the bits at pinNumber are set
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	695a      	ldr	r2, [r3, #20]
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	4013      	ands	r3, r2
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d104      	bne.n	80007de <GPIO_ToggleOutputPin+0x22>
		pGPIOx->BSRR = (pinNumber << GPIO_PIN_NUMBER);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	041a      	lsls	r2, r3, #16
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	619a      	str	r2, [r3, #24]
	} else {
		pGPIOx->BSRR = pinNumber;
	}

}
 80007dc:	e002      	b.n	80007e4 <GPIO_ToggleOutputPin+0x28>
		pGPIOx->BSRR = pinNumber;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	683a      	ldr	r2, [r7, #0]
 80007e2:	619a      	str	r2, [r3, #24]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <__libc_init_array>:
 80007f0:	b570      	push	{r4, r5, r6, lr}
 80007f2:	4e0d      	ldr	r6, [pc, #52]	; (8000828 <__libc_init_array+0x38>)
 80007f4:	4c0d      	ldr	r4, [pc, #52]	; (800082c <__libc_init_array+0x3c>)
 80007f6:	1ba4      	subs	r4, r4, r6
 80007f8:	10a4      	asrs	r4, r4, #2
 80007fa:	2500      	movs	r5, #0
 80007fc:	42a5      	cmp	r5, r4
 80007fe:	d109      	bne.n	8000814 <__libc_init_array+0x24>
 8000800:	4e0b      	ldr	r6, [pc, #44]	; (8000830 <__libc_init_array+0x40>)
 8000802:	4c0c      	ldr	r4, [pc, #48]	; (8000834 <__libc_init_array+0x44>)
 8000804:	f000 f818 	bl	8000838 <_init>
 8000808:	1ba4      	subs	r4, r4, r6
 800080a:	10a4      	asrs	r4, r4, #2
 800080c:	2500      	movs	r5, #0
 800080e:	42a5      	cmp	r5, r4
 8000810:	d105      	bne.n	800081e <__libc_init_array+0x2e>
 8000812:	bd70      	pop	{r4, r5, r6, pc}
 8000814:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000818:	4798      	blx	r3
 800081a:	3501      	adds	r5, #1
 800081c:	e7ee      	b.n	80007fc <__libc_init_array+0xc>
 800081e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000822:	4798      	blx	r3
 8000824:	3501      	adds	r5, #1
 8000826:	e7f2      	b.n	800080e <__libc_init_array+0x1e>
 8000828:	08000850 	.word	0x08000850
 800082c:	08000850 	.word	0x08000850
 8000830:	08000850 	.word	0x08000850
 8000834:	08000854 	.word	0x08000854

08000838 <_init>:
 8000838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800083a:	bf00      	nop
 800083c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800083e:	bc08      	pop	{r3}
 8000840:	469e      	mov	lr, r3
 8000842:	4770      	bx	lr

08000844 <_fini>:
 8000844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000846:	bf00      	nop
 8000848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800084a:	bc08      	pop	{r3}
 800084c:	469e      	mov	lr, r3
 800084e:	4770      	bx	lr
