
STM32F407xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080021a0  080021a0  000121a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800225c  0800225c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800225c  0800225c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800225c  0800225c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800225c  0800225c  0001225c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002260  08002260  00012260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000064  080022c8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080022c8  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000043a0  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b12  00000000  00000000  00024434  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000250  00000000  00000000  00024f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001f8  00000000  00000000  00025198  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003818  00000000  00000000  00025390  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002549  00000000  00000000  00028ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c9cb  00000000  00000000  0002b0f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00037abc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f90  00000000  00000000  00037b38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002188 	.word	0x08002188

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08002188 	.word	0x08002188

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:

//some data
//Note: data should be less than 32 bytes in one transaction (a.k.a less than 32 characters)
uint8_t data[30] = " Testing I2C Master Tx\n";

int main() {
 8000290:	b580      	push	{r7, lr}
 8000292:	b09a      	sub	sp, #104	; 0x68
 8000294:	af00      	add	r7, sp, #0

	uint8_t dummy[30]; //dummy buffer
	//Define the handle structures
	GPIO_Handle_t GPIO_Button, I2C_GPIO;
	I2C_Handle_t  I2C_Handler;
	memset(&GPIO_Button, 0, sizeof(GPIO_Button));
 8000296:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800029a:	221c      	movs	r2, #28
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 f886 	bl	80013b0 <memset>
	memset(&I2C_GPIO, 0, sizeof(GPIO_Button));
 80002a4:	f107 0310 	add.w	r3, r7, #16
 80002a8:	221c      	movs	r2, #28
 80002aa:	2100      	movs	r1, #0
 80002ac:	4618      	mov	r0, r3
 80002ae:	f001 f87f 	bl	80013b0 <memset>
	memset(&I2C_Handler, 0, sizeof(GPIO_Button));
 80002b2:	f107 0308 	add.w	r3, r7, #8
 80002b6:	221c      	movs	r2, #28
 80002b8:	2100      	movs	r1, #0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 f878 	bl	80013b0 <memset>

	GPIO_ButtonInit(&GPIO_Button);
 80002c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 f851 	bl	800036c <GPIO_ButtonInit>
	GPIO_I2CInit(&I2C_GPIO);
 80002ca:	f107 0310 	add.w	r3, r7, #16
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 f86e 	bl	80003b0 <GPIO_I2CInit>
	I2C_HandlerInit(&I2C_Handler);
 80002d4:	f107 0308 	add.w	r3, r7, #8
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 f891 	bl	8000400 <I2C_HandlerInit>


	//Enable the I2C Peripheral enable
	I2C_PeripheralEnable(I2C_Handler.pI2Cx, ENABLE);
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	2101      	movs	r1, #1
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 fb52 	bl	800098c <I2C_PeripheralEnable>


	while (1) {
		while(!GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_0));
 80002e8:	bf00      	nop
 80002ea:	2101      	movs	r1, #1
 80002ec:	481d      	ldr	r0, [pc, #116]	; (8000364 <main+0xd4>)
 80002ee:	f001 f81f 	bl	8001330 <GPIO_ReadFromInputPin>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d0f8      	beq.n	80002ea <main+0x5a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80002f8:	f000 f8a4 	bl	8000444 <delay>

		//Send the command code to slave
		uint8_t command = COMMAND_REQUEST;
 80002fc:	2351      	movs	r3, #81	; 0x51
 80002fe:	71fb      	strb	r3, [r7, #7]
		I2C_MasterSendData(&I2C_Handler, &command, 1, SLAVE_ADDR);
 8000300:	1df9      	adds	r1, r7, #7
 8000302:	f107 0008 	add.w	r0, r7, #8
 8000306:	2368      	movs	r3, #104	; 0x68
 8000308:	2201      	movs	r2, #1
 800030a:	f000 fb5d 	bl	80009c8 <I2C_MasterSendData>

		delay();
 800030e:	f000 f899 	bl	8000444 <delay>

		//Read the length (1 byte) of the data from slave
		uint8_t len_data;
		I2C_MasterReceiveData(&I2C_Handler, &len_data, 1, SLAVE_ADDR);
 8000312:	1db9      	adds	r1, r7, #6
 8000314:	f107 0008 	add.w	r0, r7, #8
 8000318:	2368      	movs	r3, #104	; 0x68
 800031a:	2201      	movs	r2, #1
 800031c:	f000 fbbd 	bl	8000a9a <I2C_MasterReceiveData>

		//Master sends command code 0x52 to read complete data from slave
		command = COMMAND_READ_DATA;
 8000320:	2352      	movs	r3, #82	; 0x52
 8000322:	71fb      	strb	r3, [r7, #7]
		I2C_MasterSendData(&I2C_Handler, &command, 1, SLAVE_ADDR);
 8000324:	1df9      	adds	r1, r7, #7
 8000326:	f107 0008 	add.w	r0, r7, #8
 800032a:	2368      	movs	r3, #104	; 0x68
 800032c:	2201      	movs	r2, #1
 800032e:	f000 fb4b 	bl	80009c8 <I2C_MasterSendData>

		delay();
 8000332:	f000 f887 	bl	8000444 <delay>

		//Read the complete data from the slave
		I2C_MasterReceiveData(&I2C_Handler, dummy, sizeof(dummy), SLAVE_ADDR);
 8000336:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800033a:	f107 0008 	add.w	r0, r7, #8
 800033e:	2368      	movs	r3, #104	; 0x68
 8000340:	221e      	movs	r2, #30
 8000342:	f000 fbaa 	bl	8000a9a <I2C_MasterReceiveData>
		dummy[len_data] = '\0';
 8000346:	79bb      	ldrb	r3, [r7, #6]
 8000348:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800034c:	4413      	add	r3, r2
 800034e:	2200      	movs	r2, #0
 8000350:	f803 2c20 	strb.w	r2, [r3, #-32]
		printf("%s", dummy);
 8000354:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000358:	4619      	mov	r1, r3
 800035a:	4803      	ldr	r0, [pc, #12]	; (8000368 <main+0xd8>)
 800035c:	f001 f830 	bl	80013c0 <iprintf>
	while (1) {
 8000360:	e7c2      	b.n	80002e8 <main+0x58>
 8000362:	bf00      	nop
 8000364:	40020000 	.word	0x40020000
 8000368:	080021a0 	.word	0x080021a0

0800036c <GPIO_ButtonInit>:


	return EXIT_SUCCESS;
}

void GPIO_ButtonInit(GPIO_Handle_t* GPIO_Button) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	GPIO_Button->pGPIOx = GPIOA;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a0d      	ldr	r2, [pc, #52]	; (80003ac <GPIO_ButtonInit+0x40>)
 8000378:	601a      	str	r2, [r3, #0]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinMode = GPIO_INPUT_MODE;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2200      	movs	r2, #0
 800037e:	609a      	str	r2, [r3, #8]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2201      	movs	r2, #1
 8000384:	605a      	str	r2, [r3, #4]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PU_PD;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	2200      	movs	r2, #0
 800038a:	611a      	str	r2, [r3, #16]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2202      	movs	r2, #2
 8000390:	60da      	str	r2, [r3, #12]

	GPIO_DeInit(GPIO_Button->pGPIOx);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4618      	mov	r0, r3
 8000398:	f000 feee 	bl	8001178 <GPIO_DeInit>
	GPIO_Init(GPIO_Button);
 800039c:	6878      	ldr	r0, [r7, #4]
 800039e:	f000 fdbd 	bl	8000f1c <GPIO_Init>
}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40020000 	.word	0x40020000

080003b0 <GPIO_I2CInit>:

void GPIO_I2CInit(GPIO_Handle_t* I2C_GPIO) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	I2C_GPIO->pGPIOx = GPIOB;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a10      	ldr	r2, [pc, #64]	; (80003fc <GPIO_I2CInit+0x4c>)
 80003bc:	601a      	str	r2, [r3, #0]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinMode = GPIO_ALT_FUNC_MODE;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2202      	movs	r2, #2
 80003c2:	609a      	str	r2, [r3, #8]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinAltFuncMode = AF4;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	2204      	movs	r2, #4
 80003c8:	619a      	str	r2, [r3, #24]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinNumber = GPIO_PIN_6 | GPIO_PIN_7;
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	22c0      	movs	r2, #192	; 0xc0
 80003ce:	605a      	str	r2, [r3, #4]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinOPType = GPIO_OPEN_DRAIN;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2201      	movs	r2, #1
 80003d4:	615a      	str	r2, [r3, #20]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinPuPdCtrl = GPIO_PU;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2201      	movs	r2, #1
 80003da:	611a      	str	r2, [r3, #16]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinSpeed = GPIO_MEDIUM_SPEED;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	60da      	str	r2, [r3, #12]

	GPIO_DeInit(I2C_GPIO->pGPIOx);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 fec6 	bl	8001178 <GPIO_DeInit>
	GPIO_Init(I2C_GPIO);
 80003ec:	6878      	ldr	r0, [r7, #4]
 80003ee:	f000 fd95 	bl	8000f1c <GPIO_Init>
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40020400 	.word	0x40020400

08000400 <I2C_HandlerInit>:

void I2C_HandlerInit(I2C_Handle_t* I2C_Handler) {
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	I2C_Handler->pI2Cx = I2C1;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a0d      	ldr	r2, [pc, #52]	; (8000440 <I2C_HandlerInit+0x40>)
 800040c:	601a      	str	r2, [r3, #0]
	I2C_Handler->I2C_Config.ACKControl = I2C_ACK_EN;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2201      	movs	r2, #1
 8000412:	719a      	strb	r2, [r3, #6]
	I2C_Handler->I2C_Config.FMDutyCycle = I2C_FM_DUTY_2;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	2200      	movs	r2, #0
 8000418:	71da      	strb	r2, [r3, #7]
	I2C_Handler->I2C_Config.SCLSpeed = I2C_SCL_SPEED_SM;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	2200      	movs	r2, #0
 800041e:	711a      	strb	r2, [r3, #4]
	I2C_Handler->I2C_Config.DeviceAddress = MY_ADDR;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2261      	movs	r2, #97	; 0x61
 8000424:	715a      	strb	r2, [r3, #5]

	I2C_DeInit(I2C_Handler->pI2Cx);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4618      	mov	r0, r3
 800042c:	f000 fa70 	bl	8000910 <I2C_DeInit>
	I2C_Init(I2C_Handler);
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f000 f99f 	bl	8000774 <I2C_Init>
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40005400 	.word	0x40005400

08000444 <delay>:

void delay() {
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
	for (uint32_t i; i < 10000000; i++);
 800044a:	e002      	b.n	8000452 <delay+0xe>
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	3301      	adds	r3, #1
 8000450:	607b      	str	r3, [r7, #4]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a04      	ldr	r2, [pc, #16]	; (8000468 <delay+0x24>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d9f8      	bls.n	800044c <delay+0x8>
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	0098967f 	.word	0x0098967f

0800046c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]
 800047c:	e00a      	b.n	8000494 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800047e:	f3af 8000 	nop.w
 8000482:	4601      	mov	r1, r0
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	1c5a      	adds	r2, r3, #1
 8000488:	60ba      	str	r2, [r7, #8]
 800048a:	b2ca      	uxtb	r2, r1
 800048c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	3301      	adds	r3, #1
 8000492:	617b      	str	r3, [r7, #20]
 8000494:	697a      	ldr	r2, [r7, #20]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	429a      	cmp	r2, r3
 800049a:	dbf0      	blt.n	800047e <_read+0x12>
	}

return len;
 800049c:	687b      	ldr	r3, [r7, #4]
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3718      	adds	r7, #24
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	b086      	sub	sp, #24
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	60f8      	str	r0, [r7, #12]
 80004ae:	60b9      	str	r1, [r7, #8]
 80004b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b2:	2300      	movs	r3, #0
 80004b4:	617b      	str	r3, [r7, #20]
 80004b6:	e009      	b.n	80004cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	1c5a      	adds	r2, r3, #1
 80004bc:	60ba      	str	r2, [r7, #8]
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	4618      	mov	r0, r3
 80004c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	3301      	adds	r3, #1
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	697a      	ldr	r2, [r7, #20]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	dbf1      	blt.n	80004b8 <_write+0x12>
	}
	return len;
 80004d4:	687b      	ldr	r3, [r7, #4]
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3718      	adds	r7, #24
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}

080004de <_close>:

int _close(int file)
{
 80004de:	b480      	push	{r7}
 80004e0:	b083      	sub	sp, #12
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
	return -1;
 80004e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr

080004f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004f6:	b480      	push	{r7}
 80004f8:	b083      	sub	sp, #12
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
 80004fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000506:	605a      	str	r2, [r3, #4]
	return 0;
 8000508:	2300      	movs	r3, #0
}
 800050a:	4618      	mov	r0, r3
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <_isatty>:

int _isatty(int file)
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
	return 1;
 800051e:	2301      	movs	r3, #1
}
 8000520:	4618      	mov	r0, r3
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
	return 0;
 8000538:	2300      	movs	r3, #0
}
 800053a:	4618      	mov	r0, r3
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
	...

08000548 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <_sbrk+0x50>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d102      	bne.n	800055e <_sbrk+0x16>
		heap_end = &end;
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <_sbrk+0x50>)
 800055a:	4a10      	ldr	r2, [pc, #64]	; (800059c <_sbrk+0x54>)
 800055c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <_sbrk+0x50>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <_sbrk+0x50>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4413      	add	r3, r2
 800056c:	466a      	mov	r2, sp
 800056e:	4293      	cmp	r3, r2
 8000570:	d907      	bls.n	8000582 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000572:	f000 fef3 	bl	800135c <__errno>
 8000576:	4602      	mov	r2, r0
 8000578:	230c      	movs	r3, #12
 800057a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800057c:	f04f 33ff 	mov.w	r3, #4294967295
 8000580:	e006      	b.n	8000590 <_sbrk+0x48>
	}

	heap_end += incr;
 8000582:	4b05      	ldr	r3, [pc, #20]	; (8000598 <_sbrk+0x50>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4413      	add	r3, r2
 800058a:	4a03      	ldr	r2, [pc, #12]	; (8000598 <_sbrk+0x50>)
 800058c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800058e:	68fb      	ldr	r3, [r7, #12]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3710      	adds	r7, #16
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000080 	.word	0x20000080
 800059c:	20000090 	.word	0x20000090

080005a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005a0:	480d      	ldr	r0, [pc, #52]	; (80005d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <LoopForever+0x6>)
  ldr r1, =_edata
 80005a6:	490e      	ldr	r1, [pc, #56]	; (80005e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a8:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <LoopForever+0xe>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ac:	e002      	b.n	80005b4 <LoopCopyDataInit>

080005ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b2:	3304      	adds	r3, #4

080005b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b8:	d3f9      	bcc.n	80005ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ba:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005bc:	4c0b      	ldr	r4, [pc, #44]	; (80005ec <LoopForever+0x16>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c0:	e001      	b.n	80005c6 <LoopFillZerobss>

080005c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c4:	3204      	adds	r2, #4

080005c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c8:	d3fb      	bcc.n	80005c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005ca:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80005ce:	f000 fecb 	bl	8001368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d2:	f7ff fe5d 	bl	8000290 <main>

080005d6 <LoopForever>:

LoopForever:
    b LoopForever
 80005d6:	e7fe      	b.n	80005d6 <LoopForever>
  ldr   r0, =_estack
 80005d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80005e4:	08002264 	.word	0x08002264
  ldr r2, =_sbss
 80005e8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80005ec:	20000090 	.word	0x20000090

080005f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005f0:	e7fe      	b.n	80005f0 <ADC_IRQHandler>
	...

080005f4 <I2C_PeriClkCtrl>:
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void I2C_PeriClkCtrl(I2C_Reg_t* pI2Cx, uint8_t EnOrDi) {
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	460b      	mov	r3, r1
 80005fe:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d01c      	beq.n	8000640 <I2C_PeriClkCtrl+0x4c>
		I2Cx_PCLK_EN(pI2Cx); //Go to I2Cx_PCLK_EN macro for more details
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a1e      	ldr	r2, [pc, #120]	; (8000684 <I2C_PeriClkCtrl+0x90>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d106      	bne.n	800061c <I2C_PeriClkCtrl+0x28>
 800060e:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <I2C_PeriClkCtrl+0x94>)
 8000610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000612:	4a1d      	ldr	r2, [pc, #116]	; (8000688 <I2C_PeriClkCtrl+0x94>)
 8000614:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000618:	6413      	str	r3, [r2, #64]	; 0x40
	} else {
		I2Cx_PCLK_DI(pI2Cx); //Go to I2Cx_PCLK_DI macro for more details
	}
}
 800061a:	e02d      	b.n	8000678 <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_EN(pI2Cx); //Go to I2Cx_PCLK_EN macro for more details
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a1b      	ldr	r2, [pc, #108]	; (800068c <I2C_PeriClkCtrl+0x98>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d106      	bne.n	8000632 <I2C_PeriClkCtrl+0x3e>
 8000624:	4b18      	ldr	r3, [pc, #96]	; (8000688 <I2C_PeriClkCtrl+0x94>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a17      	ldr	r2, [pc, #92]	; (8000688 <I2C_PeriClkCtrl+0x94>)
 800062a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000630:	e022      	b.n	8000678 <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_EN(pI2Cx); //Go to I2Cx_PCLK_EN macro for more details
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <I2C_PeriClkCtrl+0x94>)
 8000634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <I2C_PeriClkCtrl+0x94>)
 8000638:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800063c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800063e:	e01b      	b.n	8000678 <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_DI(pI2Cx); //Go to I2Cx_PCLK_DI macro for more details
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4a10      	ldr	r2, [pc, #64]	; (8000684 <I2C_PeriClkCtrl+0x90>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d106      	bne.n	8000656 <I2C_PeriClkCtrl+0x62>
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <I2C_PeriClkCtrl+0x94>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <I2C_PeriClkCtrl+0x94>)
 800064e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000654:	e010      	b.n	8000678 <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_DI(pI2Cx); //Go to I2Cx_PCLK_DI macro for more details
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a0c      	ldr	r2, [pc, #48]	; (800068c <I2C_PeriClkCtrl+0x98>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d106      	bne.n	800066c <I2C_PeriClkCtrl+0x78>
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <I2C_PeriClkCtrl+0x94>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000662:	4a09      	ldr	r2, [pc, #36]	; (8000688 <I2C_PeriClkCtrl+0x94>)
 8000664:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000668:	6413      	str	r3, [r2, #64]	; 0x40
}
 800066a:	e005      	b.n	8000678 <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_DI(pI2Cx); //Go to I2Cx_PCLK_DI macro for more details
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <I2C_PeriClkCtrl+0x94>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a05      	ldr	r2, [pc, #20]	; (8000688 <I2C_PeriClkCtrl+0x94>)
 8000672:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	40005400 	.word	0x40005400
 8000688:	40023800 	.word	0x40023800
 800068c:	40005800 	.word	0x40005800

08000690 <getPLLClkFreq>:

static uint32_t getPLLClkFreq() {
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0

	//Implemented later
	return 0;
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <getAPB1ClkFreq>:
 * @param[in]			-
 *
 * @return				- none
 * @note				- See the Clock Tree diagram in STM32F4xx Reference Manual for details
 */
static uint32_t getAPB1ClkFreq() {
 80006a0:	b5b0      	push	{r4, r5, r7, lr}
 80006a2:	b08a      	sub	sp, #40	; 0x28
 80006a4:	af00      	add	r7, sp, #0

	uint16_t temp, AHB1Prescalar,  APB1Prescalar;
	uint16_t AHB1PreSclr[9] = {1, 2, 4, 6, 16, 64, 128, 256, 512};
 80006a6:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <getAPB1ClkFreq+0xc0>)
 80006a8:	f107 040c 	add.w	r4, r7, #12
 80006ac:	461d      	mov	r5, r3
 80006ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b2:	682b      	ldr	r3, [r5, #0]
 80006b4:	8023      	strh	r3, [r4, #0]
	uint16_t APB1PreSclr[5] = {1, 2, 4, 8, 16};
 80006b6:	4a2b      	ldr	r2, [pc, #172]	; (8000764 <getAPB1ClkFreq+0xc4>)
 80006b8:	463b      	mov	r3, r7
 80006ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80006bc:	c303      	stmia	r3!, {r0, r1}
 80006be:	801a      	strh	r2, [r3, #0]
	uint32_t sysClk;

	//Determine what system clock the MCU is running
	switch ((RCC->CFGR >> 2U) & 0x3) {
 80006c0:	4b29      	ldr	r3, [pc, #164]	; (8000768 <getAPB1ClkFreq+0xc8>)
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	089b      	lsrs	r3, r3, #2
 80006c6:	f003 0303 	and.w	r3, r3, #3
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d004      	beq.n	80006d8 <getAPB1ClkFreq+0x38>
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d305      	bcc.n	80006de <getAPB1ClkFreq+0x3e>
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d006      	beq.n	80006e4 <getAPB1ClkFreq+0x44>
 80006d6:	e009      	b.n	80006ec <getAPB1ClkFreq+0x4c>
	case RCC_HSE:	sysClk = HSE_CLK_FREQ; break; //8MHz
 80006d8:	4b24      	ldr	r3, [pc, #144]	; (800076c <getAPB1ClkFreq+0xcc>)
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
 80006dc:	e006      	b.n	80006ec <getAPB1ClkFreq+0x4c>
	case RCC_HSI:	sysClk = HSI_CLK_FREQ; break; //16MHz
 80006de:	4b24      	ldr	r3, [pc, #144]	; (8000770 <getAPB1ClkFreq+0xd0>)
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
 80006e2:	e003      	b.n	80006ec <getAPB1ClkFreq+0x4c>
	case RCC_PLL:	sysClk = getPLLClkFreq(); break; //See this function implementation for details
 80006e4:	f7ff ffd4 	bl	8000690 <getPLLClkFreq>
 80006e8:	6278      	str	r0, [r7, #36]	; 0x24
 80006ea:	bf00      	nop
	}

	//Determine the prescalar factor AHB1 is using
	temp = (RCC->CFGR >> 4U) & 0xF;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <getAPB1ClkFreq+0xc8>)
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	091b      	lsrs	r3, r3, #4
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	f003 030f 	and.w	r3, r3, #15
 80006f8:	847b      	strh	r3, [r7, #34]	; 0x22
	AHB1Prescalar = (temp < 8U) ? AHB1PreSclr[0] : AHB1PreSclr[temp % 8 + 1];
 80006fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80006fc:	2b07      	cmp	r3, #7
 80006fe:	d801      	bhi.n	8000704 <getAPB1ClkFreq+0x64>
 8000700:	89bb      	ldrh	r3, [r7, #12]
 8000702:	e009      	b.n	8000718 <getAPB1ClkFreq+0x78>
 8000704:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	3301      	adds	r3, #1
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000712:	4413      	add	r3, r2
 8000714:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8000718:	843b      	strh	r3, [r7, #32]

	//Determine the prescalar factor APB1 is using
	temp = (RCC->CFGR >> 10U) & 0x7;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <getAPB1ClkFreq+0xc8>)
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	0a9b      	lsrs	r3, r3, #10
 8000720:	b29b      	uxth	r3, r3
 8000722:	f003 0307 	and.w	r3, r3, #7
 8000726:	847b      	strh	r3, [r7, #34]	; 0x22
	APB1Prescalar = (temp < 4U) ? APB1PreSclr[0] : APB1PreSclr[temp % 8 + 1];
 8000728:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800072a:	2b03      	cmp	r3, #3
 800072c:	d801      	bhi.n	8000732 <getAPB1ClkFreq+0x92>
 800072e:	883b      	ldrh	r3, [r7, #0]
 8000730:	e009      	b.n	8000746 <getAPB1ClkFreq+0xa6>
 8000732:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000734:	f003 0307 	and.w	r3, r3, #7
 8000738:	3301      	adds	r3, #1
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000740:	4413      	add	r3, r2
 8000742:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8000746:	83fb      	strh	r3, [r7, #30]

	//Return the APB1 clock freq
	return (sysClk / AHB1Prescalar) / APB1Prescalar;
 8000748:	8c3b      	ldrh	r3, [r7, #32]
 800074a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800074c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000750:	8bfb      	ldrh	r3, [r7, #30]
 8000752:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000756:	4618      	mov	r0, r3
 8000758:	3728      	adds	r7, #40	; 0x28
 800075a:	46bd      	mov	sp, r7
 800075c:	bdb0      	pop	{r4, r5, r7, pc}
 800075e:	bf00      	nop
 8000760:	080021a4 	.word	0x080021a4
 8000764:	080021b8 	.word	0x080021b8
 8000768:	40023800 	.word	0x40023800
 800076c:	007a1200 	.word	0x007a1200
 8000770:	00f42400 	.word	0x00f42400

08000774 <I2C_Init>:
 * 						  and port
 *
 * @return				- none
 * @note				- none
 */
void I2C_Init(I2C_Handle_t* pI2CHandler) {
 8000774:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000778:	b088      	sub	sp, #32
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]

	uint16_t ccr_value;
	uint32_t APB1ClkFreq;
	uint64_t temp;
	temp = 0;
 800077e:	f04f 0300 	mov.w	r3, #0
 8000782:	f04f 0400 	mov.w	r4, #0
 8000786:	e9c7 3404 	strd	r3, r4, [r7, #16]

	//Enable the peripheral clock
	I2C_PeriClkCtrl(pI2CHandler->pI2Cx, ENABLE);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2101      	movs	r1, #1
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff2f 	bl	80005f4 <I2C_PeriClkCtrl>
	//Clock stretching is enabled by default in slave mode. To disable it,
	//configure the I2C_CR1 register bit 7.

	//Select the peripheral clock frequency
	//The other bits are ignored and set to 0 by default
	APB1ClkFreq = getAPB1ClkFreq();
 8000796:	f7ff ff83 	bl	80006a0 <getAPB1ClkFreq>
 800079a:	60f8      	str	r0, [r7, #12]
	pI2CHandler->pI2Cx->CR2 |= (APB1ClkFreq / 1000000U) & 0x3F;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	6859      	ldr	r1, [r3, #4]
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	4a52      	ldr	r2, [pc, #328]	; (80008f0 <I2C_Init+0x17c>)
 80007a6:	fba2 2303 	umull	r2, r3, r2, r3
 80007aa:	0c9b      	lsrs	r3, r3, #18
 80007ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	430a      	orrs	r2, r1
 80007b6:	605a      	str	r2, [r3, #4]
	//I2C1->CR2 |= (APB1ClkFreq / 1000000U) & 0x3F;
	//You may have option to configure the addressing mode in the I2C_OAR1
	//register. However, we don't implement that as part of the configuration
	//option in I2C. If you so wish to do it, implement that yourself!!!
	pI2CHandler->pI2Cx->OAR1 |= pI2CHandler->I2C_Config.DeviceAddress & 0xFF;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	689a      	ldr	r2, [r3, #8]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	795b      	ldrb	r3, [r3, #5]
 80007c2:	4619      	mov	r1, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	430a      	orrs	r2, r1
 80007ca:	609a      	str	r2, [r3, #8]

	//SPECIAL NOTE: Bit 14 of I2C_OAR1 register should be on kept at 1
	//by the software. Reason: I don't know, figure it out if you can.
	pI2CHandler->pI2Cx->OAR1 |= (1 << 14U);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	689a      	ldr	r2, [r3, #8]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80007da:	609a      	str	r2, [r3, #8]

	//Configure the SCL clock frequencies depending on the mode
	//standard mode/Fast mode and duty cycle bit
	temp |= pI2CHandler->I2C_Config.SCLSpeed << I2C_CCR_F_S;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	791b      	ldrb	r3, [r3, #4]
 80007e0:	03db      	lsls	r3, r3, #15
 80007e2:	469b      	mov	fp, r3
 80007e4:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80007e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80007ec:	ea4b 0301 	orr.w	r3, fp, r1
 80007f0:	ea4c 0402 	orr.w	r4, ip, r2
 80007f4:	e9c7 3404 	strd	r3, r4, [r7, #16]
	temp |= pI2CHandler->I2C_Config.FMDutyCycle << I2C_CCR_DUTY;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	79db      	ldrb	r3, [r3, #7]
 80007fc:	039b      	lsls	r3, r3, #14
 80007fe:	469b      	mov	fp, r3
 8000800:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8000804:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000808:	ea4b 0301 	orr.w	r3, fp, r1
 800080c:	ea4c 0402 	orr.w	r4, ip, r2
 8000810:	e9c7 3404 	strd	r3, r4, [r7, #16]

	//Given: T(High) + T(Low) = T(I2C_SCL_SPEED)
	//T_I2C_SCL_SPEED = (float) 1 / I2C_SCL_SPEED(pI2CHandler->I2C_Config.SCLSpeed);
	//T_APB1ClkFreq	= (float) 1 / APB1ClkFreq;
	if (pI2CHandler->pI2Cx->CCR & (1 << I2C_CCR_F_S)) { //Fast mode
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800081e:	2b00      	cmp	r3, #0
 8000820:	d01e      	beq.n	8000860 <I2C_Init+0xec>
		if (pI2CHandler->pI2Cx->CCR & (1 << I2C_CCR_DUTY)) { //To reach 400khz
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	69db      	ldr	r3, [r3, #28]
 8000828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082c:	2b00      	cmp	r3, #0
 800082e:	d00b      	beq.n	8000848 <I2C_Init+0xd4>
			/*	Calculation: T(High) = 9 * CCR * T(PCLK1)
			 *		   		 T(Low) = 16 * CCR * T(PCLK1)
			 *			     T(High) + T(Low) = 25 * CCR * T(PCLK1)
			 *			     CCR = (T(High) + T(Low)) / (25 * T(PCLK1))
			 */
			ccr_value = APB1ClkFreq / (25 * (I2C_SCL_SPEED(pI2CHandler->I2C_Config.SCLSpeed)));
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	791b      	ldrb	r3, [r3, #4]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d101      	bne.n	800083c <I2C_Init+0xc8>
 8000838:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <I2C_Init+0x180>)
 800083a:	e000      	b.n	800083e <I2C_Init+0xca>
 800083c:	4b2e      	ldr	r3, [pc, #184]	; (80008f8 <I2C_Init+0x184>)
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	fbb2 f3f3 	udiv	r3, r2, r3
 8000844:	83fb      	strh	r3, [r7, #30]
 8000846:	e016      	b.n	8000876 <I2C_Init+0x102>
			/*	Calculation: T(High) = 1 * CCR * T(PCLK1)
			 *		   		 T(Low) = 2 * CCR * T(PCLK1)
			 *			     T(High) + T(Low) = 3 * CCR * T(PCLK1)
			 *			     CCR = (T(High) + T(Low)) / (3 * T(PCLK1))
			 */
			ccr_value = APB1ClkFreq / (3 * (I2C_SCL_SPEED(pI2CHandler->I2C_Config.SCLSpeed)));
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	791b      	ldrb	r3, [r3, #4]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d101      	bne.n	8000854 <I2C_Init+0xe0>
 8000850:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <I2C_Init+0x188>)
 8000852:	e000      	b.n	8000856 <I2C_Init+0xe2>
 8000854:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <I2C_Init+0x18c>)
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	fbb2 f3f3 	udiv	r3, r2, r3
 800085c:	83fb      	strh	r3, [r7, #30]
 800085e:	e00a      	b.n	8000876 <I2C_Init+0x102>
		/*	Calculation: T(High) = CCR * T(PCLK1)
		 *		   		 T(Low) =   CCR * T(PCLK1)
		 *			     T(High) + T(Low) = 2 * CCR * T(PCLK1)
		 *			     CCR = (T(High) + T(Low)) / (2 * T(PCLK1))
		 */
		ccr_value = APB1ClkFreq / (2 * (I2C_SCL_SPEED(pI2CHandler->I2C_Config.SCLSpeed)));
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	791b      	ldrb	r3, [r3, #4]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d101      	bne.n	800086c <I2C_Init+0xf8>
 8000868:	4b26      	ldr	r3, [pc, #152]	; (8000904 <I2C_Init+0x190>)
 800086a:	e000      	b.n	800086e <I2C_Init+0xfa>
 800086c:	4b26      	ldr	r3, [pc, #152]	; (8000908 <I2C_Init+0x194>)
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	fbb2 f3f3 	udiv	r3, r2, r3
 8000874:	83fb      	strh	r3, [r7, #30]
	}
	temp |= (ccr_value & 0xFFF);
 8000876:	8bfb      	ldrh	r3, [r7, #30]
 8000878:	f04f 0400 	mov.w	r4, #0
 800087c:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000880:	f04f 0200 	mov.w	r2, #0
 8000884:	ea03 0b01 	and.w	fp, r3, r1
 8000888:	ea04 0c02 	and.w	ip, r4, r2
 800088c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000890:	ea4b 0301 	orr.w	r3, fp, r1
 8000894:	ea4c 0402 	orr.w	r4, ip, r2
 8000898:	e9c7 3404 	strd	r3, r4, [r7, #16]
	pI2CHandler->pI2Cx->CCR = temp;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	61da      	str	r2, [r3, #28]

	//Clear the TRISE reg
	pI2CHandler->pI2Cx->TRISE &= ~((int) 1);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	6a1a      	ldr	r2, [r3, #32]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f022 0201 	bic.w	r2, r2, #1
 80008b2:	621a      	str	r2, [r3, #32]

	//Configure the Rise Time (TRISE)
	temp = APB1ClkFreq * (I2C_T_RISE(pI2CHandler->I2C_Config.SCLSpeed)) / (10000000U);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	791b      	ldrb	r3, [r3, #4]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d101      	bne.n	80008c0 <I2C_Init+0x14c>
 80008bc:	2303      	movs	r3, #3
 80008be:	e000      	b.n	80008c2 <I2C_Init+0x14e>
 80008c0:	230a      	movs	r3, #10
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	fb02 f303 	mul.w	r3, r2, r3
 80008c8:	4a10      	ldr	r2, [pc, #64]	; (800090c <I2C_Init+0x198>)
 80008ca:	fba2 2303 	umull	r2, r3, r2, r3
 80008ce:	0d9b      	lsrs	r3, r3, #22
 80008d0:	f04f 0400 	mov.w	r4, #0
 80008d4:	e9c7 3404 	strd	r3, r4, [r7, #16]
	pI2CHandler->pI2Cx->TRISE = (temp + 1) & 0x3F;
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	1c5a      	adds	r2, r3, #1
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008e4:	621a      	str	r2, [r3, #32]

}
 80008e6:	bf00      	nop
 80008e8:	3720      	adds	r7, #32
 80008ea:	46bd      	mov	sp, r7
 80008ec:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80008f0:	431bde83 	.word	0x431bde83
 80008f4:	00989680 	.word	0x00989680
 80008f8:	002625a0 	.word	0x002625a0
 80008fc:	00124f80 	.word	0x00124f80
 8000900:	000493e0 	.word	0x000493e0
 8000904:	000c3500 	.word	0x000c3500
 8000908:	00030d40 	.word	0x00030d40
 800090c:	6b5fca6b 	.word	0x6b5fca6b

08000910 <I2C_DeInit>:
 * @param[in]			- Base address of the specific SPI peripherals (SPI_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- The implementation so far only covers only 3 I2C ports
 */
void I2C_DeInit(I2C_Reg_t* pI2Cx) {
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	if (pI2Cx == I2C1) {
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a19      	ldr	r2, [pc, #100]	; (8000980 <I2C_DeInit+0x70>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d10c      	bne.n	800093a <I2C_DeInit+0x2a>
		I2C1_PCLK_RST();
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <I2C_DeInit+0x74>)
 8000922:	6a1b      	ldr	r3, [r3, #32]
 8000924:	4a17      	ldr	r2, [pc, #92]	; (8000984 <I2C_DeInit+0x74>)
 8000926:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800092a:	6213      	str	r3, [r2, #32]
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <I2C_DeInit+0x74>)
 800092e:	6a1b      	ldr	r3, [r3, #32]
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <I2C_DeInit+0x74>)
 8000932:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000936:	6213      	str	r3, [r2, #32]
	} else if (pI2Cx == I2C2) {
		I2C2_PCLK_RST();
	} else {
		I2C3_PCLK_RST();
	}
}
 8000938:	e01c      	b.n	8000974 <I2C_DeInit+0x64>
	} else if (pI2Cx == I2C2) {
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a12      	ldr	r2, [pc, #72]	; (8000988 <I2C_DeInit+0x78>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d10c      	bne.n	800095c <I2C_DeInit+0x4c>
		I2C2_PCLK_RST();
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <I2C_DeInit+0x74>)
 8000944:	6a1b      	ldr	r3, [r3, #32]
 8000946:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <I2C_DeInit+0x74>)
 8000948:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800094c:	6213      	str	r3, [r2, #32]
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <I2C_DeInit+0x74>)
 8000950:	6a1b      	ldr	r3, [r3, #32]
 8000952:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <I2C_DeInit+0x74>)
 8000954:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000958:	6213      	str	r3, [r2, #32]
}
 800095a:	e00b      	b.n	8000974 <I2C_DeInit+0x64>
		I2C3_PCLK_RST();
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <I2C_DeInit+0x74>)
 800095e:	6a1b      	ldr	r3, [r3, #32]
 8000960:	4a08      	ldr	r2, [pc, #32]	; (8000984 <I2C_DeInit+0x74>)
 8000962:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000966:	6213      	str	r3, [r2, #32]
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <I2C_DeInit+0x74>)
 800096a:	6a1b      	ldr	r3, [r3, #32]
 800096c:	4a05      	ldr	r2, [pc, #20]	; (8000984 <I2C_DeInit+0x74>)
 800096e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000972:	6213      	str	r3, [r2, #32]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	40005400 	.word	0x40005400
 8000984:	40023800 	.word	0x40023800
 8000988:	40005800 	.word	0x40005800

0800098c <I2C_PeripheralEnable>:
 * @param[in]			= ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void I2C_PeripheralEnable(I2C_Reg_t* pI2Cx, uint8_t EnOrDi) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	460b      	mov	r3, r1
 8000996:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 8000998:	78fb      	ldrb	r3, [r7, #3]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d00a      	beq.n	80009b4 <I2C_PeripheralEnable+0x28>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f043 0201 	orr.w	r2, r3, #1
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	601a      	str	r2, [r3, #0]

		//Enable the Acknowledge bit
		ctrlBitACK(pI2Cx, ENABLE);
 80009aa:	2101      	movs	r1, #1
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f000 f91c 	bl	8000bea <ctrlBitACK>
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE); //clearing PE also clears ACK
	}
}
 80009b2:	e005      	b.n	80009c0 <I2C_PeripheralEnable+0x34>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE); //clearing PE also clears ACK
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f023 0201 	bic.w	r2, r3, #1
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	601a      	str	r2, [r3, #0]
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <I2C_MasterSendData>:
 * @return				- none
 * @note				- See the Transfer Sequence diagram for master transmitter on page 849
 * 						  in MCU Reference Manual for more details
 */
void I2C_MasterSendData(I2C_Handle_t* pI2CHandler, uint8_t* pTxBuffer,
		                uint32_t len, uint8_t pSlaveAddress) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
 80009d4:	70fb      	strb	r3, [r7, #3]
    // Note: Setting the START bit causes the interface to generate
    //	  	a Start condition and switch to Master Mode (MSL bit set) when
    //	  	the BUSY bit is cleared.
    //	  	This also set the SB bit by hardware (see I2C_SR1 register for details)
    //      You may also need to enable the I2C_CR1 PE register
	generateStartCondition(pI2CHandler->pI2Cx);
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f952 	bl	8000c84 <generateStartCondition>

	// Poll until the SB bit in SR1 register is set
	// This is important if any of the bit is set by HARDWARE
	while (!I2C_CheckStatusFlag(&pI2CHandler->pI2Cx->SR1, I2C_FLAG_SR1_SB));
 80009e0:	bf00      	nop
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	3314      	adds	r3, #20
 80009e8:	2101      	movs	r1, #1
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f935 	bl	8000c5a <I2C_CheckStatusFlag>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d0f5      	beq.n	80009e2 <I2C_MasterSendData+0x1a>

	// Clear the SB bit by reading SR1 register followed by
	// writing DR register with Address. If SB bit not clear,
	// SCL will be pulled low and the transmission is delay (which
	// we don't want, obviously)
	clearFlagSB(pI2CHandler->pI2Cx);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f962 	bl	8000cc4 <clearFlagSB>
	pI2CHandler->pI2Cx->DR = (pSlaveAddress << 1); //Write the slave address to DR register
 8000a00:	78fb      	ldrb	r3, [r7, #3]
 8000a02:	005a      	lsls	r2, r3, #1
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	611a      	str	r2, [r3, #16]

	//Polling until the ADDR bit is set
	while (!I2C_CheckStatusFlag(&pI2CHandler->pI2Cx->SR1, I2C_FLAG_SR1_ADDR));
 8000a0a:	bf00      	nop
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	3314      	adds	r3, #20
 8000a12:	2102      	movs	r1, #2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 f920 	bl	8000c5a <I2C_CheckStatusFlag>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d0f5      	beq.n	8000a0c <I2C_MasterSendData+0x44>

	//As soon as the slave address is sent, the ADDR bit is set by HARDWARE
	//and an interrupt is generated if the ITEVFEN bit is set (which we don't cover in
	//this case). Clear this by reading SR1 register followed by reading SR2
	clearFlagADDR(pI2CHandler->pI2Cx);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 f95a 	bl	8000cde <clearFlagADDR>

	//Sending bytes of data to slave
	//Note: writing TxBuffer to DR register clears the BTF bit
	while (len) {
 8000a2a:	e015      	b.n	8000a58 <I2C_MasterSendData+0x90>

		//Polling until the Transmit register buffer is empty (TXE = 1)
		//Then write first data into DR
		while (!I2C_CheckStatusFlag(&pI2CHandler->pI2Cx->SR1, I2C_FLAG_SR1_TXE));
 8000a2c:	bf00      	nop
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	3314      	adds	r3, #20
 8000a34:	2180      	movs	r1, #128	; 0x80
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 f90f 	bl	8000c5a <I2C_CheckStatusFlag>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d0f5      	beq.n	8000a2e <I2C_MasterSendData+0x66>

		//Write TxBuffer into DR
		pI2CHandler->pI2Cx->DR = *pTxBuffer;
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	781a      	ldrb	r2, [r3, #0]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	611a      	str	r2, [r3, #16]
		len--;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	607b      	str	r3, [r7, #4]
		pTxBuffer++;
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	3301      	adds	r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
	while (len) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1e6      	bne.n	8000a2c <I2C_MasterSendData+0x64>
	}

	//Wait for both TXE and BTF is set before closing the communication
	while (!(I2C_CheckStatusFlag(&pI2CHandler->pI2Cx->SR1, I2C_FLAG_SR1_BTF) &&
 8000a5e:	bf00      	nop
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	3314      	adds	r3, #20
 8000a66:	2104      	movs	r1, #4
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 f8f6 	bl	8000c5a <I2C_CheckStatusFlag>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d0f5      	beq.n	8000a60 <I2C_MasterSendData+0x98>
			 I2C_CheckStatusFlag(&pI2CHandler->pI2Cx->SR1, I2C_FLAG_SR1_TXE)));
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	3314      	adds	r3, #20
 8000a7a:	2180      	movs	r1, #128	; 0x80
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 f8ec 	bl	8000c5a <I2C_CheckStatusFlag>
 8000a82:	4603      	mov	r3, r0
	while (!(I2C_CheckStatusFlag(&pI2CHandler->pI2Cx->SR1, I2C_FLAG_SR1_BTF) &&
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d0eb      	beq.n	8000a60 <I2C_MasterSendData+0x98>

	//Generate the Stop condition to terminate the communication_SR1_BTF
	generateStopCondition(pI2CHandler->pI2Cx);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 f909 	bl	8000ca4 <generateStopCondition>

	//Memo: Cover the 10-bit addressing mode scenario later
}
 8000a92:	bf00      	nop
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <I2C_MasterReceiveData>:
 * @return				- none
 * @note				- See the Transfer Sequence diagram for master recevier on page 850
 * 						  in MCU Reference Manual for more details
 */
void I2C_MasterReceiveData(I2C_Handle_t* pI2CHandler, uint8_t* pRxBuffer,
		                uint32_t len, uint8_t pSlaveAddress) {
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b084      	sub	sp, #16
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
 8000aa6:	70fb      	strb	r3, [r7, #3]

	//Generate a start condition
	generateStartCondition(pI2CHandler->pI2Cx);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 f8e9 	bl	8000c84 <generateStartCondition>

	// Poll until the SB bit in SR1 register is set
	// This is important if any of the bit is set by HARDWARE
	while (!I2C_CheckStatusFlag(&pI2CHandler->pI2Cx->SR1, I2C_FLAG_SR1_SB));
 8000ab2:	bf00      	nop
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	3314      	adds	r3, #20
 8000aba:	2101      	movs	r1, #1
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 f8cc 	bl	8000c5a <I2C_CheckStatusFlag>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d0f5      	beq.n	8000ab4 <I2C_MasterReceiveData+0x1a>

	// Clear the SB bit by reading SR1 register followed by
	// writing DR register with Address. If SB bit not clear,
	// SCL will be pulled low and the transmission is delay (which
	// we don't want, obviously)
	clearFlagSB(pI2CHandler->pI2Cx);
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 f8f9 	bl	8000cc4 <clearFlagSB>
	pI2CHandler->pI2Cx->DR = (pSlaveAddress << 1) | 0x1; //Write the slave address to DR register
 8000ad2:	78fb      	ldrb	r3, [r7, #3]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	f043 0201 	orr.w	r2, r3, #1
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	611a      	str	r2, [r3, #16]
														 //with the r/w bit high at the end
	//Polling until the ADDR bit is set
	while (!I2C_CheckStatusFlag(&pI2CHandler->pI2Cx->SR1, I2C_FLAG_SR1_ADDR));
 8000ae0:	bf00      	nop
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3314      	adds	r3, #20
 8000ae8:	2102      	movs	r1, #2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f8b5 	bl	8000c5a <I2C_CheckStatusFlag>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0f5      	beq.n	8000ae2 <I2C_MasterReceiveData+0x48>

	if (len > 1) {
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d908      	bls.n	8000b0e <I2C_MasterReceiveData+0x74>
		//Handle len > 2 bytes reception
		multipleDataRecepHandler(pI2CHandler->pI2Cx, pRxBuffer, len);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	68b9      	ldr	r1, [r7, #8]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f837 	bl	8000b7a <multipleDataRecepHandler>
 8000b0c:	e005      	b.n	8000b1a <I2C_MasterReceiveData+0x80>
	} else {
		//Handle single data byte reception
		singleDataRecepHandler(pI2CHandler->pI2Cx, pRxBuffer);
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	68b9      	ldr	r1, [r7, #8]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 f80e 	bl	8000b36 <singleDataRecepHandler>
	}

	//Re-enable the ACK
	if (pI2CHandler->I2C_Config.ACKControl == ENABLE) {
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	799b      	ldrb	r3, [r3, #6]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d105      	bne.n	8000b2e <I2C_MasterReceiveData+0x94>
		ctrlBitACK(pI2CHandler->pI2Cx, ENABLE);
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2101      	movs	r1, #1
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f85e 	bl	8000bea <ctrlBitACK>
	}
}
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <singleDataRecepHandler>:


static void singleDataRecepHandler(I2C_Reg_t* pI2Cx, uint8_t *pRxBuffer) {
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
 8000b3e:	6039      	str	r1, [r7, #0]

	//In the even of having 1 byte reception, the Acknowledge bit must be disabled
	//in the EV6 before clearing the ADDR flag
	ctrlBitACK(pI2Cx, DISABLE);
 8000b40:	2100      	movs	r1, #0
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f000 f851 	bl	8000bea <ctrlBitACK>

	//clear the ADDR flag
	clearFlagADDR(pI2Cx);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f8c8 	bl	8000cde <clearFlagADDR>

	//Wait until the RXNE is set (DR is not empty)
	while (!I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_RXNE));
 8000b4e:	bf00      	nop
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3314      	adds	r3, #20
 8000b54:	2140      	movs	r1, #64	; 0x40
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f87f 	bl	8000c5a <I2C_CheckStatusFlag>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d0f6      	beq.n	8000b50 <singleDataRecepHandler+0x1a>

	//generate stop condition
	generateStopCondition(pI2Cx);
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 f89e 	bl	8000ca4 <generateStopCondition>

	//Finally read the 1 byte data into the buffer
	*pRxBuffer =  pI2Cx->DR;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	691b      	ldr	r3, [r3, #16]
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	701a      	strb	r2, [r3, #0]
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <multipleDataRecepHandler>:


static void multipleDataRecepHandler(I2C_Reg_t* pI2Cx, uint8_t *pRxBuffer, uint8_t len) {
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	60f8      	str	r0, [r7, #12]
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	4613      	mov	r3, r2
 8000b86:	71fb      	strb	r3, [r7, #7]


	//Set the POS bit if len is 2
	if (len == 2) {
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d103      	bne.n	8000b96 <multipleDataRecepHandler+0x1c>
		ctrlBitPOS(pI2Cx, ENABLE);
 8000b8e:	2101      	movs	r1, #1
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	f000 f846 	bl	8000c22 <ctrlBitPOS>
	}

	//As soon as the slave address is sent, the ADDR bit is set by HARDWARE
	//and an interrupt is generated if the ITEVFEN bit is set (which we don't cover in
	//this case). Clear this by reading SR1 register followed by reading SR2
	clearFlagADDR(pI2Cx);
 8000b96:	68f8      	ldr	r0, [r7, #12]
 8000b98:	f000 f8a1 	bl	8000cde <clearFlagADDR>

	while (len) {
 8000b9c:	e01e      	b.n	8000bdc <multipleDataRecepHandler+0x62>

		//Polling until the Transmit register buffer is empty (RXNE = 1)
		while (!I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_RXNE));
 8000b9e:	bf00      	nop
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	3314      	adds	r3, #20
 8000ba4:	2140      	movs	r1, #64	; 0x40
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f857 	bl	8000c5a <I2C_CheckStatusFlag>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d0f6      	beq.n	8000ba0 <multipleDataRecepHandler+0x26>

		//Closing the master reception at the second last byte
		//by sending the NACK to the slave
		if (len == 2) {
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d106      	bne.n	8000bc6 <multipleDataRecepHandler+0x4c>
			ctrlBitACK(pI2Cx, DISABLE);
 8000bb8:	2100      	movs	r1, #0
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f000 f815 	bl	8000bea <ctrlBitACK>

			//generate stop condition
			generateStopCondition(pI2Cx);
 8000bc0:	68f8      	ldr	r0, [r7, #12]
 8000bc2:	f000 f86f 	bl	8000ca4 <generateStopCondition>
		}

		//Read the DR register
		*pRxBuffer = pI2Cx->DR;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	691b      	ldr	r3, [r3, #16]
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	701a      	strb	r2, [r3, #0]
		len--;
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	71fb      	strb	r3, [r7, #7]
		pRxBuffer++; //increment a byte
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	60bb      	str	r3, [r7, #8]
	while (len) {
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1dd      	bne.n	8000b9e <multipleDataRecepHandler+0x24>
	}
}
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <ctrlBitACK>:
 * @param[in]			- the status flag
 *
 * @return				- none
 * @note				- none
 */
static void ctrlBitACK(I2C_Reg_t* pI2Cx, uint8_t EnOrDi) {
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 8000bf6:	78fb      	ldrb	r3, [r7, #3]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d006      	beq.n	8000c0a <ctrlBitACK+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	601a      	str	r2, [r3, #0]
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8000c08:	e005      	b.n	8000c16 <ctrlBitACK+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	601a      	str	r2, [r3, #0]
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <ctrlBitPOS>:
 * @param[in]			- the status flag
 *
 * @return				- none
 * @note				- none
 */
static void ctrlBitPOS(I2C_Reg_t* pI2Cx, uint8_t EnOrDi) {
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 8000c2e:	78fb      	ldrb	r3, [r7, #3]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d006      	beq.n	8000c42 <ctrlBitPOS+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_POS);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	601a      	str	r2, [r3, #0]
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_POS);
	}
}
 8000c40:	e005      	b.n	8000c4e <ctrlBitPOS+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_POS);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	601a      	str	r2, [r3, #0]
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <I2C_CheckStatusFlag>:
 * @param[in]			- the status flag
 *
 * @return				- none
 * @note				- none
 */
uint8_t I2C_CheckStatusFlag(__vo uint32_t* statusReg, uint8_t flag) {
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	460b      	mov	r3, r1
 8000c64:	70fb      	strb	r3, [r7, #3]
	if ((*statusReg) & flag) {
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <I2C_CheckStatusFlag+0x1c>
		return FLAG_SET;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e000      	b.n	8000c78 <I2C_CheckStatusFlag+0x1e>
	}
	return FLAG_RESET;
 8000c76:	2300      	movs	r3, #0
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <generateStartCondition>:
 * @param[in]			- Base address of the specific I2C peripherals (I2C_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- none
 */
static void generateStartCondition(I2C_Reg_t* pI2Cx) {
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= 1 << I2C_CR1_START;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	601a      	str	r2, [r3, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <generateStopCondition>:
 * @param[in]			- Base address of the specific I2C peripherals (I2C_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- none
 */
static void generateStopCondition(I2C_Reg_t* pI2Cx) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= 1 << I2C_CR1_STOP;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	601a      	str	r2, [r3, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <clearFlagSB>:
 * @param[in]			- Base address of the specific I2C peripherals (I2C_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- none
 */
static void clearFlagSB(I2C_Reg_t* pI2Cx) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	temp = pI2Cx->SR1;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	60fb      	str	r3, [r7, #12]
	(void) temp; //resolve unused variable warning
}
 8000cd2:	bf00      	nop
 8000cd4:	3714      	adds	r7, #20
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <clearFlagADDR>:
 * @param[in]			- Base address of the specific I2C peripherals (I2C_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- none
 */
static void clearFlagADDR(I2C_Reg_t* pI2Cx) {
 8000cde:	b480      	push	{r7}
 8000ce0:	b085      	sub	sp, #20
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	temp = pI2Cx->SR1;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	60fb      	str	r3, [r7, #12]
	temp = pI2Cx->SR2;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	60fb      	str	r3, [r7, #12]
	(void) temp; //resolve unused variable warning
}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <GPIO_PeriClkCtrl>:
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void GPIO_PeriClkCtrl(GPIO_Reg_t* pGPIOx, uint8_t EnOrDi) {
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	70fb      	strb	r3, [r7, #3]

	//Enable or disable the GPIO clock peripherals
	if (EnOrDi) {
 8000d0c:	78fb      	ldrb	r3, [r7, #3]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d074      	beq.n	8000dfc <GPIO_PeriClkCtrl+0xfc>
		//Special note: switch cannot be used for pointer, only integer
		GPIO_PCLK_EN(pGPIOx);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a76      	ldr	r2, [pc, #472]	; (8000ef0 <GPIO_PeriClkCtrl+0x1f0>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d106      	bne.n	8000d28 <GPIO_PeriClkCtrl+0x28>
 8000d1a:	4b76      	ldr	r3, [pc, #472]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a75      	ldr	r2, [pc, #468]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
	} else {
		GPIO_PCLK_DI(pGPIOx);
	}
}
 8000d26:	e0dd      	b.n	8000ee4 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a73      	ldr	r2, [pc, #460]	; (8000ef8 <GPIO_PeriClkCtrl+0x1f8>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d106      	bne.n	8000d3e <GPIO_PeriClkCtrl+0x3e>
 8000d30:	4b70      	ldr	r3, [pc, #448]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	4a6f      	ldr	r2, [pc, #444]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000d36:	f043 0302 	orr.w	r3, r3, #2
 8000d3a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d3c:	e0d2      	b.n	8000ee4 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a6e      	ldr	r2, [pc, #440]	; (8000efc <GPIO_PeriClkCtrl+0x1fc>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d106      	bne.n	8000d54 <GPIO_PeriClkCtrl+0x54>
 8000d46:	4b6b      	ldr	r3, [pc, #428]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a6a      	ldr	r2, [pc, #424]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000d4c:	f043 0304 	orr.w	r3, r3, #4
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d52:	e0c7      	b.n	8000ee4 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a6a      	ldr	r2, [pc, #424]	; (8000f00 <GPIO_PeriClkCtrl+0x200>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d106      	bne.n	8000d6a <GPIO_PeriClkCtrl+0x6a>
 8000d5c:	4b65      	ldr	r3, [pc, #404]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	4a64      	ldr	r2, [pc, #400]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000d62:	f043 0308 	orr.w	r3, r3, #8
 8000d66:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d68:	e0bc      	b.n	8000ee4 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a65      	ldr	r2, [pc, #404]	; (8000f04 <GPIO_PeriClkCtrl+0x204>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d106      	bne.n	8000d80 <GPIO_PeriClkCtrl+0x80>
 8000d72:	4b60      	ldr	r3, [pc, #384]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a5f      	ldr	r2, [pc, #380]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000d78:	f043 0310 	orr.w	r3, r3, #16
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d7e:	e0b1      	b.n	8000ee4 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a61      	ldr	r2, [pc, #388]	; (8000f08 <GPIO_PeriClkCtrl+0x208>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d106      	bne.n	8000d96 <GPIO_PeriClkCtrl+0x96>
 8000d88:	4b5a      	ldr	r3, [pc, #360]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	4a59      	ldr	r2, [pc, #356]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000d8e:	f043 0320 	orr.w	r3, r3, #32
 8000d92:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d94:	e0a6      	b.n	8000ee4 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a5c      	ldr	r2, [pc, #368]	; (8000f0c <GPIO_PeriClkCtrl+0x20c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d106      	bne.n	8000dac <GPIO_PeriClkCtrl+0xac>
 8000d9e:	4b55      	ldr	r3, [pc, #340]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a54      	ldr	r2, [pc, #336]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000daa:	e09b      	b.n	8000ee4 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a58      	ldr	r2, [pc, #352]	; (8000f10 <GPIO_PeriClkCtrl+0x210>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d106      	bne.n	8000dc2 <GPIO_PeriClkCtrl+0xc2>
 8000db4:	4b4f      	ldr	r3, [pc, #316]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	4a4e      	ldr	r2, [pc, #312]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dbe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000dc0:	e090      	b.n	8000ee4 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a53      	ldr	r2, [pc, #332]	; (8000f14 <GPIO_PeriClkCtrl+0x214>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d106      	bne.n	8000dd8 <GPIO_PeriClkCtrl+0xd8>
 8000dca:	4b4a      	ldr	r3, [pc, #296]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a49      	ldr	r2, [pc, #292]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000dd6:	e085      	b.n	8000ee4 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a4f      	ldr	r2, [pc, #316]	; (8000f18 <GPIO_PeriClkCtrl+0x218>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d106      	bne.n	8000dee <GPIO_PeriClkCtrl+0xee>
 8000de0:	4b44      	ldr	r3, [pc, #272]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	4a43      	ldr	r2, [pc, #268]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dea:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000dec:	e07a      	b.n	8000ee4 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000dee:	4b41      	ldr	r3, [pc, #260]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a40      	ldr	r2, [pc, #256]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000df4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000dfa:	e073      	b.n	8000ee4 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a3c      	ldr	r2, [pc, #240]	; (8000ef0 <GPIO_PeriClkCtrl+0x1f0>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d106      	bne.n	8000e12 <GPIO_PeriClkCtrl+0x112>
 8000e04:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e08:	4a3a      	ldr	r2, [pc, #232]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000e0a:	f023 0301 	bic.w	r3, r3, #1
 8000e0e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e10:	e068      	b.n	8000ee4 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a38      	ldr	r2, [pc, #224]	; (8000ef8 <GPIO_PeriClkCtrl+0x1f8>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d106      	bne.n	8000e28 <GPIO_PeriClkCtrl+0x128>
 8000e1a:	4b36      	ldr	r3, [pc, #216]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a35      	ldr	r2, [pc, #212]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000e20:	f023 0302 	bic.w	r3, r3, #2
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e26:	e05d      	b.n	8000ee4 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a34      	ldr	r2, [pc, #208]	; (8000efc <GPIO_PeriClkCtrl+0x1fc>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d106      	bne.n	8000e3e <GPIO_PeriClkCtrl+0x13e>
 8000e30:	4b30      	ldr	r3, [pc, #192]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	4a2f      	ldr	r2, [pc, #188]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000e36:	f023 0304 	bic.w	r3, r3, #4
 8000e3a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e3c:	e052      	b.n	8000ee4 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a2f      	ldr	r2, [pc, #188]	; (8000f00 <GPIO_PeriClkCtrl+0x200>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d106      	bne.n	8000e54 <GPIO_PeriClkCtrl+0x154>
 8000e46:	4b2b      	ldr	r3, [pc, #172]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a2a      	ldr	r2, [pc, #168]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000e4c:	f023 0308 	bic.w	r3, r3, #8
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e52:	e047      	b.n	8000ee4 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a2b      	ldr	r2, [pc, #172]	; (8000f04 <GPIO_PeriClkCtrl+0x204>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d106      	bne.n	8000e6a <GPIO_PeriClkCtrl+0x16a>
 8000e5c:	4b25      	ldr	r3, [pc, #148]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	4a24      	ldr	r2, [pc, #144]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000e62:	f023 0310 	bic.w	r3, r3, #16
 8000e66:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e68:	e03c      	b.n	8000ee4 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a26      	ldr	r2, [pc, #152]	; (8000f08 <GPIO_PeriClkCtrl+0x208>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d106      	bne.n	8000e80 <GPIO_PeriClkCtrl+0x180>
 8000e72:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a1f      	ldr	r2, [pc, #124]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000e78:	f023 0320 	bic.w	r3, r3, #32
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e7e:	e031      	b.n	8000ee4 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a22      	ldr	r2, [pc, #136]	; (8000f0c <GPIO_PeriClkCtrl+0x20c>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d106      	bne.n	8000e96 <GPIO_PeriClkCtrl+0x196>
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	4a19      	ldr	r2, [pc, #100]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000e8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e92:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e94:	e026      	b.n	8000ee4 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a1d      	ldr	r2, [pc, #116]	; (8000f10 <GPIO_PeriClkCtrl+0x210>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d106      	bne.n	8000eac <GPIO_PeriClkCtrl+0x1ac>
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000eaa:	e01b      	b.n	8000ee4 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a19      	ldr	r2, [pc, #100]	; (8000f14 <GPIO_PeriClkCtrl+0x214>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d106      	bne.n	8000ec2 <GPIO_PeriClkCtrl+0x1c2>
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000eba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ebe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ec0:	e010      	b.n	8000ee4 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <GPIO_PeriClkCtrl+0x218>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d106      	bne.n	8000ed8 <GPIO_PeriClkCtrl+0x1d8>
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a09      	ldr	r2, [pc, #36]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ed6:	e005      	b.n	8000ee4 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000edc:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <GPIO_PeriClkCtrl+0x1f4>)
 8000ede:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ee2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	40020800 	.word	0x40020800
 8000f00:	40020c00 	.word	0x40020c00
 8000f04:	40020100 	.word	0x40020100
 8000f08:	40021400 	.word	0x40021400
 8000f0c:	40021800 	.word	0x40021800
 8000f10:	40021c00 	.word	0x40021c00
 8000f14:	40022000 	.word	0x40022000
 8000f18:	40022400 	.word	0x40022400

08000f1c <GPIO_Init>:
 * @param[in]			-
 *
 * @return				- none
 * @note				- none
 */
void GPIO_Init(GPIO_Handle_t* pGPIOHandler) {
 8000f1c:	b5b0      	push	{r4, r5, r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

	//uint32_t temp;
	GPIO_Reg_t* GPIOx = pGPIOHandler->pGPIOx;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	623b      	str	r3, [r7, #32]
	GPIO_PinConfig_t GPIOx_PinConf = pGPIOHandler->GPIOx_PinConfig;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f107 0408 	add.w	r4, r7, #8
 8000f30:	1d1d      	adds	r5, r3, #4
 8000f32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f36:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f3a:	e884 0003 	stmia.w	r4, {r0, r1}

	//Enable the GPIO Clock
	GPIO_PeriClkCtrl(GPIOx, ENABLE);
 8000f3e:	2101      	movs	r1, #1
 8000f40:	6a38      	ldr	r0, [r7, #32]
 8000f42:	f7ff fedd 	bl	8000d00 <GPIO_PeriClkCtrl>

	/*Note: before setting the bits: make sure those registers are clear */
	//Clearing the registers
	//Setting the bits register
	for (uint16_t i = 0U; i < GPIO_PIN_NUMBER; i++) {
 8000f46:	2300      	movs	r3, #0
 8000f48:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f4a:	e0f7      	b.n	800113c <GPIO_Init+0x220>

		//Check if the ith bit is set
		if (GPIOx_PinConf.GPIO_PinNumber & (1 << i)) {
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f50:	2101      	movs	r1, #1
 8000f52:	fa01 f202 	lsl.w	r2, r1, r2
 8000f56:	4013      	ands	r3, r2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 80ec 	beq.w	8001136 <GPIO_Init+0x21a>

			//Handle the GPIO pin alternate function mode and GPIO output mode
			if (GPIOx_PinConf.GPIO_PinMode == GPIO_ALT_FUNC_MODE || GPIOx_PinConf.GPIO_PinMode == GPIO_OUTPUT_MODE) {
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d002      	beq.n	8000f6a <GPIO_Init+0x4e>
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d12c      	bne.n	8000fc4 <GPIO_Init+0xa8>
				if (i < (GPIO_PIN_NUMBER / 2)) {
 8000f6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f6c:	2b07      	cmp	r3, #7
 8000f6e:	d80a      	bhi.n	8000f86 <GPIO_Init+0x6a>
					GPIOx->AFR[0] |= (GPIOx_PinConf.GPIO_PinAltFuncMode << i * 4U);
 8000f70:	6a3b      	ldr	r3, [r7, #32]
 8000f72:	6a1a      	ldr	r2, [r3, #32]
 8000f74:	69f9      	ldr	r1, [r7, #28]
 8000f76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	6a3b      	ldr	r3, [r7, #32]
 8000f82:	621a      	str	r2, [r3, #32]
 8000f84:	e00b      	b.n	8000f9e <GPIO_Init+0x82>
				} else {
					GPIOx->AFR[1] |= (GPIOx_PinConf.GPIO_PinAltFuncMode << (i % (GPIO_PIN_NUMBER / 2)) * 4U);
 8000f86:	6a3b      	ldr	r3, [r7, #32]
 8000f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f8a:	69f9      	ldr	r1, [r7, #28]
 8000f8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	fa01 f303 	lsl.w	r3, r1, r3
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	6a3b      	ldr	r3, [r7, #32]
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
				}

				//Configure the OTYPER register
				GPIOx->OTYPER |= (GPIOx_PinConf.GPIO_PinOPType << i);
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	69b9      	ldr	r1, [r7, #24]
 8000fa4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8000faa:	431a      	orrs	r2, r3
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	605a      	str	r2, [r3, #4]

				//Configure the OSPEED register
				GPIOx->OSPEEDR |= (GPIOx_PinConf.GPIO_PinSpeed << i * 2U);
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	6939      	ldr	r1, [r7, #16]
 8000fb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	6a3b      	ldr	r3, [r7, #32]
 8000fc2:	609a      	str	r2, [r3, #8]
			}

			//Handle the GPIO pin interrupt mode
			if ((GPIOx_PinConf.GPIO_PinMode == GPIO_IT_FT_MODE) || (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RT_MODE)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	d006      	beq.n	8000fd8 <GPIO_Init+0xbc>
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2b05      	cmp	r3, #5
 8000fce:	d003      	beq.n	8000fd8 <GPIO_Init+0xbc>
				|| (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RFT_MODE)) {
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	f040 809b 	bne.w	800110e <GPIO_Init+0x1f2>

				//Enable the clock for SYSCFG registers
				SYSCFG_PCLK_EN();
 8000fd8:	4b5c      	ldr	r3, [pc, #368]	; (800114c <GPIO_Init+0x230>)
 8000fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fdc:	4a5b      	ldr	r2, [pc, #364]	; (800114c <GPIO_Init+0x230>)
 8000fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe2:	6453      	str	r3, [r2, #68]	; 0x44

				//Handling the falling edge cases
				if (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_FT_MODE) {
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	d115      	bne.n	8001016 <GPIO_Init+0xfa>
					//Configure the FTSR
					EXTI->FTSR |= (1 << i);
 8000fea:	4b59      	ldr	r3, [pc, #356]	; (8001150 <GPIO_Init+0x234>)
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4a55      	ldr	r2, [pc, #340]	; (8001150 <GPIO_Init+0x234>)
 8000ffa:	430b      	orrs	r3, r1
 8000ffc:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~(1 << i); //Clear the corresponding RTSR bit
 8000ffe:	4b54      	ldr	r3, [pc, #336]	; (8001150 <GPIO_Init+0x234>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001004:	2101      	movs	r1, #1
 8001006:	fa01 f202 	lsl.w	r2, r1, r2
 800100a:	43d2      	mvns	r2, r2
 800100c:	4611      	mov	r1, r2
 800100e:	4a50      	ldr	r2, [pc, #320]	; (8001150 <GPIO_Init+0x234>)
 8001010:	400b      	ands	r3, r1
 8001012:	6093      	str	r3, [r2, #8]
 8001014:	e02c      	b.n	8001070 <GPIO_Init+0x154>
				} else if (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RT_MODE) {
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2b05      	cmp	r3, #5
 800101a:	d115      	bne.n	8001048 <GPIO_Init+0x12c>
					//Configure the RTSR
					EXTI->RTSR |= (1 << i);
 800101c:	4b4c      	ldr	r3, [pc, #304]	; (8001150 <GPIO_Init+0x234>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001022:	2101      	movs	r1, #1
 8001024:	fa01 f202 	lsl.w	r2, r1, r2
 8001028:	4611      	mov	r1, r2
 800102a:	4a49      	ldr	r2, [pc, #292]	; (8001150 <GPIO_Init+0x234>)
 800102c:	430b      	orrs	r3, r1
 800102e:	6093      	str	r3, [r2, #8]
					EXTI->FTSR &= ~(1 << i); //Clear the corresponding FTSR bit
 8001030:	4b47      	ldr	r3, [pc, #284]	; (8001150 <GPIO_Init+0x234>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001036:	2101      	movs	r1, #1
 8001038:	fa01 f202 	lsl.w	r2, r1, r2
 800103c:	43d2      	mvns	r2, r2
 800103e:	4611      	mov	r1, r2
 8001040:	4a43      	ldr	r2, [pc, #268]	; (8001150 <GPIO_Init+0x234>)
 8001042:	400b      	ands	r3, r1
 8001044:	60d3      	str	r3, [r2, #12]
 8001046:	e013      	b.n	8001070 <GPIO_Init+0x154>
				}  else {
					//Configure both the FTSR and RTSR
					EXTI->FTSR |= (1 << i);
 8001048:	4b41      	ldr	r3, [pc, #260]	; (8001150 <GPIO_Init+0x234>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800104e:	2101      	movs	r1, #1
 8001050:	fa01 f202 	lsl.w	r2, r1, r2
 8001054:	4611      	mov	r1, r2
 8001056:	4a3e      	ldr	r2, [pc, #248]	; (8001150 <GPIO_Init+0x234>)
 8001058:	430b      	orrs	r3, r1
 800105a:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR |= (1 << i);
 800105c:	4b3c      	ldr	r3, [pc, #240]	; (8001150 <GPIO_Init+0x234>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001062:	2101      	movs	r1, #1
 8001064:	fa01 f202 	lsl.w	r2, r1, r2
 8001068:	4611      	mov	r1, r2
 800106a:	4a39      	ldr	r2, [pc, #228]	; (8001150 <GPIO_Init+0x234>)
 800106c:	430b      	orrs	r3, r1
 800106e:	6093      	str	r3, [r2, #8]
				//Configure the GPIO port selection in SYSCFG_EXTICR
				//Rule: int quotient = n >> z
				//		int remainder = n & (~(~(int) 0) << z)
				//In this case, since we always want z = 2, as we divide by 4,
				//the term ~(~(int) 0) << z) = 0x03U
				SYSCFG->EXTICR[i >> 2U] |= GPIO_PORT_INDEX(GPIOx) << ((i & 0x03U) * 4U);
 8001070:	4a38      	ldr	r2, [pc, #224]	; (8001154 <GPIO_Init+0x238>)
 8001072:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	b29b      	uxth	r3, r3
 8001078:	3302      	adds	r3, #2
 800107a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	4935      	ldr	r1, [pc, #212]	; (8001158 <GPIO_Init+0x23c>)
 8001082:	428b      	cmp	r3, r1
 8001084:	d02b      	beq.n	80010de <GPIO_Init+0x1c2>
 8001086:	6a3b      	ldr	r3, [r7, #32]
 8001088:	4934      	ldr	r1, [pc, #208]	; (800115c <GPIO_Init+0x240>)
 800108a:	428b      	cmp	r3, r1
 800108c:	d025      	beq.n	80010da <GPIO_Init+0x1be>
 800108e:	6a3b      	ldr	r3, [r7, #32]
 8001090:	4933      	ldr	r1, [pc, #204]	; (8001160 <GPIO_Init+0x244>)
 8001092:	428b      	cmp	r3, r1
 8001094:	d01f      	beq.n	80010d6 <GPIO_Init+0x1ba>
 8001096:	6a3b      	ldr	r3, [r7, #32]
 8001098:	4932      	ldr	r1, [pc, #200]	; (8001164 <GPIO_Init+0x248>)
 800109a:	428b      	cmp	r3, r1
 800109c:	d019      	beq.n	80010d2 <GPIO_Init+0x1b6>
 800109e:	6a3b      	ldr	r3, [r7, #32]
 80010a0:	4931      	ldr	r1, [pc, #196]	; (8001168 <GPIO_Init+0x24c>)
 80010a2:	428b      	cmp	r3, r1
 80010a4:	d013      	beq.n	80010ce <GPIO_Init+0x1b2>
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	4930      	ldr	r1, [pc, #192]	; (800116c <GPIO_Init+0x250>)
 80010aa:	428b      	cmp	r3, r1
 80010ac:	d00d      	beq.n	80010ca <GPIO_Init+0x1ae>
 80010ae:	6a3b      	ldr	r3, [r7, #32]
 80010b0:	492f      	ldr	r1, [pc, #188]	; (8001170 <GPIO_Init+0x254>)
 80010b2:	428b      	cmp	r3, r1
 80010b4:	d007      	beq.n	80010c6 <GPIO_Init+0x1aa>
 80010b6:	6a3b      	ldr	r3, [r7, #32]
 80010b8:	492e      	ldr	r1, [pc, #184]	; (8001174 <GPIO_Init+0x258>)
 80010ba:	428b      	cmp	r3, r1
 80010bc:	d101      	bne.n	80010c2 <GPIO_Init+0x1a6>
 80010be:	2307      	movs	r3, #7
 80010c0:	e00e      	b.n	80010e0 <GPIO_Init+0x1c4>
 80010c2:	2308      	movs	r3, #8
 80010c4:	e00c      	b.n	80010e0 <GPIO_Init+0x1c4>
 80010c6:	2306      	movs	r3, #6
 80010c8:	e00a      	b.n	80010e0 <GPIO_Init+0x1c4>
 80010ca:	2305      	movs	r3, #5
 80010cc:	e008      	b.n	80010e0 <GPIO_Init+0x1c4>
 80010ce:	2304      	movs	r3, #4
 80010d0:	e006      	b.n	80010e0 <GPIO_Init+0x1c4>
 80010d2:	2303      	movs	r3, #3
 80010d4:	e004      	b.n	80010e0 <GPIO_Init+0x1c4>
 80010d6:	2302      	movs	r3, #2
 80010d8:	e002      	b.n	80010e0 <GPIO_Init+0x1c4>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <GPIO_Init+0x1c4>
 80010de:	2300      	movs	r3, #0
 80010e0:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80010e2:	f001 0103 	and.w	r1, r1, #3
 80010e6:	0089      	lsls	r1, r1, #2
 80010e8:	408b      	lsls	r3, r1
 80010ea:	481a      	ldr	r0, [pc, #104]	; (8001154 <GPIO_Init+0x238>)
 80010ec:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80010ee:	0889      	lsrs	r1, r1, #2
 80010f0:	b289      	uxth	r1, r1
 80010f2:	431a      	orrs	r2, r3
 80010f4:	1c8b      	adds	r3, r1, #2
 80010f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

				//Enable the EXTI interrupt delivery using IMR
				EXTI->IMR |= (1 << i);
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <GPIO_Init+0x234>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001100:	2101      	movs	r1, #1
 8001102:	fa01 f202 	lsl.w	r2, r1, r2
 8001106:	4611      	mov	r1, r2
 8001108:	4a11      	ldr	r2, [pc, #68]	; (8001150 <GPIO_Init+0x234>)
 800110a:	430b      	orrs	r3, r1
 800110c:	6013      	str	r3, [r2, #0]
			}

			//Handle the MODER register
			GPIOx->MODER |= (GPIOx_PinConf.GPIO_PinMode << i * 2U);
 800110e:	6a3b      	ldr	r3, [r7, #32]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	68f9      	ldr	r1, [r7, #12]
 8001114:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	431a      	orrs	r2, r3
 800111e:	6a3b      	ldr	r3, [r7, #32]
 8001120:	601a      	str	r2, [r3, #0]

			//Handle the PuPdCtrl Register
			GPIOx->PUPDR |= (GPIOx_PinConf.GPIO_PinPuPdCtrl << i * 2U);
 8001122:	6a3b      	ldr	r3, [r7, #32]
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	6979      	ldr	r1, [r7, #20]
 8001128:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	431a      	orrs	r2, r3
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	60da      	str	r2, [r3, #12]
	for (uint16_t i = 0U; i < GPIO_PIN_NUMBER; i++) {
 8001136:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001138:	3301      	adds	r3, #1
 800113a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800113c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800113e:	2b0f      	cmp	r3, #15
 8001140:	f67f af04 	bls.w	8000f4c <GPIO_Init+0x30>
		}
	}
}
 8001144:	bf00      	nop
 8001146:	3728      	adds	r7, #40	; 0x28
 8001148:	46bd      	mov	sp, r7
 800114a:	bdb0      	pop	{r4, r5, r7, pc}
 800114c:	40023800 	.word	0x40023800
 8001150:	40013c00 	.word	0x40013c00
 8001154:	40013800 	.word	0x40013800
 8001158:	40020000 	.word	0x40020000
 800115c:	40020400 	.word	0x40020400
 8001160:	40020800 	.word	0x40020800
 8001164:	40020c00 	.word	0x40020c00
 8001168:	40020100 	.word	0x40020100
 800116c:	40021400 	.word	0x40021400
 8001170:	40021800 	.word	0x40021800
 8001174:	40021c00 	.word	0x40021c00

08001178 <GPIO_DeInit>:
 *
 * @return				- none
 * @note				-  Consult the RCC Peripheral reset registers to reset
 * 					       all the registers of the peripherals
 */
void GPIO_DeInit(GPIO_Reg_t *pGPIOx) {
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

	//Reset all the registers of the respective GPIO peripherals
	if (pGPIOx == GPIOA) {
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a5f      	ldr	r2, [pc, #380]	; (8001300 <GPIO_DeInit+0x188>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d10c      	bne.n	80011a2 <GPIO_DeInit+0x2a>
		GPIOA_PCLK_RST();
 8001188:	4b5e      	ldr	r3, [pc, #376]	; (8001304 <GPIO_DeInit+0x18c>)
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	4a5d      	ldr	r2, [pc, #372]	; (8001304 <GPIO_DeInit+0x18c>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6113      	str	r3, [r2, #16]
 8001194:	4b5b      	ldr	r3, [pc, #364]	; (8001304 <GPIO_DeInit+0x18c>)
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	4a5a      	ldr	r2, [pc, #360]	; (8001304 <GPIO_DeInit+0x18c>)
 800119a:	f023 0301 	bic.w	r3, r3, #1
 800119e:	6113      	str	r3, [r2, #16]
	} else if (pGPIOx == GPIOJ) {
		GPIOJ_PCLK_RST();
	} else if (pGPIOx == GPIOK) {
		GPIOK_PCLK_RST();
	}
}
 80011a0:	e0a8      	b.n	80012f4 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOB) {
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a58      	ldr	r2, [pc, #352]	; (8001308 <GPIO_DeInit+0x190>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d10c      	bne.n	80011c4 <GPIO_DeInit+0x4c>
		GPIOB_PCLK_RST();
 80011aa:	4b56      	ldr	r3, [pc, #344]	; (8001304 <GPIO_DeInit+0x18c>)
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	4a55      	ldr	r2, [pc, #340]	; (8001304 <GPIO_DeInit+0x18c>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	6113      	str	r3, [r2, #16]
 80011b6:	4b53      	ldr	r3, [pc, #332]	; (8001304 <GPIO_DeInit+0x18c>)
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	4a52      	ldr	r2, [pc, #328]	; (8001304 <GPIO_DeInit+0x18c>)
 80011bc:	f023 0302 	bic.w	r3, r3, #2
 80011c0:	6113      	str	r3, [r2, #16]
}
 80011c2:	e097      	b.n	80012f4 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOC) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a51      	ldr	r2, [pc, #324]	; (800130c <GPIO_DeInit+0x194>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d10c      	bne.n	80011e6 <GPIO_DeInit+0x6e>
		GPIOC_PCLK_RST();
 80011cc:	4b4d      	ldr	r3, [pc, #308]	; (8001304 <GPIO_DeInit+0x18c>)
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	4a4c      	ldr	r2, [pc, #304]	; (8001304 <GPIO_DeInit+0x18c>)
 80011d2:	f043 0304 	orr.w	r3, r3, #4
 80011d6:	6113      	str	r3, [r2, #16]
 80011d8:	4b4a      	ldr	r3, [pc, #296]	; (8001304 <GPIO_DeInit+0x18c>)
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	4a49      	ldr	r2, [pc, #292]	; (8001304 <GPIO_DeInit+0x18c>)
 80011de:	f023 0304 	bic.w	r3, r3, #4
 80011e2:	6113      	str	r3, [r2, #16]
}
 80011e4:	e086      	b.n	80012f4 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOD) {
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a49      	ldr	r2, [pc, #292]	; (8001310 <GPIO_DeInit+0x198>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d10c      	bne.n	8001208 <GPIO_DeInit+0x90>
		GPIOD_PCLK_RST();
 80011ee:	4b45      	ldr	r3, [pc, #276]	; (8001304 <GPIO_DeInit+0x18c>)
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	4a44      	ldr	r2, [pc, #272]	; (8001304 <GPIO_DeInit+0x18c>)
 80011f4:	f043 0308 	orr.w	r3, r3, #8
 80011f8:	6113      	str	r3, [r2, #16]
 80011fa:	4b42      	ldr	r3, [pc, #264]	; (8001304 <GPIO_DeInit+0x18c>)
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	4a41      	ldr	r2, [pc, #260]	; (8001304 <GPIO_DeInit+0x18c>)
 8001200:	f023 0308 	bic.w	r3, r3, #8
 8001204:	6113      	str	r3, [r2, #16]
}
 8001206:	e075      	b.n	80012f4 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOE) {
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a42      	ldr	r2, [pc, #264]	; (8001314 <GPIO_DeInit+0x19c>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d10c      	bne.n	800122a <GPIO_DeInit+0xb2>
		GPIOE_PCLK_RST();
 8001210:	4b3c      	ldr	r3, [pc, #240]	; (8001304 <GPIO_DeInit+0x18c>)
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	4a3b      	ldr	r2, [pc, #236]	; (8001304 <GPIO_DeInit+0x18c>)
 8001216:	f043 0310 	orr.w	r3, r3, #16
 800121a:	6113      	str	r3, [r2, #16]
 800121c:	4b39      	ldr	r3, [pc, #228]	; (8001304 <GPIO_DeInit+0x18c>)
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	4a38      	ldr	r2, [pc, #224]	; (8001304 <GPIO_DeInit+0x18c>)
 8001222:	f023 0310 	bic.w	r3, r3, #16
 8001226:	6113      	str	r3, [r2, #16]
}
 8001228:	e064      	b.n	80012f4 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOF) {
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a3a      	ldr	r2, [pc, #232]	; (8001318 <GPIO_DeInit+0x1a0>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d10c      	bne.n	800124c <GPIO_DeInit+0xd4>
		GPIOF_PCLK_RST();
 8001232:	4b34      	ldr	r3, [pc, #208]	; (8001304 <GPIO_DeInit+0x18c>)
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	4a33      	ldr	r2, [pc, #204]	; (8001304 <GPIO_DeInit+0x18c>)
 8001238:	f043 0320 	orr.w	r3, r3, #32
 800123c:	6113      	str	r3, [r2, #16]
 800123e:	4b31      	ldr	r3, [pc, #196]	; (8001304 <GPIO_DeInit+0x18c>)
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	4a30      	ldr	r2, [pc, #192]	; (8001304 <GPIO_DeInit+0x18c>)
 8001244:	f023 0320 	bic.w	r3, r3, #32
 8001248:	6113      	str	r3, [r2, #16]
}
 800124a:	e053      	b.n	80012f4 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOG) {
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a33      	ldr	r2, [pc, #204]	; (800131c <GPIO_DeInit+0x1a4>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d10c      	bne.n	800126e <GPIO_DeInit+0xf6>
		GPIOG_PCLK_RST();
 8001254:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <GPIO_DeInit+0x18c>)
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	4a2a      	ldr	r2, [pc, #168]	; (8001304 <GPIO_DeInit+0x18c>)
 800125a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800125e:	6113      	str	r3, [r2, #16]
 8001260:	4b28      	ldr	r3, [pc, #160]	; (8001304 <GPIO_DeInit+0x18c>)
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	4a27      	ldr	r2, [pc, #156]	; (8001304 <GPIO_DeInit+0x18c>)
 8001266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800126a:	6113      	str	r3, [r2, #16]
}
 800126c:	e042      	b.n	80012f4 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOH) {
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a2b      	ldr	r2, [pc, #172]	; (8001320 <GPIO_DeInit+0x1a8>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d10c      	bne.n	8001290 <GPIO_DeInit+0x118>
		GPIOH_PCLK_RST();
 8001276:	4b23      	ldr	r3, [pc, #140]	; (8001304 <GPIO_DeInit+0x18c>)
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	4a22      	ldr	r2, [pc, #136]	; (8001304 <GPIO_DeInit+0x18c>)
 800127c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001280:	6113      	str	r3, [r2, #16]
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <GPIO_DeInit+0x18c>)
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	4a1f      	ldr	r2, [pc, #124]	; (8001304 <GPIO_DeInit+0x18c>)
 8001288:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800128c:	6113      	str	r3, [r2, #16]
}
 800128e:	e031      	b.n	80012f4 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOI) {
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a24      	ldr	r2, [pc, #144]	; (8001324 <GPIO_DeInit+0x1ac>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d10c      	bne.n	80012b2 <GPIO_DeInit+0x13a>
		GPIOI_PCLK_RST();
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <GPIO_DeInit+0x18c>)
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	4a19      	ldr	r2, [pc, #100]	; (8001304 <GPIO_DeInit+0x18c>)
 800129e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a2:	6113      	str	r3, [r2, #16]
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <GPIO_DeInit+0x18c>)
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	4a16      	ldr	r2, [pc, #88]	; (8001304 <GPIO_DeInit+0x18c>)
 80012aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012ae:	6113      	str	r3, [r2, #16]
}
 80012b0:	e020      	b.n	80012f4 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOJ) {
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a1c      	ldr	r2, [pc, #112]	; (8001328 <GPIO_DeInit+0x1b0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d10c      	bne.n	80012d4 <GPIO_DeInit+0x15c>
		GPIOJ_PCLK_RST();
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <GPIO_DeInit+0x18c>)
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	4a11      	ldr	r2, [pc, #68]	; (8001304 <GPIO_DeInit+0x18c>)
 80012c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c4:	6113      	str	r3, [r2, #16]
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <GPIO_DeInit+0x18c>)
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <GPIO_DeInit+0x18c>)
 80012cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012d0:	6113      	str	r3, [r2, #16]
}
 80012d2:	e00f      	b.n	80012f4 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOK) {
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a15      	ldr	r2, [pc, #84]	; (800132c <GPIO_DeInit+0x1b4>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d10b      	bne.n	80012f4 <GPIO_DeInit+0x17c>
		GPIOK_PCLK_RST();
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <GPIO_DeInit+0x18c>)
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	4a08      	ldr	r2, [pc, #32]	; (8001304 <GPIO_DeInit+0x18c>)
 80012e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012e6:	6113      	str	r3, [r2, #16]
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <GPIO_DeInit+0x18c>)
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	4a05      	ldr	r2, [pc, #20]	; (8001304 <GPIO_DeInit+0x18c>)
 80012ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012f2:	6113      	str	r3, [r2, #16]
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	40020000 	.word	0x40020000
 8001304:	40023800 	.word	0x40023800
 8001308:	40020400 	.word	0x40020400
 800130c:	40020800 	.word	0x40020800
 8001310:	40020c00 	.word	0x40020c00
 8001314:	40020100 	.word	0x40020100
 8001318:	40021400 	.word	0x40021400
 800131c:	40021800 	.word	0x40021800
 8001320:	40021c00 	.word	0x40021c00
 8001324:	40022000 	.word	0x40022000
 8001328:	40022400 	.word	0x40022400
 800132c:	40022800 	.word	0x40022800

08001330 <GPIO_ReadFromInputPin>:
 * @param[in]			- The pin number
 *
 * @return				- unsigned 8 bit integer
 * @note				- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_Reg_t* pGPIOx, uint16_t pinNumber) {
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]
	//value = (uint8_t) ((pGPIOx->IDR & (1 << pinNumber)) >> pinNumber);
	/*or value = (uint8_t) ((pGPIOx->IDR >> pinNumber) & 0x1);*/
	return ((pGPIOx->IDR & pinNumber) == pinNumber) ? 1 : 0;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691a      	ldr	r2, [r3, #16]
 8001340:	887b      	ldrh	r3, [r7, #2]
 8001342:	401a      	ands	r2, r3
 8001344:	887b      	ldrh	r3, [r7, #2]
 8001346:	429a      	cmp	r2, r3
 8001348:	bf0c      	ite	eq
 800134a:	2301      	moveq	r3, #1
 800134c:	2300      	movne	r3, #0
 800134e:	b2db      	uxtb	r3, r3
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <__errno>:
 800135c:	4b01      	ldr	r3, [pc, #4]	; (8001364 <__errno+0x8>)
 800135e:	6818      	ldr	r0, [r3, #0]
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000000 	.word	0x20000000

08001368 <__libc_init_array>:
 8001368:	b570      	push	{r4, r5, r6, lr}
 800136a:	4e0d      	ldr	r6, [pc, #52]	; (80013a0 <__libc_init_array+0x38>)
 800136c:	4c0d      	ldr	r4, [pc, #52]	; (80013a4 <__libc_init_array+0x3c>)
 800136e:	1ba4      	subs	r4, r4, r6
 8001370:	10a4      	asrs	r4, r4, #2
 8001372:	2500      	movs	r5, #0
 8001374:	42a5      	cmp	r5, r4
 8001376:	d109      	bne.n	800138c <__libc_init_array+0x24>
 8001378:	4e0b      	ldr	r6, [pc, #44]	; (80013a8 <__libc_init_array+0x40>)
 800137a:	4c0c      	ldr	r4, [pc, #48]	; (80013ac <__libc_init_array+0x44>)
 800137c:	f000 ff04 	bl	8002188 <_init>
 8001380:	1ba4      	subs	r4, r4, r6
 8001382:	10a4      	asrs	r4, r4, #2
 8001384:	2500      	movs	r5, #0
 8001386:	42a5      	cmp	r5, r4
 8001388:	d105      	bne.n	8001396 <__libc_init_array+0x2e>
 800138a:	bd70      	pop	{r4, r5, r6, pc}
 800138c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001390:	4798      	blx	r3
 8001392:	3501      	adds	r5, #1
 8001394:	e7ee      	b.n	8001374 <__libc_init_array+0xc>
 8001396:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800139a:	4798      	blx	r3
 800139c:	3501      	adds	r5, #1
 800139e:	e7f2      	b.n	8001386 <__libc_init_array+0x1e>
 80013a0:	0800225c 	.word	0x0800225c
 80013a4:	0800225c 	.word	0x0800225c
 80013a8:	0800225c 	.word	0x0800225c
 80013ac:	08002260 	.word	0x08002260

080013b0 <memset>:
 80013b0:	4402      	add	r2, r0
 80013b2:	4603      	mov	r3, r0
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d100      	bne.n	80013ba <memset+0xa>
 80013b8:	4770      	bx	lr
 80013ba:	f803 1b01 	strb.w	r1, [r3], #1
 80013be:	e7f9      	b.n	80013b4 <memset+0x4>

080013c0 <iprintf>:
 80013c0:	b40f      	push	{r0, r1, r2, r3}
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <iprintf+0x2c>)
 80013c4:	b513      	push	{r0, r1, r4, lr}
 80013c6:	681c      	ldr	r4, [r3, #0]
 80013c8:	b124      	cbz	r4, 80013d4 <iprintf+0x14>
 80013ca:	69a3      	ldr	r3, [r4, #24]
 80013cc:	b913      	cbnz	r3, 80013d4 <iprintf+0x14>
 80013ce:	4620      	mov	r0, r4
 80013d0:	f000 f84e 	bl	8001470 <__sinit>
 80013d4:	ab05      	add	r3, sp, #20
 80013d6:	9a04      	ldr	r2, [sp, #16]
 80013d8:	68a1      	ldr	r1, [r4, #8]
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	4620      	mov	r0, r4
 80013de:	f000 f955 	bl	800168c <_vfiprintf_r>
 80013e2:	b002      	add	sp, #8
 80013e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013e8:	b004      	add	sp, #16
 80013ea:	4770      	bx	lr
 80013ec:	20000000 	.word	0x20000000

080013f0 <std>:
 80013f0:	2300      	movs	r3, #0
 80013f2:	b510      	push	{r4, lr}
 80013f4:	4604      	mov	r4, r0
 80013f6:	e9c0 3300 	strd	r3, r3, [r0]
 80013fa:	6083      	str	r3, [r0, #8]
 80013fc:	8181      	strh	r1, [r0, #12]
 80013fe:	6643      	str	r3, [r0, #100]	; 0x64
 8001400:	81c2      	strh	r2, [r0, #14]
 8001402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001406:	6183      	str	r3, [r0, #24]
 8001408:	4619      	mov	r1, r3
 800140a:	2208      	movs	r2, #8
 800140c:	305c      	adds	r0, #92	; 0x5c
 800140e:	f7ff ffcf 	bl	80013b0 <memset>
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <std+0x38>)
 8001414:	6263      	str	r3, [r4, #36]	; 0x24
 8001416:	4b05      	ldr	r3, [pc, #20]	; (800142c <std+0x3c>)
 8001418:	62a3      	str	r3, [r4, #40]	; 0x28
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <std+0x40>)
 800141c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800141e:	4b05      	ldr	r3, [pc, #20]	; (8001434 <std+0x44>)
 8001420:	6224      	str	r4, [r4, #32]
 8001422:	6323      	str	r3, [r4, #48]	; 0x30
 8001424:	bd10      	pop	{r4, pc}
 8001426:	bf00      	nop
 8001428:	08001be9 	.word	0x08001be9
 800142c:	08001c0b 	.word	0x08001c0b
 8001430:	08001c43 	.word	0x08001c43
 8001434:	08001c67 	.word	0x08001c67

08001438 <_cleanup_r>:
 8001438:	4901      	ldr	r1, [pc, #4]	; (8001440 <_cleanup_r+0x8>)
 800143a:	f000 b885 	b.w	8001548 <_fwalk_reent>
 800143e:	bf00      	nop
 8001440:	08001f41 	.word	0x08001f41

08001444 <__sfmoreglue>:
 8001444:	b570      	push	{r4, r5, r6, lr}
 8001446:	1e4a      	subs	r2, r1, #1
 8001448:	2568      	movs	r5, #104	; 0x68
 800144a:	4355      	muls	r5, r2
 800144c:	460e      	mov	r6, r1
 800144e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001452:	f000 f897 	bl	8001584 <_malloc_r>
 8001456:	4604      	mov	r4, r0
 8001458:	b140      	cbz	r0, 800146c <__sfmoreglue+0x28>
 800145a:	2100      	movs	r1, #0
 800145c:	e9c0 1600 	strd	r1, r6, [r0]
 8001460:	300c      	adds	r0, #12
 8001462:	60a0      	str	r0, [r4, #8]
 8001464:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001468:	f7ff ffa2 	bl	80013b0 <memset>
 800146c:	4620      	mov	r0, r4
 800146e:	bd70      	pop	{r4, r5, r6, pc}

08001470 <__sinit>:
 8001470:	6983      	ldr	r3, [r0, #24]
 8001472:	b510      	push	{r4, lr}
 8001474:	4604      	mov	r4, r0
 8001476:	bb33      	cbnz	r3, 80014c6 <__sinit+0x56>
 8001478:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800147c:	6503      	str	r3, [r0, #80]	; 0x50
 800147e:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <__sinit+0x58>)
 8001480:	4a12      	ldr	r2, [pc, #72]	; (80014cc <__sinit+0x5c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6282      	str	r2, [r0, #40]	; 0x28
 8001486:	4298      	cmp	r0, r3
 8001488:	bf04      	itt	eq
 800148a:	2301      	moveq	r3, #1
 800148c:	6183      	streq	r3, [r0, #24]
 800148e:	f000 f81f 	bl	80014d0 <__sfp>
 8001492:	6060      	str	r0, [r4, #4]
 8001494:	4620      	mov	r0, r4
 8001496:	f000 f81b 	bl	80014d0 <__sfp>
 800149a:	60a0      	str	r0, [r4, #8]
 800149c:	4620      	mov	r0, r4
 800149e:	f000 f817 	bl	80014d0 <__sfp>
 80014a2:	2200      	movs	r2, #0
 80014a4:	60e0      	str	r0, [r4, #12]
 80014a6:	2104      	movs	r1, #4
 80014a8:	6860      	ldr	r0, [r4, #4]
 80014aa:	f7ff ffa1 	bl	80013f0 <std>
 80014ae:	2201      	movs	r2, #1
 80014b0:	2109      	movs	r1, #9
 80014b2:	68a0      	ldr	r0, [r4, #8]
 80014b4:	f7ff ff9c 	bl	80013f0 <std>
 80014b8:	2202      	movs	r2, #2
 80014ba:	2112      	movs	r1, #18
 80014bc:	68e0      	ldr	r0, [r4, #12]
 80014be:	f7ff ff97 	bl	80013f0 <std>
 80014c2:	2301      	movs	r3, #1
 80014c4:	61a3      	str	r3, [r4, #24]
 80014c6:	bd10      	pop	{r4, pc}
 80014c8:	080021c4 	.word	0x080021c4
 80014cc:	08001439 	.word	0x08001439

080014d0 <__sfp>:
 80014d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014d2:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <__sfp+0x70>)
 80014d4:	681e      	ldr	r6, [r3, #0]
 80014d6:	69b3      	ldr	r3, [r6, #24]
 80014d8:	4607      	mov	r7, r0
 80014da:	b913      	cbnz	r3, 80014e2 <__sfp+0x12>
 80014dc:	4630      	mov	r0, r6
 80014de:	f7ff ffc7 	bl	8001470 <__sinit>
 80014e2:	3648      	adds	r6, #72	; 0x48
 80014e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	d503      	bpl.n	80014f4 <__sfp+0x24>
 80014ec:	6833      	ldr	r3, [r6, #0]
 80014ee:	b133      	cbz	r3, 80014fe <__sfp+0x2e>
 80014f0:	6836      	ldr	r6, [r6, #0]
 80014f2:	e7f7      	b.n	80014e4 <__sfp+0x14>
 80014f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80014f8:	b16d      	cbz	r5, 8001516 <__sfp+0x46>
 80014fa:	3468      	adds	r4, #104	; 0x68
 80014fc:	e7f4      	b.n	80014e8 <__sfp+0x18>
 80014fe:	2104      	movs	r1, #4
 8001500:	4638      	mov	r0, r7
 8001502:	f7ff ff9f 	bl	8001444 <__sfmoreglue>
 8001506:	6030      	str	r0, [r6, #0]
 8001508:	2800      	cmp	r0, #0
 800150a:	d1f1      	bne.n	80014f0 <__sfp+0x20>
 800150c:	230c      	movs	r3, #12
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	4604      	mov	r4, r0
 8001512:	4620      	mov	r0, r4
 8001514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <__sfp+0x74>)
 8001518:	6665      	str	r5, [r4, #100]	; 0x64
 800151a:	e9c4 5500 	strd	r5, r5, [r4]
 800151e:	60a5      	str	r5, [r4, #8]
 8001520:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001524:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001528:	2208      	movs	r2, #8
 800152a:	4629      	mov	r1, r5
 800152c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001530:	f7ff ff3e 	bl	80013b0 <memset>
 8001534:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001538:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800153c:	e7e9      	b.n	8001512 <__sfp+0x42>
 800153e:	bf00      	nop
 8001540:	080021c4 	.word	0x080021c4
 8001544:	ffff0001 	.word	0xffff0001

08001548 <_fwalk_reent>:
 8001548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800154c:	4680      	mov	r8, r0
 800154e:	4689      	mov	r9, r1
 8001550:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001554:	2600      	movs	r6, #0
 8001556:	b914      	cbnz	r4, 800155e <_fwalk_reent+0x16>
 8001558:	4630      	mov	r0, r6
 800155a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800155e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001562:	3f01      	subs	r7, #1
 8001564:	d501      	bpl.n	800156a <_fwalk_reent+0x22>
 8001566:	6824      	ldr	r4, [r4, #0]
 8001568:	e7f5      	b.n	8001556 <_fwalk_reent+0xe>
 800156a:	89ab      	ldrh	r3, [r5, #12]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d907      	bls.n	8001580 <_fwalk_reent+0x38>
 8001570:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001574:	3301      	adds	r3, #1
 8001576:	d003      	beq.n	8001580 <_fwalk_reent+0x38>
 8001578:	4629      	mov	r1, r5
 800157a:	4640      	mov	r0, r8
 800157c:	47c8      	blx	r9
 800157e:	4306      	orrs	r6, r0
 8001580:	3568      	adds	r5, #104	; 0x68
 8001582:	e7ee      	b.n	8001562 <_fwalk_reent+0x1a>

08001584 <_malloc_r>:
 8001584:	b570      	push	{r4, r5, r6, lr}
 8001586:	1ccd      	adds	r5, r1, #3
 8001588:	f025 0503 	bic.w	r5, r5, #3
 800158c:	3508      	adds	r5, #8
 800158e:	2d0c      	cmp	r5, #12
 8001590:	bf38      	it	cc
 8001592:	250c      	movcc	r5, #12
 8001594:	2d00      	cmp	r5, #0
 8001596:	4606      	mov	r6, r0
 8001598:	db01      	blt.n	800159e <_malloc_r+0x1a>
 800159a:	42a9      	cmp	r1, r5
 800159c:	d903      	bls.n	80015a6 <_malloc_r+0x22>
 800159e:	230c      	movs	r3, #12
 80015a0:	6033      	str	r3, [r6, #0]
 80015a2:	2000      	movs	r0, #0
 80015a4:	bd70      	pop	{r4, r5, r6, pc}
 80015a6:	f000 fd6b 	bl	8002080 <__malloc_lock>
 80015aa:	4a21      	ldr	r2, [pc, #132]	; (8001630 <_malloc_r+0xac>)
 80015ac:	6814      	ldr	r4, [r2, #0]
 80015ae:	4621      	mov	r1, r4
 80015b0:	b991      	cbnz	r1, 80015d8 <_malloc_r+0x54>
 80015b2:	4c20      	ldr	r4, [pc, #128]	; (8001634 <_malloc_r+0xb0>)
 80015b4:	6823      	ldr	r3, [r4, #0]
 80015b6:	b91b      	cbnz	r3, 80015c0 <_malloc_r+0x3c>
 80015b8:	4630      	mov	r0, r6
 80015ba:	f000 fb05 	bl	8001bc8 <_sbrk_r>
 80015be:	6020      	str	r0, [r4, #0]
 80015c0:	4629      	mov	r1, r5
 80015c2:	4630      	mov	r0, r6
 80015c4:	f000 fb00 	bl	8001bc8 <_sbrk_r>
 80015c8:	1c43      	adds	r3, r0, #1
 80015ca:	d124      	bne.n	8001616 <_malloc_r+0x92>
 80015cc:	230c      	movs	r3, #12
 80015ce:	6033      	str	r3, [r6, #0]
 80015d0:	4630      	mov	r0, r6
 80015d2:	f000 fd56 	bl	8002082 <__malloc_unlock>
 80015d6:	e7e4      	b.n	80015a2 <_malloc_r+0x1e>
 80015d8:	680b      	ldr	r3, [r1, #0]
 80015da:	1b5b      	subs	r3, r3, r5
 80015dc:	d418      	bmi.n	8001610 <_malloc_r+0x8c>
 80015de:	2b0b      	cmp	r3, #11
 80015e0:	d90f      	bls.n	8001602 <_malloc_r+0x7e>
 80015e2:	600b      	str	r3, [r1, #0]
 80015e4:	50cd      	str	r5, [r1, r3]
 80015e6:	18cc      	adds	r4, r1, r3
 80015e8:	4630      	mov	r0, r6
 80015ea:	f000 fd4a 	bl	8002082 <__malloc_unlock>
 80015ee:	f104 000b 	add.w	r0, r4, #11
 80015f2:	1d23      	adds	r3, r4, #4
 80015f4:	f020 0007 	bic.w	r0, r0, #7
 80015f8:	1ac3      	subs	r3, r0, r3
 80015fa:	d0d3      	beq.n	80015a4 <_malloc_r+0x20>
 80015fc:	425a      	negs	r2, r3
 80015fe:	50e2      	str	r2, [r4, r3]
 8001600:	e7d0      	b.n	80015a4 <_malloc_r+0x20>
 8001602:	428c      	cmp	r4, r1
 8001604:	684b      	ldr	r3, [r1, #4]
 8001606:	bf16      	itet	ne
 8001608:	6063      	strne	r3, [r4, #4]
 800160a:	6013      	streq	r3, [r2, #0]
 800160c:	460c      	movne	r4, r1
 800160e:	e7eb      	b.n	80015e8 <_malloc_r+0x64>
 8001610:	460c      	mov	r4, r1
 8001612:	6849      	ldr	r1, [r1, #4]
 8001614:	e7cc      	b.n	80015b0 <_malloc_r+0x2c>
 8001616:	1cc4      	adds	r4, r0, #3
 8001618:	f024 0403 	bic.w	r4, r4, #3
 800161c:	42a0      	cmp	r0, r4
 800161e:	d005      	beq.n	800162c <_malloc_r+0xa8>
 8001620:	1a21      	subs	r1, r4, r0
 8001622:	4630      	mov	r0, r6
 8001624:	f000 fad0 	bl	8001bc8 <_sbrk_r>
 8001628:	3001      	adds	r0, #1
 800162a:	d0cf      	beq.n	80015cc <_malloc_r+0x48>
 800162c:	6025      	str	r5, [r4, #0]
 800162e:	e7db      	b.n	80015e8 <_malloc_r+0x64>
 8001630:	20000084 	.word	0x20000084
 8001634:	20000088 	.word	0x20000088

08001638 <__sfputc_r>:
 8001638:	6893      	ldr	r3, [r2, #8]
 800163a:	3b01      	subs	r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	b410      	push	{r4}
 8001640:	6093      	str	r3, [r2, #8]
 8001642:	da08      	bge.n	8001656 <__sfputc_r+0x1e>
 8001644:	6994      	ldr	r4, [r2, #24]
 8001646:	42a3      	cmp	r3, r4
 8001648:	db01      	blt.n	800164e <__sfputc_r+0x16>
 800164a:	290a      	cmp	r1, #10
 800164c:	d103      	bne.n	8001656 <__sfputc_r+0x1e>
 800164e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001652:	f000 bb0d 	b.w	8001c70 <__swbuf_r>
 8001656:	6813      	ldr	r3, [r2, #0]
 8001658:	1c58      	adds	r0, r3, #1
 800165a:	6010      	str	r0, [r2, #0]
 800165c:	7019      	strb	r1, [r3, #0]
 800165e:	4608      	mov	r0, r1
 8001660:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001664:	4770      	bx	lr

08001666 <__sfputs_r>:
 8001666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001668:	4606      	mov	r6, r0
 800166a:	460f      	mov	r7, r1
 800166c:	4614      	mov	r4, r2
 800166e:	18d5      	adds	r5, r2, r3
 8001670:	42ac      	cmp	r4, r5
 8001672:	d101      	bne.n	8001678 <__sfputs_r+0x12>
 8001674:	2000      	movs	r0, #0
 8001676:	e007      	b.n	8001688 <__sfputs_r+0x22>
 8001678:	463a      	mov	r2, r7
 800167a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800167e:	4630      	mov	r0, r6
 8001680:	f7ff ffda 	bl	8001638 <__sfputc_r>
 8001684:	1c43      	adds	r3, r0, #1
 8001686:	d1f3      	bne.n	8001670 <__sfputs_r+0xa>
 8001688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800168c <_vfiprintf_r>:
 800168c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001690:	460c      	mov	r4, r1
 8001692:	b09d      	sub	sp, #116	; 0x74
 8001694:	4617      	mov	r7, r2
 8001696:	461d      	mov	r5, r3
 8001698:	4606      	mov	r6, r0
 800169a:	b118      	cbz	r0, 80016a4 <_vfiprintf_r+0x18>
 800169c:	6983      	ldr	r3, [r0, #24]
 800169e:	b90b      	cbnz	r3, 80016a4 <_vfiprintf_r+0x18>
 80016a0:	f7ff fee6 	bl	8001470 <__sinit>
 80016a4:	4b7c      	ldr	r3, [pc, #496]	; (8001898 <_vfiprintf_r+0x20c>)
 80016a6:	429c      	cmp	r4, r3
 80016a8:	d158      	bne.n	800175c <_vfiprintf_r+0xd0>
 80016aa:	6874      	ldr	r4, [r6, #4]
 80016ac:	89a3      	ldrh	r3, [r4, #12]
 80016ae:	0718      	lsls	r0, r3, #28
 80016b0:	d55e      	bpl.n	8001770 <_vfiprintf_r+0xe4>
 80016b2:	6923      	ldr	r3, [r4, #16]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d05b      	beq.n	8001770 <_vfiprintf_r+0xe4>
 80016b8:	2300      	movs	r3, #0
 80016ba:	9309      	str	r3, [sp, #36]	; 0x24
 80016bc:	2320      	movs	r3, #32
 80016be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80016c2:	2330      	movs	r3, #48	; 0x30
 80016c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80016c8:	9503      	str	r5, [sp, #12]
 80016ca:	f04f 0b01 	mov.w	fp, #1
 80016ce:	46b8      	mov	r8, r7
 80016d0:	4645      	mov	r5, r8
 80016d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80016d6:	b10b      	cbz	r3, 80016dc <_vfiprintf_r+0x50>
 80016d8:	2b25      	cmp	r3, #37	; 0x25
 80016da:	d154      	bne.n	8001786 <_vfiprintf_r+0xfa>
 80016dc:	ebb8 0a07 	subs.w	sl, r8, r7
 80016e0:	d00b      	beq.n	80016fa <_vfiprintf_r+0x6e>
 80016e2:	4653      	mov	r3, sl
 80016e4:	463a      	mov	r2, r7
 80016e6:	4621      	mov	r1, r4
 80016e8:	4630      	mov	r0, r6
 80016ea:	f7ff ffbc 	bl	8001666 <__sfputs_r>
 80016ee:	3001      	adds	r0, #1
 80016f0:	f000 80c2 	beq.w	8001878 <_vfiprintf_r+0x1ec>
 80016f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016f6:	4453      	add	r3, sl
 80016f8:	9309      	str	r3, [sp, #36]	; 0x24
 80016fa:	f898 3000 	ldrb.w	r3, [r8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 80ba 	beq.w	8001878 <_vfiprintf_r+0x1ec>
 8001704:	2300      	movs	r3, #0
 8001706:	f04f 32ff 	mov.w	r2, #4294967295
 800170a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800170e:	9304      	str	r3, [sp, #16]
 8001710:	9307      	str	r3, [sp, #28]
 8001712:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001716:	931a      	str	r3, [sp, #104]	; 0x68
 8001718:	46a8      	mov	r8, r5
 800171a:	2205      	movs	r2, #5
 800171c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001720:	485e      	ldr	r0, [pc, #376]	; (800189c <_vfiprintf_r+0x210>)
 8001722:	f7fe fd65 	bl	80001f0 <memchr>
 8001726:	9b04      	ldr	r3, [sp, #16]
 8001728:	bb78      	cbnz	r0, 800178a <_vfiprintf_r+0xfe>
 800172a:	06d9      	lsls	r1, r3, #27
 800172c:	bf44      	itt	mi
 800172e:	2220      	movmi	r2, #32
 8001730:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001734:	071a      	lsls	r2, r3, #28
 8001736:	bf44      	itt	mi
 8001738:	222b      	movmi	r2, #43	; 0x2b
 800173a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800173e:	782a      	ldrb	r2, [r5, #0]
 8001740:	2a2a      	cmp	r2, #42	; 0x2a
 8001742:	d02a      	beq.n	800179a <_vfiprintf_r+0x10e>
 8001744:	9a07      	ldr	r2, [sp, #28]
 8001746:	46a8      	mov	r8, r5
 8001748:	2000      	movs	r0, #0
 800174a:	250a      	movs	r5, #10
 800174c:	4641      	mov	r1, r8
 800174e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001752:	3b30      	subs	r3, #48	; 0x30
 8001754:	2b09      	cmp	r3, #9
 8001756:	d969      	bls.n	800182c <_vfiprintf_r+0x1a0>
 8001758:	b360      	cbz	r0, 80017b4 <_vfiprintf_r+0x128>
 800175a:	e024      	b.n	80017a6 <_vfiprintf_r+0x11a>
 800175c:	4b50      	ldr	r3, [pc, #320]	; (80018a0 <_vfiprintf_r+0x214>)
 800175e:	429c      	cmp	r4, r3
 8001760:	d101      	bne.n	8001766 <_vfiprintf_r+0xda>
 8001762:	68b4      	ldr	r4, [r6, #8]
 8001764:	e7a2      	b.n	80016ac <_vfiprintf_r+0x20>
 8001766:	4b4f      	ldr	r3, [pc, #316]	; (80018a4 <_vfiprintf_r+0x218>)
 8001768:	429c      	cmp	r4, r3
 800176a:	bf08      	it	eq
 800176c:	68f4      	ldreq	r4, [r6, #12]
 800176e:	e79d      	b.n	80016ac <_vfiprintf_r+0x20>
 8001770:	4621      	mov	r1, r4
 8001772:	4630      	mov	r0, r6
 8001774:	f000 fae0 	bl	8001d38 <__swsetup_r>
 8001778:	2800      	cmp	r0, #0
 800177a:	d09d      	beq.n	80016b8 <_vfiprintf_r+0x2c>
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	b01d      	add	sp, #116	; 0x74
 8001782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001786:	46a8      	mov	r8, r5
 8001788:	e7a2      	b.n	80016d0 <_vfiprintf_r+0x44>
 800178a:	4a44      	ldr	r2, [pc, #272]	; (800189c <_vfiprintf_r+0x210>)
 800178c:	1a80      	subs	r0, r0, r2
 800178e:	fa0b f000 	lsl.w	r0, fp, r0
 8001792:	4318      	orrs	r0, r3
 8001794:	9004      	str	r0, [sp, #16]
 8001796:	4645      	mov	r5, r8
 8001798:	e7be      	b.n	8001718 <_vfiprintf_r+0x8c>
 800179a:	9a03      	ldr	r2, [sp, #12]
 800179c:	1d11      	adds	r1, r2, #4
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	9103      	str	r1, [sp, #12]
 80017a2:	2a00      	cmp	r2, #0
 80017a4:	db01      	blt.n	80017aa <_vfiprintf_r+0x11e>
 80017a6:	9207      	str	r2, [sp, #28]
 80017a8:	e004      	b.n	80017b4 <_vfiprintf_r+0x128>
 80017aa:	4252      	negs	r2, r2
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	9207      	str	r2, [sp, #28]
 80017b2:	9304      	str	r3, [sp, #16]
 80017b4:	f898 3000 	ldrb.w	r3, [r8]
 80017b8:	2b2e      	cmp	r3, #46	; 0x2e
 80017ba:	d10e      	bne.n	80017da <_vfiprintf_r+0x14e>
 80017bc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80017c0:	2b2a      	cmp	r3, #42	; 0x2a
 80017c2:	d138      	bne.n	8001836 <_vfiprintf_r+0x1aa>
 80017c4:	9b03      	ldr	r3, [sp, #12]
 80017c6:	1d1a      	adds	r2, r3, #4
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	9203      	str	r2, [sp, #12]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bfb8      	it	lt
 80017d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80017d4:	f108 0802 	add.w	r8, r8, #2
 80017d8:	9305      	str	r3, [sp, #20]
 80017da:	4d33      	ldr	r5, [pc, #204]	; (80018a8 <_vfiprintf_r+0x21c>)
 80017dc:	f898 1000 	ldrb.w	r1, [r8]
 80017e0:	2203      	movs	r2, #3
 80017e2:	4628      	mov	r0, r5
 80017e4:	f7fe fd04 	bl	80001f0 <memchr>
 80017e8:	b140      	cbz	r0, 80017fc <_vfiprintf_r+0x170>
 80017ea:	2340      	movs	r3, #64	; 0x40
 80017ec:	1b40      	subs	r0, r0, r5
 80017ee:	fa03 f000 	lsl.w	r0, r3, r0
 80017f2:	9b04      	ldr	r3, [sp, #16]
 80017f4:	4303      	orrs	r3, r0
 80017f6:	f108 0801 	add.w	r8, r8, #1
 80017fa:	9304      	str	r3, [sp, #16]
 80017fc:	f898 1000 	ldrb.w	r1, [r8]
 8001800:	482a      	ldr	r0, [pc, #168]	; (80018ac <_vfiprintf_r+0x220>)
 8001802:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001806:	2206      	movs	r2, #6
 8001808:	f108 0701 	add.w	r7, r8, #1
 800180c:	f7fe fcf0 	bl	80001f0 <memchr>
 8001810:	2800      	cmp	r0, #0
 8001812:	d037      	beq.n	8001884 <_vfiprintf_r+0x1f8>
 8001814:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <_vfiprintf_r+0x224>)
 8001816:	bb1b      	cbnz	r3, 8001860 <_vfiprintf_r+0x1d4>
 8001818:	9b03      	ldr	r3, [sp, #12]
 800181a:	3307      	adds	r3, #7
 800181c:	f023 0307 	bic.w	r3, r3, #7
 8001820:	3308      	adds	r3, #8
 8001822:	9303      	str	r3, [sp, #12]
 8001824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001826:	444b      	add	r3, r9
 8001828:	9309      	str	r3, [sp, #36]	; 0x24
 800182a:	e750      	b.n	80016ce <_vfiprintf_r+0x42>
 800182c:	fb05 3202 	mla	r2, r5, r2, r3
 8001830:	2001      	movs	r0, #1
 8001832:	4688      	mov	r8, r1
 8001834:	e78a      	b.n	800174c <_vfiprintf_r+0xc0>
 8001836:	2300      	movs	r3, #0
 8001838:	f108 0801 	add.w	r8, r8, #1
 800183c:	9305      	str	r3, [sp, #20]
 800183e:	4619      	mov	r1, r3
 8001840:	250a      	movs	r5, #10
 8001842:	4640      	mov	r0, r8
 8001844:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001848:	3a30      	subs	r2, #48	; 0x30
 800184a:	2a09      	cmp	r2, #9
 800184c:	d903      	bls.n	8001856 <_vfiprintf_r+0x1ca>
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0c3      	beq.n	80017da <_vfiprintf_r+0x14e>
 8001852:	9105      	str	r1, [sp, #20]
 8001854:	e7c1      	b.n	80017da <_vfiprintf_r+0x14e>
 8001856:	fb05 2101 	mla	r1, r5, r1, r2
 800185a:	2301      	movs	r3, #1
 800185c:	4680      	mov	r8, r0
 800185e:	e7f0      	b.n	8001842 <_vfiprintf_r+0x1b6>
 8001860:	ab03      	add	r3, sp, #12
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	4622      	mov	r2, r4
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <_vfiprintf_r+0x228>)
 8001868:	a904      	add	r1, sp, #16
 800186a:	4630      	mov	r0, r6
 800186c:	f3af 8000 	nop.w
 8001870:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001874:	4681      	mov	r9, r0
 8001876:	d1d5      	bne.n	8001824 <_vfiprintf_r+0x198>
 8001878:	89a3      	ldrh	r3, [r4, #12]
 800187a:	065b      	lsls	r3, r3, #25
 800187c:	f53f af7e 	bmi.w	800177c <_vfiprintf_r+0xf0>
 8001880:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001882:	e77d      	b.n	8001780 <_vfiprintf_r+0xf4>
 8001884:	ab03      	add	r3, sp, #12
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	4622      	mov	r2, r4
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <_vfiprintf_r+0x228>)
 800188c:	a904      	add	r1, sp, #16
 800188e:	4630      	mov	r0, r6
 8001890:	f000 f888 	bl	80019a4 <_printf_i>
 8001894:	e7ec      	b.n	8001870 <_vfiprintf_r+0x1e4>
 8001896:	bf00      	nop
 8001898:	080021e8 	.word	0x080021e8
 800189c:	08002228 	.word	0x08002228
 80018a0:	08002208 	.word	0x08002208
 80018a4:	080021c8 	.word	0x080021c8
 80018a8:	0800222e 	.word	0x0800222e
 80018ac:	08002232 	.word	0x08002232
 80018b0:	00000000 	.word	0x00000000
 80018b4:	08001667 	.word	0x08001667

080018b8 <_printf_common>:
 80018b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018bc:	4691      	mov	r9, r2
 80018be:	461f      	mov	r7, r3
 80018c0:	688a      	ldr	r2, [r1, #8]
 80018c2:	690b      	ldr	r3, [r1, #16]
 80018c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80018c8:	4293      	cmp	r3, r2
 80018ca:	bfb8      	it	lt
 80018cc:	4613      	movlt	r3, r2
 80018ce:	f8c9 3000 	str.w	r3, [r9]
 80018d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80018d6:	4606      	mov	r6, r0
 80018d8:	460c      	mov	r4, r1
 80018da:	b112      	cbz	r2, 80018e2 <_printf_common+0x2a>
 80018dc:	3301      	adds	r3, #1
 80018de:	f8c9 3000 	str.w	r3, [r9]
 80018e2:	6823      	ldr	r3, [r4, #0]
 80018e4:	0699      	lsls	r1, r3, #26
 80018e6:	bf42      	ittt	mi
 80018e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80018ec:	3302      	addmi	r3, #2
 80018ee:	f8c9 3000 	strmi.w	r3, [r9]
 80018f2:	6825      	ldr	r5, [r4, #0]
 80018f4:	f015 0506 	ands.w	r5, r5, #6
 80018f8:	d107      	bne.n	800190a <_printf_common+0x52>
 80018fa:	f104 0a19 	add.w	sl, r4, #25
 80018fe:	68e3      	ldr	r3, [r4, #12]
 8001900:	f8d9 2000 	ldr.w	r2, [r9]
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	42ab      	cmp	r3, r5
 8001908:	dc28      	bgt.n	800195c <_printf_common+0xa4>
 800190a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800190e:	6822      	ldr	r2, [r4, #0]
 8001910:	3300      	adds	r3, #0
 8001912:	bf18      	it	ne
 8001914:	2301      	movne	r3, #1
 8001916:	0692      	lsls	r2, r2, #26
 8001918:	d42d      	bmi.n	8001976 <_printf_common+0xbe>
 800191a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800191e:	4639      	mov	r1, r7
 8001920:	4630      	mov	r0, r6
 8001922:	47c0      	blx	r8
 8001924:	3001      	adds	r0, #1
 8001926:	d020      	beq.n	800196a <_printf_common+0xb2>
 8001928:	6823      	ldr	r3, [r4, #0]
 800192a:	68e5      	ldr	r5, [r4, #12]
 800192c:	f8d9 2000 	ldr.w	r2, [r9]
 8001930:	f003 0306 	and.w	r3, r3, #6
 8001934:	2b04      	cmp	r3, #4
 8001936:	bf08      	it	eq
 8001938:	1aad      	subeq	r5, r5, r2
 800193a:	68a3      	ldr	r3, [r4, #8]
 800193c:	6922      	ldr	r2, [r4, #16]
 800193e:	bf0c      	ite	eq
 8001940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001944:	2500      	movne	r5, #0
 8001946:	4293      	cmp	r3, r2
 8001948:	bfc4      	itt	gt
 800194a:	1a9b      	subgt	r3, r3, r2
 800194c:	18ed      	addgt	r5, r5, r3
 800194e:	f04f 0900 	mov.w	r9, #0
 8001952:	341a      	adds	r4, #26
 8001954:	454d      	cmp	r5, r9
 8001956:	d11a      	bne.n	800198e <_printf_common+0xd6>
 8001958:	2000      	movs	r0, #0
 800195a:	e008      	b.n	800196e <_printf_common+0xb6>
 800195c:	2301      	movs	r3, #1
 800195e:	4652      	mov	r2, sl
 8001960:	4639      	mov	r1, r7
 8001962:	4630      	mov	r0, r6
 8001964:	47c0      	blx	r8
 8001966:	3001      	adds	r0, #1
 8001968:	d103      	bne.n	8001972 <_printf_common+0xba>
 800196a:	f04f 30ff 	mov.w	r0, #4294967295
 800196e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001972:	3501      	adds	r5, #1
 8001974:	e7c3      	b.n	80018fe <_printf_common+0x46>
 8001976:	18e1      	adds	r1, r4, r3
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	2030      	movs	r0, #48	; 0x30
 800197c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001980:	4422      	add	r2, r4
 8001982:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001986:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800198a:	3302      	adds	r3, #2
 800198c:	e7c5      	b.n	800191a <_printf_common+0x62>
 800198e:	2301      	movs	r3, #1
 8001990:	4622      	mov	r2, r4
 8001992:	4639      	mov	r1, r7
 8001994:	4630      	mov	r0, r6
 8001996:	47c0      	blx	r8
 8001998:	3001      	adds	r0, #1
 800199a:	d0e6      	beq.n	800196a <_printf_common+0xb2>
 800199c:	f109 0901 	add.w	r9, r9, #1
 80019a0:	e7d8      	b.n	8001954 <_printf_common+0x9c>
	...

080019a4 <_printf_i>:
 80019a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80019ac:	460c      	mov	r4, r1
 80019ae:	7e09      	ldrb	r1, [r1, #24]
 80019b0:	b085      	sub	sp, #20
 80019b2:	296e      	cmp	r1, #110	; 0x6e
 80019b4:	4617      	mov	r7, r2
 80019b6:	4606      	mov	r6, r0
 80019b8:	4698      	mov	r8, r3
 80019ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80019bc:	f000 80b3 	beq.w	8001b26 <_printf_i+0x182>
 80019c0:	d822      	bhi.n	8001a08 <_printf_i+0x64>
 80019c2:	2963      	cmp	r1, #99	; 0x63
 80019c4:	d036      	beq.n	8001a34 <_printf_i+0x90>
 80019c6:	d80a      	bhi.n	80019de <_printf_i+0x3a>
 80019c8:	2900      	cmp	r1, #0
 80019ca:	f000 80b9 	beq.w	8001b40 <_printf_i+0x19c>
 80019ce:	2958      	cmp	r1, #88	; 0x58
 80019d0:	f000 8083 	beq.w	8001ada <_printf_i+0x136>
 80019d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80019d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80019dc:	e032      	b.n	8001a44 <_printf_i+0xa0>
 80019de:	2964      	cmp	r1, #100	; 0x64
 80019e0:	d001      	beq.n	80019e6 <_printf_i+0x42>
 80019e2:	2969      	cmp	r1, #105	; 0x69
 80019e4:	d1f6      	bne.n	80019d4 <_printf_i+0x30>
 80019e6:	6820      	ldr	r0, [r4, #0]
 80019e8:	6813      	ldr	r3, [r2, #0]
 80019ea:	0605      	lsls	r5, r0, #24
 80019ec:	f103 0104 	add.w	r1, r3, #4
 80019f0:	d52a      	bpl.n	8001a48 <_printf_i+0xa4>
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6011      	str	r1, [r2, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	da03      	bge.n	8001a02 <_printf_i+0x5e>
 80019fa:	222d      	movs	r2, #45	; 0x2d
 80019fc:	425b      	negs	r3, r3
 80019fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001a02:	486f      	ldr	r0, [pc, #444]	; (8001bc0 <_printf_i+0x21c>)
 8001a04:	220a      	movs	r2, #10
 8001a06:	e039      	b.n	8001a7c <_printf_i+0xd8>
 8001a08:	2973      	cmp	r1, #115	; 0x73
 8001a0a:	f000 809d 	beq.w	8001b48 <_printf_i+0x1a4>
 8001a0e:	d808      	bhi.n	8001a22 <_printf_i+0x7e>
 8001a10:	296f      	cmp	r1, #111	; 0x6f
 8001a12:	d020      	beq.n	8001a56 <_printf_i+0xb2>
 8001a14:	2970      	cmp	r1, #112	; 0x70
 8001a16:	d1dd      	bne.n	80019d4 <_printf_i+0x30>
 8001a18:	6823      	ldr	r3, [r4, #0]
 8001a1a:	f043 0320 	orr.w	r3, r3, #32
 8001a1e:	6023      	str	r3, [r4, #0]
 8001a20:	e003      	b.n	8001a2a <_printf_i+0x86>
 8001a22:	2975      	cmp	r1, #117	; 0x75
 8001a24:	d017      	beq.n	8001a56 <_printf_i+0xb2>
 8001a26:	2978      	cmp	r1, #120	; 0x78
 8001a28:	d1d4      	bne.n	80019d4 <_printf_i+0x30>
 8001a2a:	2378      	movs	r3, #120	; 0x78
 8001a2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001a30:	4864      	ldr	r0, [pc, #400]	; (8001bc4 <_printf_i+0x220>)
 8001a32:	e055      	b.n	8001ae0 <_printf_i+0x13c>
 8001a34:	6813      	ldr	r3, [r2, #0]
 8001a36:	1d19      	adds	r1, r3, #4
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6011      	str	r1, [r2, #0]
 8001a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a44:	2301      	movs	r3, #1
 8001a46:	e08c      	b.n	8001b62 <_printf_i+0x1be>
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6011      	str	r1, [r2, #0]
 8001a4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001a50:	bf18      	it	ne
 8001a52:	b21b      	sxthne	r3, r3
 8001a54:	e7cf      	b.n	80019f6 <_printf_i+0x52>
 8001a56:	6813      	ldr	r3, [r2, #0]
 8001a58:	6825      	ldr	r5, [r4, #0]
 8001a5a:	1d18      	adds	r0, r3, #4
 8001a5c:	6010      	str	r0, [r2, #0]
 8001a5e:	0628      	lsls	r0, r5, #24
 8001a60:	d501      	bpl.n	8001a66 <_printf_i+0xc2>
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	e002      	b.n	8001a6c <_printf_i+0xc8>
 8001a66:	0668      	lsls	r0, r5, #25
 8001a68:	d5fb      	bpl.n	8001a62 <_printf_i+0xbe>
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	4854      	ldr	r0, [pc, #336]	; (8001bc0 <_printf_i+0x21c>)
 8001a6e:	296f      	cmp	r1, #111	; 0x6f
 8001a70:	bf14      	ite	ne
 8001a72:	220a      	movne	r2, #10
 8001a74:	2208      	moveq	r2, #8
 8001a76:	2100      	movs	r1, #0
 8001a78:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001a7c:	6865      	ldr	r5, [r4, #4]
 8001a7e:	60a5      	str	r5, [r4, #8]
 8001a80:	2d00      	cmp	r5, #0
 8001a82:	f2c0 8095 	blt.w	8001bb0 <_printf_i+0x20c>
 8001a86:	6821      	ldr	r1, [r4, #0]
 8001a88:	f021 0104 	bic.w	r1, r1, #4
 8001a8c:	6021      	str	r1, [r4, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d13d      	bne.n	8001b0e <_printf_i+0x16a>
 8001a92:	2d00      	cmp	r5, #0
 8001a94:	f040 808e 	bne.w	8001bb4 <_printf_i+0x210>
 8001a98:	4665      	mov	r5, ip
 8001a9a:	2a08      	cmp	r2, #8
 8001a9c:	d10b      	bne.n	8001ab6 <_printf_i+0x112>
 8001a9e:	6823      	ldr	r3, [r4, #0]
 8001aa0:	07db      	lsls	r3, r3, #31
 8001aa2:	d508      	bpl.n	8001ab6 <_printf_i+0x112>
 8001aa4:	6923      	ldr	r3, [r4, #16]
 8001aa6:	6862      	ldr	r2, [r4, #4]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	bfde      	ittt	le
 8001aac:	2330      	movle	r3, #48	; 0x30
 8001aae:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001ab2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001ab6:	ebac 0305 	sub.w	r3, ip, r5
 8001aba:	6123      	str	r3, [r4, #16]
 8001abc:	f8cd 8000 	str.w	r8, [sp]
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	aa03      	add	r2, sp, #12
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	4630      	mov	r0, r6
 8001ac8:	f7ff fef6 	bl	80018b8 <_printf_common>
 8001acc:	3001      	adds	r0, #1
 8001ace:	d14d      	bne.n	8001b6c <_printf_i+0x1c8>
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	b005      	add	sp, #20
 8001ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ada:	4839      	ldr	r0, [pc, #228]	; (8001bc0 <_printf_i+0x21c>)
 8001adc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001ae0:	6813      	ldr	r3, [r2, #0]
 8001ae2:	6821      	ldr	r1, [r4, #0]
 8001ae4:	1d1d      	adds	r5, r3, #4
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6015      	str	r5, [r2, #0]
 8001aea:	060a      	lsls	r2, r1, #24
 8001aec:	d50b      	bpl.n	8001b06 <_printf_i+0x162>
 8001aee:	07ca      	lsls	r2, r1, #31
 8001af0:	bf44      	itt	mi
 8001af2:	f041 0120 	orrmi.w	r1, r1, #32
 8001af6:	6021      	strmi	r1, [r4, #0]
 8001af8:	b91b      	cbnz	r3, 8001b02 <_printf_i+0x15e>
 8001afa:	6822      	ldr	r2, [r4, #0]
 8001afc:	f022 0220 	bic.w	r2, r2, #32
 8001b00:	6022      	str	r2, [r4, #0]
 8001b02:	2210      	movs	r2, #16
 8001b04:	e7b7      	b.n	8001a76 <_printf_i+0xd2>
 8001b06:	064d      	lsls	r5, r1, #25
 8001b08:	bf48      	it	mi
 8001b0a:	b29b      	uxthmi	r3, r3
 8001b0c:	e7ef      	b.n	8001aee <_printf_i+0x14a>
 8001b0e:	4665      	mov	r5, ip
 8001b10:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b14:	fb02 3311 	mls	r3, r2, r1, r3
 8001b18:	5cc3      	ldrb	r3, [r0, r3]
 8001b1a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001b1e:	460b      	mov	r3, r1
 8001b20:	2900      	cmp	r1, #0
 8001b22:	d1f5      	bne.n	8001b10 <_printf_i+0x16c>
 8001b24:	e7b9      	b.n	8001a9a <_printf_i+0xf6>
 8001b26:	6813      	ldr	r3, [r2, #0]
 8001b28:	6825      	ldr	r5, [r4, #0]
 8001b2a:	6961      	ldr	r1, [r4, #20]
 8001b2c:	1d18      	adds	r0, r3, #4
 8001b2e:	6010      	str	r0, [r2, #0]
 8001b30:	0628      	lsls	r0, r5, #24
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	d501      	bpl.n	8001b3a <_printf_i+0x196>
 8001b36:	6019      	str	r1, [r3, #0]
 8001b38:	e002      	b.n	8001b40 <_printf_i+0x19c>
 8001b3a:	066a      	lsls	r2, r5, #25
 8001b3c:	d5fb      	bpl.n	8001b36 <_printf_i+0x192>
 8001b3e:	8019      	strh	r1, [r3, #0]
 8001b40:	2300      	movs	r3, #0
 8001b42:	6123      	str	r3, [r4, #16]
 8001b44:	4665      	mov	r5, ip
 8001b46:	e7b9      	b.n	8001abc <_printf_i+0x118>
 8001b48:	6813      	ldr	r3, [r2, #0]
 8001b4a:	1d19      	adds	r1, r3, #4
 8001b4c:	6011      	str	r1, [r2, #0]
 8001b4e:	681d      	ldr	r5, [r3, #0]
 8001b50:	6862      	ldr	r2, [r4, #4]
 8001b52:	2100      	movs	r1, #0
 8001b54:	4628      	mov	r0, r5
 8001b56:	f7fe fb4b 	bl	80001f0 <memchr>
 8001b5a:	b108      	cbz	r0, 8001b60 <_printf_i+0x1bc>
 8001b5c:	1b40      	subs	r0, r0, r5
 8001b5e:	6060      	str	r0, [r4, #4]
 8001b60:	6863      	ldr	r3, [r4, #4]
 8001b62:	6123      	str	r3, [r4, #16]
 8001b64:	2300      	movs	r3, #0
 8001b66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b6a:	e7a7      	b.n	8001abc <_printf_i+0x118>
 8001b6c:	6923      	ldr	r3, [r4, #16]
 8001b6e:	462a      	mov	r2, r5
 8001b70:	4639      	mov	r1, r7
 8001b72:	4630      	mov	r0, r6
 8001b74:	47c0      	blx	r8
 8001b76:	3001      	adds	r0, #1
 8001b78:	d0aa      	beq.n	8001ad0 <_printf_i+0x12c>
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	079b      	lsls	r3, r3, #30
 8001b7e:	d413      	bmi.n	8001ba8 <_printf_i+0x204>
 8001b80:	68e0      	ldr	r0, [r4, #12]
 8001b82:	9b03      	ldr	r3, [sp, #12]
 8001b84:	4298      	cmp	r0, r3
 8001b86:	bfb8      	it	lt
 8001b88:	4618      	movlt	r0, r3
 8001b8a:	e7a3      	b.n	8001ad4 <_printf_i+0x130>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	464a      	mov	r2, r9
 8001b90:	4639      	mov	r1, r7
 8001b92:	4630      	mov	r0, r6
 8001b94:	47c0      	blx	r8
 8001b96:	3001      	adds	r0, #1
 8001b98:	d09a      	beq.n	8001ad0 <_printf_i+0x12c>
 8001b9a:	3501      	adds	r5, #1
 8001b9c:	68e3      	ldr	r3, [r4, #12]
 8001b9e:	9a03      	ldr	r2, [sp, #12]
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	42ab      	cmp	r3, r5
 8001ba4:	dcf2      	bgt.n	8001b8c <_printf_i+0x1e8>
 8001ba6:	e7eb      	b.n	8001b80 <_printf_i+0x1dc>
 8001ba8:	2500      	movs	r5, #0
 8001baa:	f104 0919 	add.w	r9, r4, #25
 8001bae:	e7f5      	b.n	8001b9c <_printf_i+0x1f8>
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1ac      	bne.n	8001b0e <_printf_i+0x16a>
 8001bb4:	7803      	ldrb	r3, [r0, #0]
 8001bb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bbe:	e76c      	b.n	8001a9a <_printf_i+0xf6>
 8001bc0:	08002239 	.word	0x08002239
 8001bc4:	0800224a 	.word	0x0800224a

08001bc8 <_sbrk_r>:
 8001bc8:	b538      	push	{r3, r4, r5, lr}
 8001bca:	4c06      	ldr	r4, [pc, #24]	; (8001be4 <_sbrk_r+0x1c>)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4605      	mov	r5, r0
 8001bd0:	4608      	mov	r0, r1
 8001bd2:	6023      	str	r3, [r4, #0]
 8001bd4:	f7fe fcb8 	bl	8000548 <_sbrk>
 8001bd8:	1c43      	adds	r3, r0, #1
 8001bda:	d102      	bne.n	8001be2 <_sbrk_r+0x1a>
 8001bdc:	6823      	ldr	r3, [r4, #0]
 8001bde:	b103      	cbz	r3, 8001be2 <_sbrk_r+0x1a>
 8001be0:	602b      	str	r3, [r5, #0]
 8001be2:	bd38      	pop	{r3, r4, r5, pc}
 8001be4:	2000008c 	.word	0x2000008c

08001be8 <__sread>:
 8001be8:	b510      	push	{r4, lr}
 8001bea:	460c      	mov	r4, r1
 8001bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bf0:	f000 fa96 	bl	8002120 <_read_r>
 8001bf4:	2800      	cmp	r0, #0
 8001bf6:	bfab      	itete	ge
 8001bf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001bfa:	89a3      	ldrhlt	r3, [r4, #12]
 8001bfc:	181b      	addge	r3, r3, r0
 8001bfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001c02:	bfac      	ite	ge
 8001c04:	6563      	strge	r3, [r4, #84]	; 0x54
 8001c06:	81a3      	strhlt	r3, [r4, #12]
 8001c08:	bd10      	pop	{r4, pc}

08001c0a <__swrite>:
 8001c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c0e:	461f      	mov	r7, r3
 8001c10:	898b      	ldrh	r3, [r1, #12]
 8001c12:	05db      	lsls	r3, r3, #23
 8001c14:	4605      	mov	r5, r0
 8001c16:	460c      	mov	r4, r1
 8001c18:	4616      	mov	r6, r2
 8001c1a:	d505      	bpl.n	8001c28 <__swrite+0x1e>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c24:	f000 f9b6 	bl	8001f94 <_lseek_r>
 8001c28:	89a3      	ldrh	r3, [r4, #12]
 8001c2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c32:	81a3      	strh	r3, [r4, #12]
 8001c34:	4632      	mov	r2, r6
 8001c36:	463b      	mov	r3, r7
 8001c38:	4628      	mov	r0, r5
 8001c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c3e:	f000 b869 	b.w	8001d14 <_write_r>

08001c42 <__sseek>:
 8001c42:	b510      	push	{r4, lr}
 8001c44:	460c      	mov	r4, r1
 8001c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c4a:	f000 f9a3 	bl	8001f94 <_lseek_r>
 8001c4e:	1c43      	adds	r3, r0, #1
 8001c50:	89a3      	ldrh	r3, [r4, #12]
 8001c52:	bf15      	itete	ne
 8001c54:	6560      	strne	r0, [r4, #84]	; 0x54
 8001c56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001c5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001c5e:	81a3      	strheq	r3, [r4, #12]
 8001c60:	bf18      	it	ne
 8001c62:	81a3      	strhne	r3, [r4, #12]
 8001c64:	bd10      	pop	{r4, pc}

08001c66 <__sclose>:
 8001c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c6a:	f000 b8d3 	b.w	8001e14 <_close_r>
	...

08001c70 <__swbuf_r>:
 8001c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c72:	460e      	mov	r6, r1
 8001c74:	4614      	mov	r4, r2
 8001c76:	4605      	mov	r5, r0
 8001c78:	b118      	cbz	r0, 8001c82 <__swbuf_r+0x12>
 8001c7a:	6983      	ldr	r3, [r0, #24]
 8001c7c:	b90b      	cbnz	r3, 8001c82 <__swbuf_r+0x12>
 8001c7e:	f7ff fbf7 	bl	8001470 <__sinit>
 8001c82:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <__swbuf_r+0x98>)
 8001c84:	429c      	cmp	r4, r3
 8001c86:	d12a      	bne.n	8001cde <__swbuf_r+0x6e>
 8001c88:	686c      	ldr	r4, [r5, #4]
 8001c8a:	69a3      	ldr	r3, [r4, #24]
 8001c8c:	60a3      	str	r3, [r4, #8]
 8001c8e:	89a3      	ldrh	r3, [r4, #12]
 8001c90:	071a      	lsls	r2, r3, #28
 8001c92:	d52e      	bpl.n	8001cf2 <__swbuf_r+0x82>
 8001c94:	6923      	ldr	r3, [r4, #16]
 8001c96:	b363      	cbz	r3, 8001cf2 <__swbuf_r+0x82>
 8001c98:	6923      	ldr	r3, [r4, #16]
 8001c9a:	6820      	ldr	r0, [r4, #0]
 8001c9c:	1ac0      	subs	r0, r0, r3
 8001c9e:	6963      	ldr	r3, [r4, #20]
 8001ca0:	b2f6      	uxtb	r6, r6
 8001ca2:	4283      	cmp	r3, r0
 8001ca4:	4637      	mov	r7, r6
 8001ca6:	dc04      	bgt.n	8001cb2 <__swbuf_r+0x42>
 8001ca8:	4621      	mov	r1, r4
 8001caa:	4628      	mov	r0, r5
 8001cac:	f000 f948 	bl	8001f40 <_fflush_r>
 8001cb0:	bb28      	cbnz	r0, 8001cfe <__swbuf_r+0x8e>
 8001cb2:	68a3      	ldr	r3, [r4, #8]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	60a3      	str	r3, [r4, #8]
 8001cb8:	6823      	ldr	r3, [r4, #0]
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	6022      	str	r2, [r4, #0]
 8001cbe:	701e      	strb	r6, [r3, #0]
 8001cc0:	6963      	ldr	r3, [r4, #20]
 8001cc2:	3001      	adds	r0, #1
 8001cc4:	4283      	cmp	r3, r0
 8001cc6:	d004      	beq.n	8001cd2 <__swbuf_r+0x62>
 8001cc8:	89a3      	ldrh	r3, [r4, #12]
 8001cca:	07db      	lsls	r3, r3, #31
 8001ccc:	d519      	bpl.n	8001d02 <__swbuf_r+0x92>
 8001cce:	2e0a      	cmp	r6, #10
 8001cd0:	d117      	bne.n	8001d02 <__swbuf_r+0x92>
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	4628      	mov	r0, r5
 8001cd6:	f000 f933 	bl	8001f40 <_fflush_r>
 8001cda:	b190      	cbz	r0, 8001d02 <__swbuf_r+0x92>
 8001cdc:	e00f      	b.n	8001cfe <__swbuf_r+0x8e>
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <__swbuf_r+0x9c>)
 8001ce0:	429c      	cmp	r4, r3
 8001ce2:	d101      	bne.n	8001ce8 <__swbuf_r+0x78>
 8001ce4:	68ac      	ldr	r4, [r5, #8]
 8001ce6:	e7d0      	b.n	8001c8a <__swbuf_r+0x1a>
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <__swbuf_r+0xa0>)
 8001cea:	429c      	cmp	r4, r3
 8001cec:	bf08      	it	eq
 8001cee:	68ec      	ldreq	r4, [r5, #12]
 8001cf0:	e7cb      	b.n	8001c8a <__swbuf_r+0x1a>
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	4628      	mov	r0, r5
 8001cf6:	f000 f81f 	bl	8001d38 <__swsetup_r>
 8001cfa:	2800      	cmp	r0, #0
 8001cfc:	d0cc      	beq.n	8001c98 <__swbuf_r+0x28>
 8001cfe:	f04f 37ff 	mov.w	r7, #4294967295
 8001d02:	4638      	mov	r0, r7
 8001d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d06:	bf00      	nop
 8001d08:	080021e8 	.word	0x080021e8
 8001d0c:	08002208 	.word	0x08002208
 8001d10:	080021c8 	.word	0x080021c8

08001d14 <_write_r>:
 8001d14:	b538      	push	{r3, r4, r5, lr}
 8001d16:	4c07      	ldr	r4, [pc, #28]	; (8001d34 <_write_r+0x20>)
 8001d18:	4605      	mov	r5, r0
 8001d1a:	4608      	mov	r0, r1
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	2200      	movs	r2, #0
 8001d20:	6022      	str	r2, [r4, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	f7fe fbbf 	bl	80004a6 <_write>
 8001d28:	1c43      	adds	r3, r0, #1
 8001d2a:	d102      	bne.n	8001d32 <_write_r+0x1e>
 8001d2c:	6823      	ldr	r3, [r4, #0]
 8001d2e:	b103      	cbz	r3, 8001d32 <_write_r+0x1e>
 8001d30:	602b      	str	r3, [r5, #0]
 8001d32:	bd38      	pop	{r3, r4, r5, pc}
 8001d34:	2000008c 	.word	0x2000008c

08001d38 <__swsetup_r>:
 8001d38:	4b32      	ldr	r3, [pc, #200]	; (8001e04 <__swsetup_r+0xcc>)
 8001d3a:	b570      	push	{r4, r5, r6, lr}
 8001d3c:	681d      	ldr	r5, [r3, #0]
 8001d3e:	4606      	mov	r6, r0
 8001d40:	460c      	mov	r4, r1
 8001d42:	b125      	cbz	r5, 8001d4e <__swsetup_r+0x16>
 8001d44:	69ab      	ldr	r3, [r5, #24]
 8001d46:	b913      	cbnz	r3, 8001d4e <__swsetup_r+0x16>
 8001d48:	4628      	mov	r0, r5
 8001d4a:	f7ff fb91 	bl	8001470 <__sinit>
 8001d4e:	4b2e      	ldr	r3, [pc, #184]	; (8001e08 <__swsetup_r+0xd0>)
 8001d50:	429c      	cmp	r4, r3
 8001d52:	d10f      	bne.n	8001d74 <__swsetup_r+0x3c>
 8001d54:	686c      	ldr	r4, [r5, #4]
 8001d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	0715      	lsls	r5, r2, #28
 8001d5e:	d42c      	bmi.n	8001dba <__swsetup_r+0x82>
 8001d60:	06d0      	lsls	r0, r2, #27
 8001d62:	d411      	bmi.n	8001d88 <__swsetup_r+0x50>
 8001d64:	2209      	movs	r2, #9
 8001d66:	6032      	str	r2, [r6, #0]
 8001d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d6c:	81a3      	strh	r3, [r4, #12]
 8001d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d72:	e03e      	b.n	8001df2 <__swsetup_r+0xba>
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <__swsetup_r+0xd4>)
 8001d76:	429c      	cmp	r4, r3
 8001d78:	d101      	bne.n	8001d7e <__swsetup_r+0x46>
 8001d7a:	68ac      	ldr	r4, [r5, #8]
 8001d7c:	e7eb      	b.n	8001d56 <__swsetup_r+0x1e>
 8001d7e:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <__swsetup_r+0xd8>)
 8001d80:	429c      	cmp	r4, r3
 8001d82:	bf08      	it	eq
 8001d84:	68ec      	ldreq	r4, [r5, #12]
 8001d86:	e7e6      	b.n	8001d56 <__swsetup_r+0x1e>
 8001d88:	0751      	lsls	r1, r2, #29
 8001d8a:	d512      	bpl.n	8001db2 <__swsetup_r+0x7a>
 8001d8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d8e:	b141      	cbz	r1, 8001da2 <__swsetup_r+0x6a>
 8001d90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d94:	4299      	cmp	r1, r3
 8001d96:	d002      	beq.n	8001d9e <__swsetup_r+0x66>
 8001d98:	4630      	mov	r0, r6
 8001d9a:	f000 f973 	bl	8002084 <_free_r>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	6363      	str	r3, [r4, #52]	; 0x34
 8001da2:	89a3      	ldrh	r3, [r4, #12]
 8001da4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001da8:	81a3      	strh	r3, [r4, #12]
 8001daa:	2300      	movs	r3, #0
 8001dac:	6063      	str	r3, [r4, #4]
 8001dae:	6923      	ldr	r3, [r4, #16]
 8001db0:	6023      	str	r3, [r4, #0]
 8001db2:	89a3      	ldrh	r3, [r4, #12]
 8001db4:	f043 0308 	orr.w	r3, r3, #8
 8001db8:	81a3      	strh	r3, [r4, #12]
 8001dba:	6923      	ldr	r3, [r4, #16]
 8001dbc:	b94b      	cbnz	r3, 8001dd2 <__swsetup_r+0x9a>
 8001dbe:	89a3      	ldrh	r3, [r4, #12]
 8001dc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dc8:	d003      	beq.n	8001dd2 <__swsetup_r+0x9a>
 8001dca:	4621      	mov	r1, r4
 8001dcc:	4630      	mov	r0, r6
 8001dce:	f000 f917 	bl	8002000 <__smakebuf_r>
 8001dd2:	89a2      	ldrh	r2, [r4, #12]
 8001dd4:	f012 0301 	ands.w	r3, r2, #1
 8001dd8:	d00c      	beq.n	8001df4 <__swsetup_r+0xbc>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60a3      	str	r3, [r4, #8]
 8001dde:	6963      	ldr	r3, [r4, #20]
 8001de0:	425b      	negs	r3, r3
 8001de2:	61a3      	str	r3, [r4, #24]
 8001de4:	6923      	ldr	r3, [r4, #16]
 8001de6:	b953      	cbnz	r3, 8001dfe <__swsetup_r+0xc6>
 8001de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001df0:	d1ba      	bne.n	8001d68 <__swsetup_r+0x30>
 8001df2:	bd70      	pop	{r4, r5, r6, pc}
 8001df4:	0792      	lsls	r2, r2, #30
 8001df6:	bf58      	it	pl
 8001df8:	6963      	ldrpl	r3, [r4, #20]
 8001dfa:	60a3      	str	r3, [r4, #8]
 8001dfc:	e7f2      	b.n	8001de4 <__swsetup_r+0xac>
 8001dfe:	2000      	movs	r0, #0
 8001e00:	e7f7      	b.n	8001df2 <__swsetup_r+0xba>
 8001e02:	bf00      	nop
 8001e04:	20000000 	.word	0x20000000
 8001e08:	080021e8 	.word	0x080021e8
 8001e0c:	08002208 	.word	0x08002208
 8001e10:	080021c8 	.word	0x080021c8

08001e14 <_close_r>:
 8001e14:	b538      	push	{r3, r4, r5, lr}
 8001e16:	4c06      	ldr	r4, [pc, #24]	; (8001e30 <_close_r+0x1c>)
 8001e18:	2300      	movs	r3, #0
 8001e1a:	4605      	mov	r5, r0
 8001e1c:	4608      	mov	r0, r1
 8001e1e:	6023      	str	r3, [r4, #0]
 8001e20:	f7fe fb5d 	bl	80004de <_close>
 8001e24:	1c43      	adds	r3, r0, #1
 8001e26:	d102      	bne.n	8001e2e <_close_r+0x1a>
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	b103      	cbz	r3, 8001e2e <_close_r+0x1a>
 8001e2c:	602b      	str	r3, [r5, #0]
 8001e2e:	bd38      	pop	{r3, r4, r5, pc}
 8001e30:	2000008c 	.word	0x2000008c

08001e34 <__sflush_r>:
 8001e34:	898a      	ldrh	r2, [r1, #12]
 8001e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e3a:	4605      	mov	r5, r0
 8001e3c:	0710      	lsls	r0, r2, #28
 8001e3e:	460c      	mov	r4, r1
 8001e40:	d458      	bmi.n	8001ef4 <__sflush_r+0xc0>
 8001e42:	684b      	ldr	r3, [r1, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	dc05      	bgt.n	8001e54 <__sflush_r+0x20>
 8001e48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	dc02      	bgt.n	8001e54 <__sflush_r+0x20>
 8001e4e:	2000      	movs	r0, #0
 8001e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e56:	2e00      	cmp	r6, #0
 8001e58:	d0f9      	beq.n	8001e4e <__sflush_r+0x1a>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001e60:	682f      	ldr	r7, [r5, #0]
 8001e62:	6a21      	ldr	r1, [r4, #32]
 8001e64:	602b      	str	r3, [r5, #0]
 8001e66:	d032      	beq.n	8001ece <__sflush_r+0x9a>
 8001e68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e6a:	89a3      	ldrh	r3, [r4, #12]
 8001e6c:	075a      	lsls	r2, r3, #29
 8001e6e:	d505      	bpl.n	8001e7c <__sflush_r+0x48>
 8001e70:	6863      	ldr	r3, [r4, #4]
 8001e72:	1ac0      	subs	r0, r0, r3
 8001e74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e76:	b10b      	cbz	r3, 8001e7c <__sflush_r+0x48>
 8001e78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e7a:	1ac0      	subs	r0, r0, r3
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	4602      	mov	r2, r0
 8001e80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e82:	6a21      	ldr	r1, [r4, #32]
 8001e84:	4628      	mov	r0, r5
 8001e86:	47b0      	blx	r6
 8001e88:	1c43      	adds	r3, r0, #1
 8001e8a:	89a3      	ldrh	r3, [r4, #12]
 8001e8c:	d106      	bne.n	8001e9c <__sflush_r+0x68>
 8001e8e:	6829      	ldr	r1, [r5, #0]
 8001e90:	291d      	cmp	r1, #29
 8001e92:	d848      	bhi.n	8001f26 <__sflush_r+0xf2>
 8001e94:	4a29      	ldr	r2, [pc, #164]	; (8001f3c <__sflush_r+0x108>)
 8001e96:	40ca      	lsrs	r2, r1
 8001e98:	07d6      	lsls	r6, r2, #31
 8001e9a:	d544      	bpl.n	8001f26 <__sflush_r+0xf2>
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	6062      	str	r2, [r4, #4]
 8001ea0:	04d9      	lsls	r1, r3, #19
 8001ea2:	6922      	ldr	r2, [r4, #16]
 8001ea4:	6022      	str	r2, [r4, #0]
 8001ea6:	d504      	bpl.n	8001eb2 <__sflush_r+0x7e>
 8001ea8:	1c42      	adds	r2, r0, #1
 8001eaa:	d101      	bne.n	8001eb0 <__sflush_r+0x7c>
 8001eac:	682b      	ldr	r3, [r5, #0]
 8001eae:	b903      	cbnz	r3, 8001eb2 <__sflush_r+0x7e>
 8001eb0:	6560      	str	r0, [r4, #84]	; 0x54
 8001eb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001eb4:	602f      	str	r7, [r5, #0]
 8001eb6:	2900      	cmp	r1, #0
 8001eb8:	d0c9      	beq.n	8001e4e <__sflush_r+0x1a>
 8001eba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ebe:	4299      	cmp	r1, r3
 8001ec0:	d002      	beq.n	8001ec8 <__sflush_r+0x94>
 8001ec2:	4628      	mov	r0, r5
 8001ec4:	f000 f8de 	bl	8002084 <_free_r>
 8001ec8:	2000      	movs	r0, #0
 8001eca:	6360      	str	r0, [r4, #52]	; 0x34
 8001ecc:	e7c0      	b.n	8001e50 <__sflush_r+0x1c>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	4628      	mov	r0, r5
 8001ed2:	47b0      	blx	r6
 8001ed4:	1c41      	adds	r1, r0, #1
 8001ed6:	d1c8      	bne.n	8001e6a <__sflush_r+0x36>
 8001ed8:	682b      	ldr	r3, [r5, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0c5      	beq.n	8001e6a <__sflush_r+0x36>
 8001ede:	2b1d      	cmp	r3, #29
 8001ee0:	d001      	beq.n	8001ee6 <__sflush_r+0xb2>
 8001ee2:	2b16      	cmp	r3, #22
 8001ee4:	d101      	bne.n	8001eea <__sflush_r+0xb6>
 8001ee6:	602f      	str	r7, [r5, #0]
 8001ee8:	e7b1      	b.n	8001e4e <__sflush_r+0x1a>
 8001eea:	89a3      	ldrh	r3, [r4, #12]
 8001eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ef0:	81a3      	strh	r3, [r4, #12]
 8001ef2:	e7ad      	b.n	8001e50 <__sflush_r+0x1c>
 8001ef4:	690f      	ldr	r7, [r1, #16]
 8001ef6:	2f00      	cmp	r7, #0
 8001ef8:	d0a9      	beq.n	8001e4e <__sflush_r+0x1a>
 8001efa:	0793      	lsls	r3, r2, #30
 8001efc:	680e      	ldr	r6, [r1, #0]
 8001efe:	bf08      	it	eq
 8001f00:	694b      	ldreq	r3, [r1, #20]
 8001f02:	600f      	str	r7, [r1, #0]
 8001f04:	bf18      	it	ne
 8001f06:	2300      	movne	r3, #0
 8001f08:	eba6 0807 	sub.w	r8, r6, r7
 8001f0c:	608b      	str	r3, [r1, #8]
 8001f0e:	f1b8 0f00 	cmp.w	r8, #0
 8001f12:	dd9c      	ble.n	8001e4e <__sflush_r+0x1a>
 8001f14:	4643      	mov	r3, r8
 8001f16:	463a      	mov	r2, r7
 8001f18:	6a21      	ldr	r1, [r4, #32]
 8001f1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001f1c:	4628      	mov	r0, r5
 8001f1e:	47b0      	blx	r6
 8001f20:	2800      	cmp	r0, #0
 8001f22:	dc06      	bgt.n	8001f32 <__sflush_r+0xfe>
 8001f24:	89a3      	ldrh	r3, [r4, #12]
 8001f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f2a:	81a3      	strh	r3, [r4, #12]
 8001f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f30:	e78e      	b.n	8001e50 <__sflush_r+0x1c>
 8001f32:	4407      	add	r7, r0
 8001f34:	eba8 0800 	sub.w	r8, r8, r0
 8001f38:	e7e9      	b.n	8001f0e <__sflush_r+0xda>
 8001f3a:	bf00      	nop
 8001f3c:	20400001 	.word	0x20400001

08001f40 <_fflush_r>:
 8001f40:	b538      	push	{r3, r4, r5, lr}
 8001f42:	690b      	ldr	r3, [r1, #16]
 8001f44:	4605      	mov	r5, r0
 8001f46:	460c      	mov	r4, r1
 8001f48:	b1db      	cbz	r3, 8001f82 <_fflush_r+0x42>
 8001f4a:	b118      	cbz	r0, 8001f54 <_fflush_r+0x14>
 8001f4c:	6983      	ldr	r3, [r0, #24]
 8001f4e:	b90b      	cbnz	r3, 8001f54 <_fflush_r+0x14>
 8001f50:	f7ff fa8e 	bl	8001470 <__sinit>
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <_fflush_r+0x48>)
 8001f56:	429c      	cmp	r4, r3
 8001f58:	d109      	bne.n	8001f6e <_fflush_r+0x2e>
 8001f5a:	686c      	ldr	r4, [r5, #4]
 8001f5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f60:	b17b      	cbz	r3, 8001f82 <_fflush_r+0x42>
 8001f62:	4621      	mov	r1, r4
 8001f64:	4628      	mov	r0, r5
 8001f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f6a:	f7ff bf63 	b.w	8001e34 <__sflush_r>
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <_fflush_r+0x4c>)
 8001f70:	429c      	cmp	r4, r3
 8001f72:	d101      	bne.n	8001f78 <_fflush_r+0x38>
 8001f74:	68ac      	ldr	r4, [r5, #8]
 8001f76:	e7f1      	b.n	8001f5c <_fflush_r+0x1c>
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <_fflush_r+0x50>)
 8001f7a:	429c      	cmp	r4, r3
 8001f7c:	bf08      	it	eq
 8001f7e:	68ec      	ldreq	r4, [r5, #12]
 8001f80:	e7ec      	b.n	8001f5c <_fflush_r+0x1c>
 8001f82:	2000      	movs	r0, #0
 8001f84:	bd38      	pop	{r3, r4, r5, pc}
 8001f86:	bf00      	nop
 8001f88:	080021e8 	.word	0x080021e8
 8001f8c:	08002208 	.word	0x08002208
 8001f90:	080021c8 	.word	0x080021c8

08001f94 <_lseek_r>:
 8001f94:	b538      	push	{r3, r4, r5, lr}
 8001f96:	4c07      	ldr	r4, [pc, #28]	; (8001fb4 <_lseek_r+0x20>)
 8001f98:	4605      	mov	r5, r0
 8001f9a:	4608      	mov	r0, r1
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	6022      	str	r2, [r4, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	f7fe fac2 	bl	800052c <_lseek>
 8001fa8:	1c43      	adds	r3, r0, #1
 8001faa:	d102      	bne.n	8001fb2 <_lseek_r+0x1e>
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	b103      	cbz	r3, 8001fb2 <_lseek_r+0x1e>
 8001fb0:	602b      	str	r3, [r5, #0]
 8001fb2:	bd38      	pop	{r3, r4, r5, pc}
 8001fb4:	2000008c 	.word	0x2000008c

08001fb8 <__swhatbuf_r>:
 8001fb8:	b570      	push	{r4, r5, r6, lr}
 8001fba:	460e      	mov	r6, r1
 8001fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fc0:	2900      	cmp	r1, #0
 8001fc2:	b096      	sub	sp, #88	; 0x58
 8001fc4:	4614      	mov	r4, r2
 8001fc6:	461d      	mov	r5, r3
 8001fc8:	da07      	bge.n	8001fda <__swhatbuf_r+0x22>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	602b      	str	r3, [r5, #0]
 8001fce:	89b3      	ldrh	r3, [r6, #12]
 8001fd0:	061a      	lsls	r2, r3, #24
 8001fd2:	d410      	bmi.n	8001ff6 <__swhatbuf_r+0x3e>
 8001fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fd8:	e00e      	b.n	8001ff8 <__swhatbuf_r+0x40>
 8001fda:	466a      	mov	r2, sp
 8001fdc:	f000 f8b2 	bl	8002144 <_fstat_r>
 8001fe0:	2800      	cmp	r0, #0
 8001fe2:	dbf2      	blt.n	8001fca <__swhatbuf_r+0x12>
 8001fe4:	9a01      	ldr	r2, [sp, #4]
 8001fe6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001fea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001fee:	425a      	negs	r2, r3
 8001ff0:	415a      	adcs	r2, r3
 8001ff2:	602a      	str	r2, [r5, #0]
 8001ff4:	e7ee      	b.n	8001fd4 <__swhatbuf_r+0x1c>
 8001ff6:	2340      	movs	r3, #64	; 0x40
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	6023      	str	r3, [r4, #0]
 8001ffc:	b016      	add	sp, #88	; 0x58
 8001ffe:	bd70      	pop	{r4, r5, r6, pc}

08002000 <__smakebuf_r>:
 8002000:	898b      	ldrh	r3, [r1, #12]
 8002002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002004:	079d      	lsls	r5, r3, #30
 8002006:	4606      	mov	r6, r0
 8002008:	460c      	mov	r4, r1
 800200a:	d507      	bpl.n	800201c <__smakebuf_r+0x1c>
 800200c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002010:	6023      	str	r3, [r4, #0]
 8002012:	6123      	str	r3, [r4, #16]
 8002014:	2301      	movs	r3, #1
 8002016:	6163      	str	r3, [r4, #20]
 8002018:	b002      	add	sp, #8
 800201a:	bd70      	pop	{r4, r5, r6, pc}
 800201c:	ab01      	add	r3, sp, #4
 800201e:	466a      	mov	r2, sp
 8002020:	f7ff ffca 	bl	8001fb8 <__swhatbuf_r>
 8002024:	9900      	ldr	r1, [sp, #0]
 8002026:	4605      	mov	r5, r0
 8002028:	4630      	mov	r0, r6
 800202a:	f7ff faab 	bl	8001584 <_malloc_r>
 800202e:	b948      	cbnz	r0, 8002044 <__smakebuf_r+0x44>
 8002030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002034:	059a      	lsls	r2, r3, #22
 8002036:	d4ef      	bmi.n	8002018 <__smakebuf_r+0x18>
 8002038:	f023 0303 	bic.w	r3, r3, #3
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	81a3      	strh	r3, [r4, #12]
 8002042:	e7e3      	b.n	800200c <__smakebuf_r+0xc>
 8002044:	4b0d      	ldr	r3, [pc, #52]	; (800207c <__smakebuf_r+0x7c>)
 8002046:	62b3      	str	r3, [r6, #40]	; 0x28
 8002048:	89a3      	ldrh	r3, [r4, #12]
 800204a:	6020      	str	r0, [r4, #0]
 800204c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002050:	81a3      	strh	r3, [r4, #12]
 8002052:	9b00      	ldr	r3, [sp, #0]
 8002054:	6163      	str	r3, [r4, #20]
 8002056:	9b01      	ldr	r3, [sp, #4]
 8002058:	6120      	str	r0, [r4, #16]
 800205a:	b15b      	cbz	r3, 8002074 <__smakebuf_r+0x74>
 800205c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002060:	4630      	mov	r0, r6
 8002062:	f000 f881 	bl	8002168 <_isatty_r>
 8002066:	b128      	cbz	r0, 8002074 <__smakebuf_r+0x74>
 8002068:	89a3      	ldrh	r3, [r4, #12]
 800206a:	f023 0303 	bic.w	r3, r3, #3
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	81a3      	strh	r3, [r4, #12]
 8002074:	89a3      	ldrh	r3, [r4, #12]
 8002076:	431d      	orrs	r5, r3
 8002078:	81a5      	strh	r5, [r4, #12]
 800207a:	e7cd      	b.n	8002018 <__smakebuf_r+0x18>
 800207c:	08001439 	.word	0x08001439

08002080 <__malloc_lock>:
 8002080:	4770      	bx	lr

08002082 <__malloc_unlock>:
 8002082:	4770      	bx	lr

08002084 <_free_r>:
 8002084:	b538      	push	{r3, r4, r5, lr}
 8002086:	4605      	mov	r5, r0
 8002088:	2900      	cmp	r1, #0
 800208a:	d045      	beq.n	8002118 <_free_r+0x94>
 800208c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002090:	1f0c      	subs	r4, r1, #4
 8002092:	2b00      	cmp	r3, #0
 8002094:	bfb8      	it	lt
 8002096:	18e4      	addlt	r4, r4, r3
 8002098:	f7ff fff2 	bl	8002080 <__malloc_lock>
 800209c:	4a1f      	ldr	r2, [pc, #124]	; (800211c <_free_r+0x98>)
 800209e:	6813      	ldr	r3, [r2, #0]
 80020a0:	4610      	mov	r0, r2
 80020a2:	b933      	cbnz	r3, 80020b2 <_free_r+0x2e>
 80020a4:	6063      	str	r3, [r4, #4]
 80020a6:	6014      	str	r4, [r2, #0]
 80020a8:	4628      	mov	r0, r5
 80020aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020ae:	f7ff bfe8 	b.w	8002082 <__malloc_unlock>
 80020b2:	42a3      	cmp	r3, r4
 80020b4:	d90c      	bls.n	80020d0 <_free_r+0x4c>
 80020b6:	6821      	ldr	r1, [r4, #0]
 80020b8:	1862      	adds	r2, r4, r1
 80020ba:	4293      	cmp	r3, r2
 80020bc:	bf04      	itt	eq
 80020be:	681a      	ldreq	r2, [r3, #0]
 80020c0:	685b      	ldreq	r3, [r3, #4]
 80020c2:	6063      	str	r3, [r4, #4]
 80020c4:	bf04      	itt	eq
 80020c6:	1852      	addeq	r2, r2, r1
 80020c8:	6022      	streq	r2, [r4, #0]
 80020ca:	6004      	str	r4, [r0, #0]
 80020cc:	e7ec      	b.n	80020a8 <_free_r+0x24>
 80020ce:	4613      	mov	r3, r2
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	b10a      	cbz	r2, 80020d8 <_free_r+0x54>
 80020d4:	42a2      	cmp	r2, r4
 80020d6:	d9fa      	bls.n	80020ce <_free_r+0x4a>
 80020d8:	6819      	ldr	r1, [r3, #0]
 80020da:	1858      	adds	r0, r3, r1
 80020dc:	42a0      	cmp	r0, r4
 80020de:	d10b      	bne.n	80020f8 <_free_r+0x74>
 80020e0:	6820      	ldr	r0, [r4, #0]
 80020e2:	4401      	add	r1, r0
 80020e4:	1858      	adds	r0, r3, r1
 80020e6:	4282      	cmp	r2, r0
 80020e8:	6019      	str	r1, [r3, #0]
 80020ea:	d1dd      	bne.n	80020a8 <_free_r+0x24>
 80020ec:	6810      	ldr	r0, [r2, #0]
 80020ee:	6852      	ldr	r2, [r2, #4]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	4401      	add	r1, r0
 80020f4:	6019      	str	r1, [r3, #0]
 80020f6:	e7d7      	b.n	80020a8 <_free_r+0x24>
 80020f8:	d902      	bls.n	8002100 <_free_r+0x7c>
 80020fa:	230c      	movs	r3, #12
 80020fc:	602b      	str	r3, [r5, #0]
 80020fe:	e7d3      	b.n	80020a8 <_free_r+0x24>
 8002100:	6820      	ldr	r0, [r4, #0]
 8002102:	1821      	adds	r1, r4, r0
 8002104:	428a      	cmp	r2, r1
 8002106:	bf04      	itt	eq
 8002108:	6811      	ldreq	r1, [r2, #0]
 800210a:	6852      	ldreq	r2, [r2, #4]
 800210c:	6062      	str	r2, [r4, #4]
 800210e:	bf04      	itt	eq
 8002110:	1809      	addeq	r1, r1, r0
 8002112:	6021      	streq	r1, [r4, #0]
 8002114:	605c      	str	r4, [r3, #4]
 8002116:	e7c7      	b.n	80020a8 <_free_r+0x24>
 8002118:	bd38      	pop	{r3, r4, r5, pc}
 800211a:	bf00      	nop
 800211c:	20000084 	.word	0x20000084

08002120 <_read_r>:
 8002120:	b538      	push	{r3, r4, r5, lr}
 8002122:	4c07      	ldr	r4, [pc, #28]	; (8002140 <_read_r+0x20>)
 8002124:	4605      	mov	r5, r0
 8002126:	4608      	mov	r0, r1
 8002128:	4611      	mov	r1, r2
 800212a:	2200      	movs	r2, #0
 800212c:	6022      	str	r2, [r4, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	f7fe f99c 	bl	800046c <_read>
 8002134:	1c43      	adds	r3, r0, #1
 8002136:	d102      	bne.n	800213e <_read_r+0x1e>
 8002138:	6823      	ldr	r3, [r4, #0]
 800213a:	b103      	cbz	r3, 800213e <_read_r+0x1e>
 800213c:	602b      	str	r3, [r5, #0]
 800213e:	bd38      	pop	{r3, r4, r5, pc}
 8002140:	2000008c 	.word	0x2000008c

08002144 <_fstat_r>:
 8002144:	b538      	push	{r3, r4, r5, lr}
 8002146:	4c07      	ldr	r4, [pc, #28]	; (8002164 <_fstat_r+0x20>)
 8002148:	2300      	movs	r3, #0
 800214a:	4605      	mov	r5, r0
 800214c:	4608      	mov	r0, r1
 800214e:	4611      	mov	r1, r2
 8002150:	6023      	str	r3, [r4, #0]
 8002152:	f7fe f9d0 	bl	80004f6 <_fstat>
 8002156:	1c43      	adds	r3, r0, #1
 8002158:	d102      	bne.n	8002160 <_fstat_r+0x1c>
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	b103      	cbz	r3, 8002160 <_fstat_r+0x1c>
 800215e:	602b      	str	r3, [r5, #0]
 8002160:	bd38      	pop	{r3, r4, r5, pc}
 8002162:	bf00      	nop
 8002164:	2000008c 	.word	0x2000008c

08002168 <_isatty_r>:
 8002168:	b538      	push	{r3, r4, r5, lr}
 800216a:	4c06      	ldr	r4, [pc, #24]	; (8002184 <_isatty_r+0x1c>)
 800216c:	2300      	movs	r3, #0
 800216e:	4605      	mov	r5, r0
 8002170:	4608      	mov	r0, r1
 8002172:	6023      	str	r3, [r4, #0]
 8002174:	f7fe f9cf 	bl	8000516 <_isatty>
 8002178:	1c43      	adds	r3, r0, #1
 800217a:	d102      	bne.n	8002182 <_isatty_r+0x1a>
 800217c:	6823      	ldr	r3, [r4, #0]
 800217e:	b103      	cbz	r3, 8002182 <_isatty_r+0x1a>
 8002180:	602b      	str	r3, [r5, #0]
 8002182:	bd38      	pop	{r3, r4, r5, pc}
 8002184:	2000008c 	.word	0x2000008c

08002188 <_init>:
 8002188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800218a:	bf00      	nop
 800218c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800218e:	bc08      	pop	{r3}
 8002190:	469e      	mov	lr, r3
 8002192:	4770      	bx	lr

08002194 <_fini>:
 8002194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002196:	bf00      	nop
 8002198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800219a:	bc08      	pop	{r3}
 800219c:	469e      	mov	lr, r3
 800219e:	4770      	bx	lr
