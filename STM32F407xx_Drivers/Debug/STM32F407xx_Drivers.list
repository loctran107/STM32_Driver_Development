
STM32F407xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001de8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08001f98  08001f98  00011f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020c0  080020c0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080020c0  080020c0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020c0  080020c0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020c0  080020c0  000120c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020c4  080020c4  000120c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080020c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000064  0800212c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  0800212c  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000044be  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b25  00000000  00000000  00024552  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000258  00000000  00000000  00025078  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000200  00000000  00000000  000252d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003882  00000000  00000000  000254d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000254f  00000000  00000000  00028d52  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c947  00000000  00000000  0002b2a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00037be8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ff8  00000000  00000000  00037c64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001f80 	.word	0x08001f80

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08001f80 	.word	0x08001f80

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <main>:
void SPI_GPIOInit(GPIO_Handle_t* SPI_GPIO);
void SPI_MasterInit(SPI_Handle_t* SPI_Master);
uint8_t SPI_VerifyResponse(uint8_t ackbyte);
void delay();

int main(void) {
 80002a0:	b5b0      	push	{r4, r5, r7, lr}
 80002a2:	b0a4      	sub	sp, #144	; 0x90
 80002a4:	af00      	add	r7, sp, #0

	//Define dummy string to send to SPI Slave (Arduino)
	//char str[] = "Sacrilegious: committing or characterized by sacrilege: having or showing a lack of respect";

	//Dummy bytes
	uint8_t	dummy_write = 0xEE;
 80002a6:	23ee      	movs	r3, #238	; 0xee
 80002a8:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	//Define handle structure for GPIO button, GPIO for SPI, and SPI1
	GPIO_Handle_t GPIO_Button, SPI_GPIO;
	SPI_Handle_t SPI_Master;

	//Set everything to 0 by default
	memset(&GPIO_Button, 0, sizeof(GPIO_Button));
 80002ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002b0:	221c      	movs	r2, #28
 80002b2:	2100      	movs	r1, #0
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 ff13 	bl	80010e0 <memset>
	memset(&SPI_GPIO, 0, sizeof(SPI_GPIO));
 80002ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002be:	221c      	movs	r2, #28
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 ff0c 	bl	80010e0 <memset>
	memset(&SPI_Master, 0, sizeof(SPI_Master));
 80002c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002cc:	2220      	movs	r2, #32
 80002ce:	2100      	movs	r1, #0
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 ff05 	bl	80010e0 <memset>

	//Initialize GPIO button
	ButtonEnable(&GPIO_Button);
 80002d6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 f9d0 	bl	8000680 <ButtonEnable>
	SPI_GPIOInit(&SPI_GPIO);
 80002e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 f9e7 	bl	80006b8 <SPI_GPIOInit>
	SPI_MasterInit(&SPI_Master);
 80002ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 fa06 	bl	8000700 <SPI_MasterInit>
				printf("COMMAND_ID : %s \n",id);

			}*/

		//wait till button is pressed
				while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_0) );
 80002f4:	bf00      	nop
 80002f6:	2101      	movs	r1, #1
 80002f8:	48d9      	ldr	r0, [pc, #868]	; (8000660 <main+0x3c0>)
 80002fa:	f000 feb1 	bl	8001060 <GPIO_ReadFromInputPin>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d0f8      	beq.n	80002f6 <main+0x56>

				//to avoid button de-bouncing related issues 200ms of delay
				delay();
 8000304:	f000 fa34 	bl	8000770 <delay>

				//enable the SPI2 peripheral
				SPI_PeripheralEnable(SPI2,ENABLE);
 8000308:	2101      	movs	r1, #1
 800030a:	48d6      	ldr	r0, [pc, #856]	; (8000664 <main+0x3c4>)
 800030c:	f000 fbc8 	bl	8000aa0 <SPI_PeripheralEnable>

			    //1. CMD_LED_CTRL  	<pin no(1)>     <value(1)>

				uint8_t commandcode = COMMAND_LED_CTRL;
 8000310:	2350      	movs	r3, #80	; 0x50
 8000312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				uint8_t ackbyte;
				uint8_t args[2];

				//send command
				SPI_SendData(SPI2,&commandcode,1);
 8000316:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800031a:	2201      	movs	r2, #1
 800031c:	4619      	mov	r1, r3
 800031e:	48d1      	ldr	r0, [pc, #836]	; (8000664 <main+0x3c4>)
 8000320:	f000 fbef 	bl	8000b02 <SPI_SendData>

				//do dummy read to clear off the RXNE
				SPI_ReceiveData(SPI2,&dummy_read,1);
 8000324:	f107 038a 	add.w	r3, r7, #138	; 0x8a
 8000328:	2201      	movs	r2, #1
 800032a:	4619      	mov	r1, r3
 800032c:	48cd      	ldr	r0, [pc, #820]	; (8000664 <main+0x3c4>)
 800032e:	f000 fc23 	bl	8000b78 <SPI_ReceiveData>

				//Send some dummy bits (1 byte) fetch the response from the slave
				SPI_SendData(SPI2,&dummy_write,1);
 8000332:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8000336:	2201      	movs	r2, #1
 8000338:	4619      	mov	r1, r3
 800033a:	48ca      	ldr	r0, [pc, #808]	; (8000664 <main+0x3c4>)
 800033c:	f000 fbe1 	bl	8000b02 <SPI_SendData>

				//read the ack byte received
				SPI_ReceiveData(SPI2,&ackbyte,1);
 8000340:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000344:	2201      	movs	r2, #1
 8000346:	4619      	mov	r1, r3
 8000348:	48c6      	ldr	r0, [pc, #792]	; (8000664 <main+0x3c4>)
 800034a:	f000 fc15 	bl	8000b78 <SPI_ReceiveData>

				if( SPI_VerifyResponse(ackbyte))
 800034e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000352:	4618      	mov	r0, r3
 8000354:	f000 f9fa 	bl	800074c <SPI_VerifyResponse>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d00f      	beq.n	800037e <main+0xde>
				{
					args[0] = LED_PIN;
 800035e:	2301      	movs	r3, #1
 8000360:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
					args[1] = LED_ON;
 8000364:	2301      	movs	r3, #1
 8000366:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

					//send arguments
					SPI_SendData(SPI2,args,2);
 800036a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800036e:	2202      	movs	r2, #2
 8000370:	4619      	mov	r1, r3
 8000372:	48bc      	ldr	r0, [pc, #752]	; (8000664 <main+0x3c4>)
 8000374:	f000 fbc5 	bl	8000b02 <SPI_SendData>
					printf("COMMAND_LED_CTRL Executed\n");
 8000378:	48bb      	ldr	r0, [pc, #748]	; (8000668 <main+0x3c8>)
 800037a:	f000 ff2d 	bl	80011d8 <puts>
				//end of COMMAND_LED_CTRL

				//2. CMD_SENOSR_READ   <analog pin number(1) >

				//wait till button is pressed
				while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_0) );
 800037e:	bf00      	nop
 8000380:	2101      	movs	r1, #1
 8000382:	48b7      	ldr	r0, [pc, #732]	; (8000660 <main+0x3c0>)
 8000384:	f000 fe6c 	bl	8001060 <GPIO_ReadFromInputPin>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0f8      	beq.n	8000380 <main+0xe0>

				//to avoid button de-bouncing related issues 200ms of delay
				delay();
 800038e:	f000 f9ef 	bl	8000770 <delay>

				commandcode = COMMAND_SENSOR_READ;
 8000392:	2351      	movs	r3, #81	; 0x51
 8000394:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

				//send command
				SPI_SendData(SPI2,&commandcode,1);
 8000398:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800039c:	2201      	movs	r2, #1
 800039e:	4619      	mov	r1, r3
 80003a0:	48b0      	ldr	r0, [pc, #704]	; (8000664 <main+0x3c4>)
 80003a2:	f000 fbae 	bl	8000b02 <SPI_SendData>

				//do dummy read to clear off the RXNE
				SPI_ReceiveData(SPI2,&dummy_read,1);
 80003a6:	f107 038a 	add.w	r3, r7, #138	; 0x8a
 80003aa:	2201      	movs	r2, #1
 80003ac:	4619      	mov	r1, r3
 80003ae:	48ad      	ldr	r0, [pc, #692]	; (8000664 <main+0x3c4>)
 80003b0:	f000 fbe2 	bl	8000b78 <SPI_ReceiveData>

				//Send some dummy byte to fetch the response from the slave
				SPI_SendData(SPI2,&dummy_write,1);
 80003b4:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 80003b8:	2201      	movs	r2, #1
 80003ba:	4619      	mov	r1, r3
 80003bc:	48a9      	ldr	r0, [pc, #676]	; (8000664 <main+0x3c4>)
 80003be:	f000 fba0 	bl	8000b02 <SPI_SendData>

				//read the ack byte received
				SPI_ReceiveData(SPI2,&ackbyte,1);
 80003c2:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80003c6:	2201      	movs	r2, #1
 80003c8:	4619      	mov	r1, r3
 80003ca:	48a6      	ldr	r0, [pc, #664]	; (8000664 <main+0x3c4>)
 80003cc:	f000 fbd4 	bl	8000b78 <SPI_ReceiveData>

				if( SPI_VerifyResponse(ackbyte))
 80003d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 f9b9 	bl	800074c <SPI_VerifyResponse>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d024      	beq.n	800042a <main+0x18a>
				{
					args[0] = ANALOG_PIN0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

					//send arguments
					SPI_SendData(SPI2,args,1); //sending one byte of
 80003e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80003ea:	2201      	movs	r2, #1
 80003ec:	4619      	mov	r1, r3
 80003ee:	489d      	ldr	r0, [pc, #628]	; (8000664 <main+0x3c4>)
 80003f0:	f000 fb87 	bl	8000b02 <SPI_SendData>

					//do dummy read to clear off the RXNE
					SPI_ReceiveData(SPI2,&dummy_read,1);
 80003f4:	f107 038a 	add.w	r3, r7, #138	; 0x8a
 80003f8:	2201      	movs	r2, #1
 80003fa:	4619      	mov	r1, r3
 80003fc:	4899      	ldr	r0, [pc, #612]	; (8000664 <main+0x3c4>)
 80003fe:	f000 fbbb 	bl	8000b78 <SPI_ReceiveData>

					//insert some delay so that slave can ready with the data
					delay();
 8000402:	f000 f9b5 	bl	8000770 <delay>

					//Send some dummy bits (1 byte) fetch the response from the slave
					SPI_SendData(SPI2,&dummy_write,1);
 8000406:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 800040a:	2201      	movs	r2, #1
 800040c:	4619      	mov	r1, r3
 800040e:	4895      	ldr	r0, [pc, #596]	; (8000664 <main+0x3c4>)
 8000410:	f000 fb77 	bl	8000b02 <SPI_SendData>

					uint8_t analog_read;
					SPI_ReceiveData(SPI2,&analog_read,1);
 8000414:	1dfb      	adds	r3, r7, #7
 8000416:	2201      	movs	r2, #1
 8000418:	4619      	mov	r1, r3
 800041a:	4892      	ldr	r0, [pc, #584]	; (8000664 <main+0x3c4>)
 800041c:	f000 fbac 	bl	8000b78 <SPI_ReceiveData>
					printf("COMMAND_SENSOR_READ %d\n",analog_read);
 8000420:	79fb      	ldrb	r3, [r7, #7]
 8000422:	4619      	mov	r1, r3
 8000424:	4891      	ldr	r0, [pc, #580]	; (800066c <main+0x3cc>)
 8000426:	f000 fe63 	bl	80010f0 <iprintf>
				}

				//3.  CMD_LED_READ 	 <pin no(1) >

				//wait till button is pressed
				while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_0) );
 800042a:	bf00      	nop
 800042c:	2101      	movs	r1, #1
 800042e:	488c      	ldr	r0, [pc, #560]	; (8000660 <main+0x3c0>)
 8000430:	f000 fe16 	bl	8001060 <GPIO_ReadFromInputPin>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d0f8      	beq.n	800042c <main+0x18c>

				//to avoid button de-bouncing related issues 200ms of delay
				delay();
 800043a:	f000 f999 	bl	8000770 <delay>

				commandcode = COMMAND_LED_READ;
 800043e:	2352      	movs	r3, #82	; 0x52
 8000440:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

				//send command
				SPI_SendData(SPI2,&commandcode,1);
 8000444:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000448:	2201      	movs	r2, #1
 800044a:	4619      	mov	r1, r3
 800044c:	4885      	ldr	r0, [pc, #532]	; (8000664 <main+0x3c4>)
 800044e:	f000 fb58 	bl	8000b02 <SPI_SendData>

				//do dummy read to clear off the RXNE
				SPI_ReceiveData(SPI2,&dummy_read,1);
 8000452:	f107 038a 	add.w	r3, r7, #138	; 0x8a
 8000456:	2201      	movs	r2, #1
 8000458:	4619      	mov	r1, r3
 800045a:	4882      	ldr	r0, [pc, #520]	; (8000664 <main+0x3c4>)
 800045c:	f000 fb8c 	bl	8000b78 <SPI_ReceiveData>

				//Send some dummy byte to fetch the response from the slave
				SPI_SendData(SPI2,&dummy_write,1);
 8000460:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8000464:	2201      	movs	r2, #1
 8000466:	4619      	mov	r1, r3
 8000468:	487e      	ldr	r0, [pc, #504]	; (8000664 <main+0x3c4>)
 800046a:	f000 fb4a 	bl	8000b02 <SPI_SendData>

				//read the ack byte received
				SPI_ReceiveData(SPI2,&ackbyte,1);
 800046e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000472:	2201      	movs	r2, #1
 8000474:	4619      	mov	r1, r3
 8000476:	487b      	ldr	r0, [pc, #492]	; (8000664 <main+0x3c4>)
 8000478:	f000 fb7e 	bl	8000b78 <SPI_ReceiveData>

				if( SPI_VerifyResponse(ackbyte))
 800047c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000480:	4618      	mov	r0, r3
 8000482:	f000 f963 	bl	800074c <SPI_VerifyResponse>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d024      	beq.n	80004d6 <main+0x236>
				{
					args[0] = LED_PIN;
 800048c:	2301      	movs	r3, #1
 800048e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

					//send arguments
					SPI_SendData(SPI2,args,1); //sending one byte of
 8000492:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000496:	2201      	movs	r2, #1
 8000498:	4619      	mov	r1, r3
 800049a:	4872      	ldr	r0, [pc, #456]	; (8000664 <main+0x3c4>)
 800049c:	f000 fb31 	bl	8000b02 <SPI_SendData>

					//do dummy read to clear off the RXNE
					SPI_ReceiveData(SPI2,&dummy_read,1);
 80004a0:	f107 038a 	add.w	r3, r7, #138	; 0x8a
 80004a4:	2201      	movs	r2, #1
 80004a6:	4619      	mov	r1, r3
 80004a8:	486e      	ldr	r0, [pc, #440]	; (8000664 <main+0x3c4>)
 80004aa:	f000 fb65 	bl	8000b78 <SPI_ReceiveData>

					//insert some delay so that slave can ready with the data
					delay();
 80004ae:	f000 f95f 	bl	8000770 <delay>

					//Send some dummy bits (1 byte) fetch the response from the slave
					SPI_SendData(SPI2,&dummy_write,1);
 80004b2:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 80004b6:	2201      	movs	r2, #1
 80004b8:	4619      	mov	r1, r3
 80004ba:	486a      	ldr	r0, [pc, #424]	; (8000664 <main+0x3c4>)
 80004bc:	f000 fb21 	bl	8000b02 <SPI_SendData>

					uint8_t led_status;
					SPI_ReceiveData(SPI2,&led_status,1);
 80004c0:	1dbb      	adds	r3, r7, #6
 80004c2:	2201      	movs	r2, #1
 80004c4:	4619      	mov	r1, r3
 80004c6:	4867      	ldr	r0, [pc, #412]	; (8000664 <main+0x3c4>)
 80004c8:	f000 fb56 	bl	8000b78 <SPI_ReceiveData>
					printf("COMMAND_READ_LED %d\n",led_status);
 80004cc:	79bb      	ldrb	r3, [r7, #6]
 80004ce:	4619      	mov	r1, r3
 80004d0:	4867      	ldr	r0, [pc, #412]	; (8000670 <main+0x3d0>)
 80004d2:	f000 fe0d 	bl	80010f0 <iprintf>
				}

				//4. CMD_PRINT 		<len(2)>  <message(len) >

				//wait till button is pressed
				while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_0) );
 80004d6:	bf00      	nop
 80004d8:	2101      	movs	r1, #1
 80004da:	4861      	ldr	r0, [pc, #388]	; (8000660 <main+0x3c0>)
 80004dc:	f000 fdc0 	bl	8001060 <GPIO_ReadFromInputPin>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d0f8      	beq.n	80004d8 <main+0x238>

				//to avoid button de-bouncing related issues 200ms of delay
				delay();
 80004e6:	f000 f943 	bl	8000770 <delay>

				commandcode = COMMAND_PRINT;
 80004ea:	2353      	movs	r3, #83	; 0x53
 80004ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

				//send command
				SPI_SendData(SPI2,&commandcode,1);
 80004f0:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80004f4:	2201      	movs	r2, #1
 80004f6:	4619      	mov	r1, r3
 80004f8:	485a      	ldr	r0, [pc, #360]	; (8000664 <main+0x3c4>)
 80004fa:	f000 fb02 	bl	8000b02 <SPI_SendData>

				//do dummy read to clear off the RXNE
				SPI_ReceiveData(SPI2,&dummy_read,1);
 80004fe:	f107 038a 	add.w	r3, r7, #138	; 0x8a
 8000502:	2201      	movs	r2, #1
 8000504:	4619      	mov	r1, r3
 8000506:	4857      	ldr	r0, [pc, #348]	; (8000664 <main+0x3c4>)
 8000508:	f000 fb36 	bl	8000b78 <SPI_ReceiveData>

				//Send some dummy byte to fetch the response from the slave
				SPI_SendData(SPI2,&dummy_write,1);
 800050c:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8000510:	2201      	movs	r2, #1
 8000512:	4619      	mov	r1, r3
 8000514:	4853      	ldr	r0, [pc, #332]	; (8000664 <main+0x3c4>)
 8000516:	f000 faf4 	bl	8000b02 <SPI_SendData>

				//read the ack byte received
				SPI_ReceiveData(SPI2,&ackbyte,1);
 800051a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800051e:	2201      	movs	r2, #1
 8000520:	4619      	mov	r1, r3
 8000522:	4850      	ldr	r0, [pc, #320]	; (8000664 <main+0x3c4>)
 8000524:	f000 fb28 	bl	8000b78 <SPI_ReceiveData>

				uint8_t message[] = "Hello ! How are you ??";
 8000528:	4b52      	ldr	r3, [pc, #328]	; (8000674 <main+0x3d4>)
 800052a:	f107 0414 	add.w	r4, r7, #20
 800052e:	461d      	mov	r5, r3
 8000530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000534:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000538:	6020      	str	r0, [r4, #0]
 800053a:	3404      	adds	r4, #4
 800053c:	8021      	strh	r1, [r4, #0]
 800053e:	3402      	adds	r4, #2
 8000540:	0c0b      	lsrs	r3, r1, #16
 8000542:	7023      	strb	r3, [r4, #0]
				if( SPI_VerifyResponse(ackbyte))
 8000544:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000548:	4618      	mov	r0, r3
 800054a:	f000 f8ff 	bl	800074c <SPI_VerifyResponse>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d01b      	beq.n	800058c <main+0x2ec>
				{
					args[0] = strlen((char*)message);
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff fe49 	bl	80001f0 <strlen>
 800055e:	4603      	mov	r3, r0
 8000560:	b2db      	uxtb	r3, r3
 8000562:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

					//send arguments
					SPI_SendData(SPI2,args,1); //sending length
 8000566:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800056a:	2201      	movs	r2, #1
 800056c:	4619      	mov	r1, r3
 800056e:	483d      	ldr	r0, [pc, #244]	; (8000664 <main+0x3c4>)
 8000570:	f000 fac7 	bl	8000b02 <SPI_SendData>

					//send message
					SPI_SendData(SPI2,message,args[0]);
 8000574:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000578:	461a      	mov	r2, r3
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4619      	mov	r1, r3
 8000580:	4838      	ldr	r0, [pc, #224]	; (8000664 <main+0x3c4>)
 8000582:	f000 fabe 	bl	8000b02 <SPI_SendData>

					printf("COMMAND_PRINT Executed \n");
 8000586:	483c      	ldr	r0, [pc, #240]	; (8000678 <main+0x3d8>)
 8000588:	f000 fe26 	bl	80011d8 <puts>

				}

				//5. CMD_ID_READ
				//wait till button is pressed
				while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_0) );
 800058c:	bf00      	nop
 800058e:	2101      	movs	r1, #1
 8000590:	4833      	ldr	r0, [pc, #204]	; (8000660 <main+0x3c0>)
 8000592:	f000 fd65 	bl	8001060 <GPIO_ReadFromInputPin>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d0f8      	beq.n	800058e <main+0x2ee>

				//to avoid button de-bouncing related issues 200ms of delay
				delay();
 800059c:	f000 f8e8 	bl	8000770 <delay>

				commandcode = COMMAND_ID_READ;
 80005a0:	2354      	movs	r3, #84	; 0x54
 80005a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

				//send command
				SPI_SendData(SPI2,&commandcode,1);
 80005a6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80005aa:	2201      	movs	r2, #1
 80005ac:	4619      	mov	r1, r3
 80005ae:	482d      	ldr	r0, [pc, #180]	; (8000664 <main+0x3c4>)
 80005b0:	f000 faa7 	bl	8000b02 <SPI_SendData>

				//do dummy read to clear off the RXNE
				SPI_ReceiveData(SPI2,&dummy_read,1);
 80005b4:	f107 038a 	add.w	r3, r7, #138	; 0x8a
 80005b8:	2201      	movs	r2, #1
 80005ba:	4619      	mov	r1, r3
 80005bc:	4829      	ldr	r0, [pc, #164]	; (8000664 <main+0x3c4>)
 80005be:	f000 fadb 	bl	8000b78 <SPI_ReceiveData>

				//Send some dummy byte to fetch the response from the slave
				SPI_SendData(SPI2,&dummy_write,1);
 80005c2:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 80005c6:	2201      	movs	r2, #1
 80005c8:	4619      	mov	r1, r3
 80005ca:	4826      	ldr	r0, [pc, #152]	; (8000664 <main+0x3c4>)
 80005cc:	f000 fa99 	bl	8000b02 <SPI_SendData>

				//read the ack byte received
				SPI_ReceiveData(SPI2,&ackbyte,1);
 80005d0:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80005d4:	2201      	movs	r2, #1
 80005d6:	4619      	mov	r1, r3
 80005d8:	4822      	ldr	r0, [pc, #136]	; (8000664 <main+0x3c4>)
 80005da:	f000 facd 	bl	8000b78 <SPI_ReceiveData>

				uint8_t id[11];
				uint32_t i=0;
 80005de:	2300      	movs	r3, #0
 80005e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				if( SPI_VerifyResponse(ackbyte))
 80005e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f8af 	bl	800074c <SPI_VerifyResponse>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	f43f ae7f 	beq.w	80002f4 <main+0x54>
				{
					//read 10 bytes id from the slave
					for(  i = 0 ; i < 10 ; i++)
 80005f6:	2300      	movs	r3, #0
 80005f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80005fc:	e015      	b.n	800062a <main+0x38a>
					{
						//send dummy byte to fetch data from slave
						SPI_SendData(SPI2,&dummy_write,1);
 80005fe:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8000602:	2201      	movs	r2, #1
 8000604:	4619      	mov	r1, r3
 8000606:	4817      	ldr	r0, [pc, #92]	; (8000664 <main+0x3c4>)
 8000608:	f000 fa7b 	bl	8000b02 <SPI_SendData>
						SPI_ReceiveData(SPI2,&id[i],1);
 800060c:	f107 0208 	add.w	r2, r7, #8
 8000610:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000614:	4413      	add	r3, r2
 8000616:	2201      	movs	r2, #1
 8000618:	4619      	mov	r1, r3
 800061a:	4812      	ldr	r0, [pc, #72]	; (8000664 <main+0x3c4>)
 800061c:	f000 faac 	bl	8000b78 <SPI_ReceiveData>
					for(  i = 0 ; i < 10 ; i++)
 8000620:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000624:	3301      	adds	r3, #1
 8000626:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800062a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800062e:	2b09      	cmp	r3, #9
 8000630:	d9e5      	bls.n	80005fe <main+0x35e>
					}

					id[11] = '\0';
 8000632:	2300      	movs	r3, #0
 8000634:	74fb      	strb	r3, [r7, #19]

					printf("COMMAND_ID : %s \n",id);
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	4619      	mov	r1, r3
 800063c:	480f      	ldr	r0, [pc, #60]	; (800067c <main+0x3dc>)
 800063e:	f000 fd57 	bl	80010f0 <iprintf>



			//Wait until the Master is done transferring the bytes of data
			//If busy, stay there. Otherwise, disable the peripheral
			while (SPI_CheckStatusFlag(SPI_Master.pSPIx, SPI_BUSY_FLAG));
 8000642:	bf00      	nop
 8000644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000646:	2180      	movs	r1, #128	; 0x80
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fa45 	bl	8000ad8 <SPI_CheckStatusFlag>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d1f7      	bne.n	8000644 <main+0x3a4>

			//Disable the SPI peripheral
			SPI_PeripheralEnable(SPI2, DISABLE);
 8000654:	2100      	movs	r1, #0
 8000656:	4803      	ldr	r0, [pc, #12]	; (8000664 <main+0x3c4>)
 8000658:	f000 fa22 	bl	8000aa0 <SPI_PeripheralEnable>
	while (1) {
 800065c:	e64a      	b.n	80002f4 <main+0x54>
 800065e:	bf00      	nop
 8000660:	40020000 	.word	0x40020000
 8000664:	40003800 	.word	0x40003800
 8000668:	08001f98 	.word	0x08001f98
 800066c:	08001fb4 	.word	0x08001fb4
 8000670:	08001fcc 	.word	0x08001fcc
 8000674:	08002010 	.word	0x08002010
 8000678:	08001fe4 	.word	0x08001fe4
 800067c:	08001ffc 	.word	0x08001ffc

08000680 <ButtonEnable>:
	}

	return EXIT_SUCCESS;
}

void ButtonEnable(GPIO_Handle_t* GPIO_Button) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	//Enable the Button
	//GPIO_Handle_t GPIO_Button;
	GPIO_Button->pGPIOx = GPIOA;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <ButtonEnable+0x34>)
 800068c:	601a      	str	r2, [r3, #0]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2201      	movs	r2, #1
 8000692:	605a      	str	r2, [r3, #4]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PU_PD;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinMode = GPIO_INPUT_MODE;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinSpeed = GPIO_VERY_HIGH_SPEED;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2203      	movs	r2, #3
 80006a4:	60da      	str	r2, [r3, #12]
	GPIO_Init(GPIO_Button);
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f000 fbac 	bl	8000e04 <GPIO_Init>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40020000 	.word	0x40020000

080006b8 <SPI_GPIOInit>:

void SPI_GPIOInit(GPIO_Handle_t* SPI_GPIO) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	//According to the alternate function map table
	//PB12 --> SPI1_NSS
	//PB13 --> SPI1_SCK
	//PB14 --> SPI1_MISO
	//PB15 --> SPI1_MOSI
	SPI_GPIO->pGPIOx = GPIOB;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <SPI_GPIOInit+0x44>)
 80006c4:	601a      	str	r2, [r3, #0]
	SPI_GPIO->GPIOx_PinConfig.GPIO_PinMode = GPIO_ALT_FUNC_MODE;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2202      	movs	r2, #2
 80006ca:	609a      	str	r2, [r3, #8]
	SPI_GPIO->GPIOx_PinConfig.GPIO_PinAltFuncMode = AF5;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2205      	movs	r2, #5
 80006d0:	619a      	str	r2, [r3, #24]
	SPI_GPIO->GPIOx_PinConfig.GPIO_PinNumber = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 80006d8:	605a      	str	r2, [r3, #4]
	SPI_GPIO->GPIOx_PinConfig.GPIO_PinOPType = GPIO_PUSH_PULL;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
	SPI_GPIO->GPIOx_PinConfig.GPIO_PinPuPdCtrl = GPIO_PU;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2201      	movs	r2, #1
 80006e4:	611a      	str	r2, [r3, #16]
	SPI_GPIO->GPIOx_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2202      	movs	r2, #2
 80006ea:	60da      	str	r2, [r3, #12]
	GPIO_Init(SPI_GPIO);
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f000 fb89 	bl	8000e04 <GPIO_Init>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40020400 	.word	0x40020400

08000700 <SPI_MasterInit>:

void SPI_MasterInit(SPI_Handle_t* SPI_Master) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	SPI_Master->pSPIx = SPI2;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a0f      	ldr	r2, [pc, #60]	; (8000748 <SPI_MasterInit+0x48>)
 800070c:	601a      	str	r2, [r3, #0]
	SPI_Master->SPI_Config.BusConfig = SPI_BUS_CONFIG_FULL_DUPLX;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2200      	movs	r2, #0
 8000712:	719a      	strb	r2, [r3, #6]
	SPI_Master->SPI_Config.DeviceMode = SPI_DEVICE_MASTER_MODE;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2201      	movs	r2, #1
 8000718:	715a      	strb	r2, [r3, #5]
	SPI_Master->SPI_Config.DFF = SPI_DFF_8_BIT;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	721a      	strb	r2, [r3, #8]
	SPI_Master->SPI_Config.SSM = SPI_HSM;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2200      	movs	r2, #0
 8000724:	71da      	strb	r2, [r3, #7]
	SPI_Master->SPI_Config.SclkSpeed = SPI_SCLK_SPEED_DIV8;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2202      	movs	r2, #2
 800072a:	711a      	strb	r2, [r3, #4]
	SPI_Master->SPI_Config.CPHA = SPI_CPHA_LOW;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2200      	movs	r2, #0
 8000730:	729a      	strb	r2, [r3, #10]
	SPI_Master->SPI_Config.CPOL = SPI_CPOL_LOW;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2200      	movs	r2, #0
 8000736:	725a      	strb	r2, [r3, #9]
	SPI_Init(SPI_Master);
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f000 f941 	bl	80009c0 <SPI_Init>
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40003800 	.word	0x40003800

0800074c <SPI_VerifyResponse>:

uint8_t SPI_VerifyResponse(uint8_t ackbyte) {
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	if (ackbyte == 0xF5) { //ACK
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2bf5      	cmp	r3, #245	; 0xf5
 800075a:	d101      	bne.n	8000760 <SPI_VerifyResponse+0x14>
		return 1;
 800075c:	2301      	movs	r3, #1
 800075e:	e000      	b.n	8000762 <SPI_VerifyResponse+0x16>
	}
	return 0;
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
	...

08000770 <delay>:
void delay() {
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 500000 / 2; i++); //~200 ms
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	e002      	b.n	8000782 <delay+0x12>
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3301      	adds	r3, #1
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <delay+0x28>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d9f8      	bls.n	800077c <delay+0xc>
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	0003d08f 	.word	0x0003d08f

0800079c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	e00a      	b.n	80007c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007ae:	f3af 8000 	nop.w
 80007b2:	4601      	mov	r1, r0
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	b2ca      	uxtb	r2, r1
 80007bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	3301      	adds	r3, #1
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	dbf0      	blt.n	80007ae <_read+0x12>
	}

return len;
 80007cc:	687b      	ldr	r3, [r7, #4]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b086      	sub	sp, #24
 80007da:	af00      	add	r7, sp, #0
 80007dc:	60f8      	str	r0, [r7, #12]
 80007de:	60b9      	str	r1, [r7, #8]
 80007e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	e009      	b.n	80007fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	60ba      	str	r2, [r7, #8]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	3301      	adds	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697a      	ldr	r2, [r7, #20]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	429a      	cmp	r2, r3
 8000802:	dbf1      	blt.n	80007e8 <_write+0x12>
	}
	return len;
 8000804:	687b      	ldr	r3, [r7, #4]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <_close>:

int _close(int file)
{
 800080e:	b480      	push	{r7}
 8000810:	b083      	sub	sp, #12
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
	return -1;
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
}
 800081a:	4618      	mov	r0, r3
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000826:	b480      	push	{r7}
 8000828:	b083      	sub	sp, #12
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000836:	605a      	str	r2, [r3, #4]
	return 0;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <_isatty>:

int _isatty(int file)
{
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
	return 1;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
	return 0;
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
	...

08000878 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <_sbrk+0x50>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d102      	bne.n	800088e <_sbrk+0x16>
		heap_end = &end;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <_sbrk+0x50>)
 800088a:	4a10      	ldr	r2, [pc, #64]	; (80008cc <_sbrk+0x54>)
 800088c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <_sbrk+0x50>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <_sbrk+0x50>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4413      	add	r3, r2
 800089c:	466a      	mov	r2, sp
 800089e:	4293      	cmp	r3, r2
 80008a0:	d907      	bls.n	80008b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80008a2:	f000 fbf3 	bl	800108c <__errno>
 80008a6:	4602      	mov	r2, r0
 80008a8:	230c      	movs	r3, #12
 80008aa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80008ac:	f04f 33ff 	mov.w	r3, #4294967295
 80008b0:	e006      	b.n	80008c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80008b2:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <_sbrk+0x50>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	4a03      	ldr	r2, [pc, #12]	; (80008c8 <_sbrk+0x50>)
 80008bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80008be:	68fb      	ldr	r3, [r7, #12]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000080 	.word	0x20000080
 80008cc:	20000090 	.word	0x20000090

080008d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <LoopForever+0x6>)
  ldr r1, =_edata
 80008d6:	490e      	ldr	r1, [pc, #56]	; (8000910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008d8:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <LoopForever+0xe>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008dc:	e002      	b.n	80008e4 <LoopCopyDataInit>

080008de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e2:	3304      	adds	r3, #4

080008e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e8:	d3f9      	bcc.n	80008de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008ec:	4c0b      	ldr	r4, [pc, #44]	; (800091c <LoopForever+0x16>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f0:	e001      	b.n	80008f6 <LoopFillZerobss>

080008f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f4:	3204      	adds	r2, #4

080008f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f8:	d3fb      	bcc.n	80008f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008fa:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80008fe:	f000 fbcb 	bl	8001098 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000902:	f7ff fccd 	bl	80002a0 <main>

08000906 <LoopForever>:

LoopForever:
    b LoopForever
 8000906:	e7fe      	b.n	8000906 <LoopForever>
  ldr   r0, =_estack
 8000908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000914:	080020c8 	.word	0x080020c8
  ldr r2, =_sbss
 8000918:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800091c:	20000090 	.word	0x20000090

08000920 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC_IRQHandler>
	...

08000924 <SPI_PeriClkCtrl>:
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void SPI_PeriClkCtrl(SPI_Reg_t* pSPIx, uint8_t EnOrDi) {
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d01c      	beq.n	8000970 <SPI_PeriClkCtrl+0x4c>
		SPIx_PCLK_EN(pSPIx); //Go to SPIx_PCLK_EN macro for more details
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a1e      	ldr	r2, [pc, #120]	; (80009b4 <SPI_PeriClkCtrl+0x90>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d106      	bne.n	800094c <SPI_PeriClkCtrl+0x28>
 800093e:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <SPI_PeriClkCtrl+0x94>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a1d      	ldr	r2, [pc, #116]	; (80009b8 <SPI_PeriClkCtrl+0x94>)
 8000944:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
	} else {
		SPIx_PCLK_DI(pSPIx); //Go to SPIx_PCLK_DI macro for more details
	}
}
 800094a:	e02d      	b.n	80009a8 <SPI_PeriClkCtrl+0x84>
		SPIx_PCLK_EN(pSPIx); //Go to SPIx_PCLK_EN macro for more details
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a1b      	ldr	r2, [pc, #108]	; (80009bc <SPI_PeriClkCtrl+0x98>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d106      	bne.n	8000962 <SPI_PeriClkCtrl+0x3e>
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <SPI_PeriClkCtrl+0x94>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	4a17      	ldr	r2, [pc, #92]	; (80009b8 <SPI_PeriClkCtrl+0x94>)
 800095a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000960:	e022      	b.n	80009a8 <SPI_PeriClkCtrl+0x84>
		SPIx_PCLK_EN(pSPIx); //Go to SPIx_PCLK_EN macro for more details
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <SPI_PeriClkCtrl+0x94>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <SPI_PeriClkCtrl+0x94>)
 8000968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800096e:	e01b      	b.n	80009a8 <SPI_PeriClkCtrl+0x84>
		SPIx_PCLK_DI(pSPIx); //Go to SPIx_PCLK_DI macro for more details
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <SPI_PeriClkCtrl+0x90>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d106      	bne.n	8000986 <SPI_PeriClkCtrl+0x62>
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <SPI_PeriClkCtrl+0x94>)
 800097a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097c:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <SPI_PeriClkCtrl+0x94>)
 800097e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000982:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000984:	e010      	b.n	80009a8 <SPI_PeriClkCtrl+0x84>
		SPIx_PCLK_DI(pSPIx); //Go to SPIx_PCLK_DI macro for more details
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a0c      	ldr	r2, [pc, #48]	; (80009bc <SPI_PeriClkCtrl+0x98>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d106      	bne.n	800099c <SPI_PeriClkCtrl+0x78>
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <SPI_PeriClkCtrl+0x94>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a09      	ldr	r2, [pc, #36]	; (80009b8 <SPI_PeriClkCtrl+0x94>)
 8000994:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
}
 800099a:	e005      	b.n	80009a8 <SPI_PeriClkCtrl+0x84>
		SPIx_PCLK_DI(pSPIx); //Go to SPIx_PCLK_DI macro for more details
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <SPI_PeriClkCtrl+0x94>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <SPI_PeriClkCtrl+0x94>)
 80009a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009a6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	40013000 	.word	0x40013000
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40003800 	.word	0x40003800

080009c0 <SPI_Init>:
 * @param[in]			- Handle Structure of SPI that contains all SPI configuration and port
 *
 * @return				- none
 * @note				- none
 */
void SPI_Init(SPI_Handle_t* pSPIHandler) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	SPI_Config_t SPIConf;

	temp     = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
	SPIConf  = pSPIHandler->SPI_Config;
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	3204      	adds	r2, #4
 80009d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009d8:	6018      	str	r0, [r3, #0]
 80009da:	3304      	adds	r3, #4
 80009dc:	8019      	strh	r1, [r3, #0]
 80009de:	3302      	adds	r3, #2
 80009e0:	0c0a      	lsrs	r2, r1, #16
 80009e2:	701a      	strb	r2, [r3, #0]

	//Enable the SPI Clock Peripheral
	SPI_PeriClkCtrl(pSPIHandler->pSPIx, ENABLE);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2101      	movs	r1, #1
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff ff9a 	bl	8000924 <SPI_PeriClkCtrl>

	//Set the SPI interface as Master or Slave
	temp |= SPIConf.DeviceMode << SPI_CR1_MSTR;
 80009f0:	7b7b      	ldrb	r3, [r7, #13]
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	461a      	mov	r2, r3
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	617b      	str	r3, [r7, #20]

	//Configure Clock baud rate (only required in Master Mode)
	if (SPIConf.DeviceMode == SPI_DEVICE_MASTER_MODE) {
 80009fc:	7b7b      	ldrb	r3, [r7, #13]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d105      	bne.n	8000a0e <SPI_Init+0x4e>
		temp |= SPIConf.SclkSpeed << SPI_CR1_BR;
 8000a02:	7b3b      	ldrb	r3, [r7, #12]
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	461a      	mov	r2, r3
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	617b      	str	r3, [r7, #20]

	//Configure the Bus Config.
	//Note: if BIDIMODE = 0, the SPI is in full-duplex
	//		if BIDIMODE = 1, the SPI is in half-duplex
	//To select simplex receive only configuration, RDONLY = 1 & BIDIMODE = 0
	switch (SPIConf.BusConfig) {
 8000a0e:	7bbb      	ldrb	r3, [r7, #14]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d008      	beq.n	8000a26 <SPI_Init+0x66>
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d00b      	beq.n	8000a30 <SPI_Init+0x70>
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d112      	bne.n	8000a42 <SPI_Init+0x82>
	case SPI_BUS_CONFIG_FULL_DUPLX: 		temp &= ~(1 << SPI_CR1_BIDIMODE); //Clear the BIDIMODE bit
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a22:	617b      	str	r3, [r7, #20]
											break;
 8000a24:	e00d      	b.n	8000a42 <SPI_Init+0x82>
	case SPI_BUS_CONFIG_HALF_DUPLX: 		temp |= 1 << SPI_CR1_BIDIMODE; //Set the BIDIMODE bit
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a2c:	617b      	str	r3, [r7, #20]
											break;
 8000a2e:	e008      	b.n	8000a42 <SPI_Init+0x82>
	case SPI_BUS_CONFIG_SIMPLEX_RX_ONLLY:	temp &= ~(1 << SPI_CR1_BIDIMODE); //Clear the BIDIMODE bit
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a36:	617b      	str	r3, [r7, #20]
											temp |= 1 << SPI_CR1_RXONLY; //Set the RXONLY bit
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a3e:	617b      	str	r3, [r7, #20]
											break;
 8000a40:	bf00      	nop
	}

	//Set the DFF bit to define 8- or 16-bit data frame format
	temp |= SPIConf.DFF << SPI_CR1_DFF;
 8000a42:	7c3b      	ldrb	r3, [r7, #16]
 8000a44:	02db      	lsls	r3, r3, #11
 8000a46:	461a      	mov	r2, r3
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	617b      	str	r3, [r7, #20]

	//Select the CPOL and CPHA bits to define one of the 4 relationships
	//between the data transfer and the serial clock
	temp |= SPIConf.CPOL << SPI_CR1_CPOL;
 8000a4e:	7c7b      	ldrb	r3, [r7, #17]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	461a      	mov	r2, r3
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	617b      	str	r3, [r7, #20]
	temp |= SPIConf.CPHA << SPI_CR1_CPHA;
 8000a5a:	7cbb      	ldrb	r3, [r7, #18]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	617b      	str	r3, [r7, #20]

	//Set the SSM pin to select either Hardware Slave Management
	//Software Slave Management (potentially configure the SSI pin)
	temp |= SPIConf.SSM << SPI_CR1_SSM;
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	025b      	lsls	r3, r3, #9
 8000a68:	461a      	mov	r2, r3
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	617b      	str	r3, [r7, #20]
	//mode fault (MODF) bit will be set in SPI_SR register.
	//By setting SSI = 1 when SSM = 1, this sets the NSS set internally high,
	//avoiding MODF error. Remember, SSI influences the NSS state when SSM = 1
	//By default, SSI = 0, which is not an acceptable configuration when working
	//in an non-multi\-master application
	if (SPIConf.SSM) {
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d004      	beq.n	8000a80 <SPI_Init+0xc0>
		temp |= 1 << SPI_CR1_SSI; //Set the SSI bit
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	e007      	b.n	8000a90 <SPI_Init+0xd0>
	} else {
		//Making SSOE 1 does NSS output enable.
		//The NSS pin is automatically managed by the hardware.
		//i.e. when SPE = 1, NSS will be automatically pulled to low
		//and NSS pin will be high when SPE = 0
		pSPIHandler->pSPIx->CR2 |= 1 << SPI_CR2_SSOE;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	685a      	ldr	r2, [r3, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f042 0204 	orr.w	r2, r2, #4
 8000a8e:	605a      	str	r2, [r3, #4]
	}

	//Configure the SPI_CR1 Register based on the above configuration
	pSPIHandler->pSPIx->CR1 = temp;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	697a      	ldr	r2, [r7, #20]
 8000a96:	601a      	str	r2, [r3, #0]

}
 8000a98:	bf00      	nop
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <SPI_PeripheralEnable>:
 * @param[in]			- Base address of the specific SPI peripherals (SPI_Reg_t* pSPIx)
 *
 * @return				- none
 * @note				- The implementation so far only covers only 3 SPI ports
 */
void SPI_PeripheralEnable(SPI_Reg_t* pSPIx, uint8_t EnOrDi) {
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 8000aac:	78fb      	ldrb	r3, [r7, #3]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d006      	beq.n	8000ac0 <SPI_PeripheralEnable+0x20>
		SPIx_EN(pSPIx);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	601a      	str	r2, [r3, #0]
	} else {
		SPIx_DI(pSPIx);
	}
}
 8000abe:	e005      	b.n	8000acc <SPI_PeripheralEnable+0x2c>
		SPIx_DI(pSPIx);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	601a      	str	r2, [r3, #0]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <SPI_CheckStatusFlag>:
}

/*
 * Private helper functions
 */
uint8_t SPI_CheckStatusFlag(SPI_Reg_t* pSPIx, uint8_t flag) {
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	70fb      	strb	r3, [r7, #3]

	if (pSPIx->SR & flag) {
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	689a      	ldr	r2, [r3, #8]
 8000ae8:	78fb      	ldrb	r3, [r7, #3]
 8000aea:	4013      	ands	r3, r2
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SPI_CheckStatusFlag+0x1c>
		return FLAG_SET;
 8000af0:	2301      	movs	r3, #1
 8000af2:	e000      	b.n	8000af6 <SPI_CheckStatusFlag+0x1e>
	}
	return FLAG_RESET;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <SPI_SendData>:
 * @note				- it is a standard practice to define len as uint32_t
 * 						- This is a blocking API (polling-based API) because the function call will wait
 * 						  until all the bytes are transmitted
 *
 */
void SPI_SendData(SPI_Reg_t* pSPIx, uint8_t* pTxBuffer, uint32_t len) {
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b084      	sub	sp, #16
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	60f8      	str	r0, [r7, #12]
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
	while (len) {
 8000b0e:	e02c      	b.n	8000b6a <SPI_SendData+0x68>

		//Wait until the Tx Buffer is empty to ready to load data
		while (!SPI_CheckStatusFlag(pSPIx, SPI_TXE_FLAG));
 8000b10:	bf00      	nop
 8000b12:	2102      	movs	r1, #2
 8000b14:	68f8      	ldr	r0, [r7, #12]
 8000b16:	f7ff ffdf 	bl	8000ad8 <SPI_CheckStatusFlag>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0f8      	beq.n	8000b12 <SPI_SendData+0x10>
		if ((pSPIx->CR1 & (1 << SPI_CR1_DFF)) == (1 << SPI_CR1_DFF)) { //16-bit data frame
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b2c:	d110      	bne.n	8000b50 <SPI_SendData+0x4e>
			pSPIx->DR |= *((uint16_t*) pTxBuffer);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	8812      	ldrh	r2, [r2, #0]
 8000b36:	431a      	orrs	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	60da      	str	r2, [r3, #12]
			len--;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	607b      	str	r3, [r7, #4]
			len--;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3b01      	subs	r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
			(uint16_t*) pTxBuffer++;
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	e00c      	b.n	8000b6a <SPI_SendData+0x68>
		} else {
			pSPIx->DR |= *(pTxBuffer);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	68ba      	ldr	r2, [r7, #8]
 8000b56:	7812      	ldrb	r2, [r2, #0]
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	60da      	str	r2, [r3, #12]
			len--;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	3b01      	subs	r3, #1
 8000b62:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	3301      	adds	r3, #1
 8000b68:	60bb      	str	r3, [r7, #8]
	while (len) {
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d1cf      	bne.n	8000b10 <SPI_SendData+0xe>
		}
	}
}
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <SPI_ReceiveData>:
 * @param[in]			- the number of bytes of the buffer
 *
 * @return				- none
 * @note				- This is a blocking API (polling-based implementation)
 */
void SPI_ReceiveData(SPI_Reg_t* pSPIx, uint8_t* pRxBuffer, uint32_t len) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
	while (len) {
 8000b84:	e028      	b.n	8000bd8 <SPI_ReceiveData+0x60>
		while (!SPI_CheckStatusFlag(pSPIx, SPI_RXNE_FLAG)); //Wait until the RxBuffer is not empty (full)
 8000b86:	bf00      	nop
 8000b88:	2101      	movs	r1, #1
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f7ff ffa4 	bl	8000ad8 <SPI_CheckStatusFlag>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d0f8      	beq.n	8000b88 <SPI_ReceiveData+0x10>

		//Read the data
		if ((pSPIx->CR1 & (1 << SPI_CR1_DFF)) == (1 << SPI_CR1_DFF)) { //16-bit data frame format
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ba2:	d10e      	bne.n	8000bc2 <SPI_ReceiveData+0x4a>
			*((uint16_t *) pRxBuffer) = pSPIx->DR; //load the data from DR to RxBuffer
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	801a      	strh	r2, [r3, #0]
			len--;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	607b      	str	r3, [r7, #4]
			len--;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	607b      	str	r3, [r7, #4]
			(uint16_t*) pRxBuffer++;
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	e00a      	b.n	8000bd8 <SPI_ReceiveData+0x60>
		} else { //8-bit data frame
			*(pRxBuffer) = pSPIx->DR;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	701a      	strb	r2, [r3, #0]
			len--;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	607b      	str	r3, [r7, #4]
			pRxBuffer++;
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	60bb      	str	r3, [r7, #8]
	while (len) {
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1d3      	bne.n	8000b86 <SPI_ReceiveData+0xe>
		}
	}
}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <GPIO_PeriClkCtrl>:
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void GPIO_PeriClkCtrl(GPIO_Reg_t* pGPIOx, uint8_t EnOrDi) {
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	70fb      	strb	r3, [r7, #3]

	//Enable or disable the GPIO clock peripherals
	if (EnOrDi) {
 8000bf4:	78fb      	ldrb	r3, [r7, #3]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d074      	beq.n	8000ce4 <GPIO_PeriClkCtrl+0xfc>
		//Special note: switch cannot be used for pointer, only integer
		GPIO_PCLK_EN(pGPIOx);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a76      	ldr	r2, [pc, #472]	; (8000dd8 <GPIO_PeriClkCtrl+0x1f0>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d106      	bne.n	8000c10 <GPIO_PeriClkCtrl+0x28>
 8000c02:	4b76      	ldr	r3, [pc, #472]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a75      	ldr	r2, [pc, #468]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
	} else {
		GPIO_PCLK_DI(pGPIOx);
	}
}
 8000c0e:	e0dd      	b.n	8000dcc <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a73      	ldr	r2, [pc, #460]	; (8000de0 <GPIO_PeriClkCtrl+0x1f8>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d106      	bne.n	8000c26 <GPIO_PeriClkCtrl+0x3e>
 8000c18:	4b70      	ldr	r3, [pc, #448]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	4a6f      	ldr	r2, [pc, #444]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000c1e:	f043 0302 	orr.w	r3, r3, #2
 8000c22:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c24:	e0d2      	b.n	8000dcc <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4a6e      	ldr	r2, [pc, #440]	; (8000de4 <GPIO_PeriClkCtrl+0x1fc>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d106      	bne.n	8000c3c <GPIO_PeriClkCtrl+0x54>
 8000c2e:	4b6b      	ldr	r3, [pc, #428]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a6a      	ldr	r2, [pc, #424]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c3a:	e0c7      	b.n	8000dcc <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a6a      	ldr	r2, [pc, #424]	; (8000de8 <GPIO_PeriClkCtrl+0x200>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d106      	bne.n	8000c52 <GPIO_PeriClkCtrl+0x6a>
 8000c44:	4b65      	ldr	r3, [pc, #404]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	4a64      	ldr	r2, [pc, #400]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000c4a:	f043 0308 	orr.w	r3, r3, #8
 8000c4e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c50:	e0bc      	b.n	8000dcc <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a65      	ldr	r2, [pc, #404]	; (8000dec <GPIO_PeriClkCtrl+0x204>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d106      	bne.n	8000c68 <GPIO_PeriClkCtrl+0x80>
 8000c5a:	4b60      	ldr	r3, [pc, #384]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a5f      	ldr	r2, [pc, #380]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000c60:	f043 0310 	orr.w	r3, r3, #16
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c66:	e0b1      	b.n	8000dcc <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a61      	ldr	r2, [pc, #388]	; (8000df0 <GPIO_PeriClkCtrl+0x208>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d106      	bne.n	8000c7e <GPIO_PeriClkCtrl+0x96>
 8000c70:	4b5a      	ldr	r3, [pc, #360]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	4a59      	ldr	r2, [pc, #356]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000c76:	f043 0320 	orr.w	r3, r3, #32
 8000c7a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c7c:	e0a6      	b.n	8000dcc <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a5c      	ldr	r2, [pc, #368]	; (8000df4 <GPIO_PeriClkCtrl+0x20c>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d106      	bne.n	8000c94 <GPIO_PeriClkCtrl+0xac>
 8000c86:	4b55      	ldr	r3, [pc, #340]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a54      	ldr	r2, [pc, #336]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c92:	e09b      	b.n	8000dcc <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a58      	ldr	r2, [pc, #352]	; (8000df8 <GPIO_PeriClkCtrl+0x210>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d106      	bne.n	8000caa <GPIO_PeriClkCtrl+0xc2>
 8000c9c:	4b4f      	ldr	r3, [pc, #316]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	4a4e      	ldr	r2, [pc, #312]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ca8:	e090      	b.n	8000dcc <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a53      	ldr	r2, [pc, #332]	; (8000dfc <GPIO_PeriClkCtrl+0x214>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d106      	bne.n	8000cc0 <GPIO_PeriClkCtrl+0xd8>
 8000cb2:	4b4a      	ldr	r3, [pc, #296]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a49      	ldr	r2, [pc, #292]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cbe:	e085      	b.n	8000dcc <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a4f      	ldr	r2, [pc, #316]	; (8000e00 <GPIO_PeriClkCtrl+0x218>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d106      	bne.n	8000cd6 <GPIO_PeriClkCtrl+0xee>
 8000cc8:	4b44      	ldr	r3, [pc, #272]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ccc:	4a43      	ldr	r2, [pc, #268]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000cce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cd2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cd4:	e07a      	b.n	8000dcc <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000cd6:	4b41      	ldr	r3, [pc, #260]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a40      	ldr	r2, [pc, #256]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000cdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ce2:	e073      	b.n	8000dcc <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a3c      	ldr	r2, [pc, #240]	; (8000dd8 <GPIO_PeriClkCtrl+0x1f0>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d106      	bne.n	8000cfa <GPIO_PeriClkCtrl+0x112>
 8000cec:	4b3b      	ldr	r3, [pc, #236]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf0:	4a3a      	ldr	r2, [pc, #232]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000cf2:	f023 0301 	bic.w	r3, r3, #1
 8000cf6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cf8:	e068      	b.n	8000dcc <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a38      	ldr	r2, [pc, #224]	; (8000de0 <GPIO_PeriClkCtrl+0x1f8>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d106      	bne.n	8000d10 <GPIO_PeriClkCtrl+0x128>
 8000d02:	4b36      	ldr	r3, [pc, #216]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a35      	ldr	r2, [pc, #212]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000d08:	f023 0302 	bic.w	r3, r3, #2
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d0e:	e05d      	b.n	8000dcc <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a34      	ldr	r2, [pc, #208]	; (8000de4 <GPIO_PeriClkCtrl+0x1fc>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d106      	bne.n	8000d26 <GPIO_PeriClkCtrl+0x13e>
 8000d18:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	4a2f      	ldr	r2, [pc, #188]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000d1e:	f023 0304 	bic.w	r3, r3, #4
 8000d22:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d24:	e052      	b.n	8000dcc <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a2f      	ldr	r2, [pc, #188]	; (8000de8 <GPIO_PeriClkCtrl+0x200>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d106      	bne.n	8000d3c <GPIO_PeriClkCtrl+0x154>
 8000d2e:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a2a      	ldr	r2, [pc, #168]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000d34:	f023 0308 	bic.w	r3, r3, #8
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d3a:	e047      	b.n	8000dcc <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a2b      	ldr	r2, [pc, #172]	; (8000dec <GPIO_PeriClkCtrl+0x204>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d106      	bne.n	8000d52 <GPIO_PeriClkCtrl+0x16a>
 8000d44:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	4a24      	ldr	r2, [pc, #144]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000d4a:	f023 0310 	bic.w	r3, r3, #16
 8000d4e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d50:	e03c      	b.n	8000dcc <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a26      	ldr	r2, [pc, #152]	; (8000df0 <GPIO_PeriClkCtrl+0x208>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d106      	bne.n	8000d68 <GPIO_PeriClkCtrl+0x180>
 8000d5a:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a1f      	ldr	r2, [pc, #124]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000d60:	f023 0320 	bic.w	r3, r3, #32
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d66:	e031      	b.n	8000dcc <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a22      	ldr	r2, [pc, #136]	; (8000df4 <GPIO_PeriClkCtrl+0x20c>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d106      	bne.n	8000d7e <GPIO_PeriClkCtrl+0x196>
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d7a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d7c:	e026      	b.n	8000dcc <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a1d      	ldr	r2, [pc, #116]	; (8000df8 <GPIO_PeriClkCtrl+0x210>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d106      	bne.n	8000d94 <GPIO_PeriClkCtrl+0x1ac>
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a14      	ldr	r2, [pc, #80]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d92:	e01b      	b.n	8000dcc <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a19      	ldr	r2, [pc, #100]	; (8000dfc <GPIO_PeriClkCtrl+0x214>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d106      	bne.n	8000daa <GPIO_PeriClkCtrl+0x1c2>
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000da2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000da6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000da8:	e010      	b.n	8000dcc <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <GPIO_PeriClkCtrl+0x218>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d106      	bne.n	8000dc0 <GPIO_PeriClkCtrl+0x1d8>
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a09      	ldr	r2, [pc, #36]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000db8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000dbe:	e005      	b.n	8000dcc <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <GPIO_PeriClkCtrl+0x1f4>)
 8000dc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000dca:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	40020000 	.word	0x40020000
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020400 	.word	0x40020400
 8000de4:	40020800 	.word	0x40020800
 8000de8:	40020c00 	.word	0x40020c00
 8000dec:	40020100 	.word	0x40020100
 8000df0:	40021400 	.word	0x40021400
 8000df4:	40021800 	.word	0x40021800
 8000df8:	40021c00 	.word	0x40021c00
 8000dfc:	40022000 	.word	0x40022000
 8000e00:	40022400 	.word	0x40022400

08000e04 <GPIO_Init>:
 * @param[in]			-
 *
 * @return				- none
 * @note				- none
 */
void GPIO_Init(GPIO_Handle_t* pGPIOHandler) {
 8000e04:	b5b0      	push	{r4, r5, r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]

	//uint32_t temp;
	GPIO_Reg_t* GPIOx = pGPIOHandler->pGPIOx;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	623b      	str	r3, [r7, #32]
	GPIO_PinConfig_t GPIOx_PinConf = pGPIOHandler->GPIOx_PinConfig;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f107 0408 	add.w	r4, r7, #8
 8000e18:	1d1d      	adds	r5, r3, #4
 8000e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e22:	e884 0003 	stmia.w	r4, {r0, r1}

	//Enable the GPIO Clock
	GPIO_PeriClkCtrl(GPIOx, ENABLE);
 8000e26:	2101      	movs	r1, #1
 8000e28:	6a38      	ldr	r0, [r7, #32]
 8000e2a:	f7ff fedd 	bl	8000be8 <GPIO_PeriClkCtrl>

	/*Note: before setting the bits: make sure those registers are clear */
	//Clearing the registers
	//Setting the bits register
	for (uint16_t i = 0U; i < GPIO_PIN_NUMBER; i++) {
 8000e2e:	2300      	movs	r3, #0
 8000e30:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000e32:	e0f7      	b.n	8001024 <GPIO_Init+0x220>

		//Check if the ith bit is set
		if (GPIOx_PinConf.GPIO_PinNumber & (1 << i)) {
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3e:	4013      	ands	r3, r2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	f000 80ec 	beq.w	800101e <GPIO_Init+0x21a>

			//Handle the GPIO pin OUTPUT Mode
			if (GPIOx_PinConf.GPIO_PinMode == GPIO_OUTPUT_MODE) {
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d112      	bne.n	8000e72 <GPIO_Init+0x6e>

				//Configure the OTYPER register
				GPIOx->OTYPER |= (GPIOx_PinConf.GPIO_PinOPType << i);
 8000e4c:	6a3b      	ldr	r3, [r7, #32]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	69b9      	ldr	r1, [r7, #24]
 8000e52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e54:	fa01 f303 	lsl.w	r3, r1, r3
 8000e58:	431a      	orrs	r2, r3
 8000e5a:	6a3b      	ldr	r3, [r7, #32]
 8000e5c:	605a      	str	r2, [r3, #4]

				//Configure the OSPEED register
				GPIOx->OSPEEDR |= (GPIOx_PinConf.GPIO_PinSpeed << i * 2U);
 8000e5e:	6a3b      	ldr	r3, [r7, #32]
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	6939      	ldr	r1, [r7, #16]
 8000e64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	6a3b      	ldr	r3, [r7, #32]
 8000e70:	609a      	str	r2, [r3, #8]
			}

			//Handle the GPIO pin alternate function mode
			if (GPIOx_PinConf.GPIO_PinMode == GPIO_ALT_FUNC_MODE) {
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d119      	bne.n	8000eac <GPIO_Init+0xa8>
				if (i < (GPIO_PIN_NUMBER / 2)) {
 8000e78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e7a:	2b07      	cmp	r3, #7
 8000e7c:	d80a      	bhi.n	8000e94 <GPIO_Init+0x90>
					GPIOx->AFR[0] |= (GPIOx_PinConf.GPIO_PinAltFuncMode << i * 4U);
 8000e7e:	6a3b      	ldr	r3, [r7, #32]
 8000e80:	6a1a      	ldr	r2, [r3, #32]
 8000e82:	69f9      	ldr	r1, [r7, #28]
 8000e84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
 8000e90:	621a      	str	r2, [r3, #32]
 8000e92:	e00b      	b.n	8000eac <GPIO_Init+0xa8>
				} else {
					GPIOx->AFR[1] |= (GPIOx_PinConf.GPIO_PinAltFuncMode << (i % (GPIO_PIN_NUMBER / 2)) * 4U);
 8000e94:	6a3b      	ldr	r3, [r7, #32]
 8000e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e98:	69f9      	ldr	r1, [r7, #28]
 8000e9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e9c:	f003 0307 	and.w	r3, r3, #7
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	6a3b      	ldr	r3, [r7, #32]
 8000eaa:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}

			//Handle the GPIO pin interrupt mode
			if ((GPIOx_PinConf.GPIO_PinMode == GPIO_IT_FT_MODE) || (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RT_MODE)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	d006      	beq.n	8000ec0 <GPIO_Init+0xbc>
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2b05      	cmp	r3, #5
 8000eb6:	d003      	beq.n	8000ec0 <GPIO_Init+0xbc>
				|| (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RFT_MODE)) {
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	f040 809b 	bne.w	8000ff6 <GPIO_Init+0x1f2>

				//Enable the clock for SYSCFG registers
				SYSCFG_PCLK_EN();
 8000ec0:	4b5c      	ldr	r3, [pc, #368]	; (8001034 <GPIO_Init+0x230>)
 8000ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec4:	4a5b      	ldr	r2, [pc, #364]	; (8001034 <GPIO_Init+0x230>)
 8000ec6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eca:	6453      	str	r3, [r2, #68]	; 0x44

				//Handling the falling edge cases
				if (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_FT_MODE) {
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	d115      	bne.n	8000efe <GPIO_Init+0xfa>
					//Configure the FTSR
					EXTI->FTSR |= (1 << i);
 8000ed2:	4b59      	ldr	r3, [pc, #356]	; (8001038 <GPIO_Init+0x234>)
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000ed8:	2101      	movs	r1, #1
 8000eda:	fa01 f202 	lsl.w	r2, r1, r2
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4a55      	ldr	r2, [pc, #340]	; (8001038 <GPIO_Init+0x234>)
 8000ee2:	430b      	orrs	r3, r1
 8000ee4:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~(1 << i); //Clear the corresponding RTSR bit
 8000ee6:	4b54      	ldr	r3, [pc, #336]	; (8001038 <GPIO_Init+0x234>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000eec:	2101      	movs	r1, #1
 8000eee:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef2:	43d2      	mvns	r2, r2
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4a50      	ldr	r2, [pc, #320]	; (8001038 <GPIO_Init+0x234>)
 8000ef8:	400b      	ands	r3, r1
 8000efa:	6093      	str	r3, [r2, #8]
 8000efc:	e02c      	b.n	8000f58 <GPIO_Init+0x154>
				} else if (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RT_MODE) {
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2b05      	cmp	r3, #5
 8000f02:	d115      	bne.n	8000f30 <GPIO_Init+0x12c>
					//Configure the RTSR
					EXTI->RTSR |= (1 << i);
 8000f04:	4b4c      	ldr	r3, [pc, #304]	; (8001038 <GPIO_Init+0x234>)
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f10:	4611      	mov	r1, r2
 8000f12:	4a49      	ldr	r2, [pc, #292]	; (8001038 <GPIO_Init+0x234>)
 8000f14:	430b      	orrs	r3, r1
 8000f16:	6093      	str	r3, [r2, #8]
					EXTI->FTSR &= ~(1 << i); //Clear the corresponding FTSR bit
 8000f18:	4b47      	ldr	r3, [pc, #284]	; (8001038 <GPIO_Init+0x234>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f1e:	2101      	movs	r1, #1
 8000f20:	fa01 f202 	lsl.w	r2, r1, r2
 8000f24:	43d2      	mvns	r2, r2
 8000f26:	4611      	mov	r1, r2
 8000f28:	4a43      	ldr	r2, [pc, #268]	; (8001038 <GPIO_Init+0x234>)
 8000f2a:	400b      	ands	r3, r1
 8000f2c:	60d3      	str	r3, [r2, #12]
 8000f2e:	e013      	b.n	8000f58 <GPIO_Init+0x154>
				}  else {
					//Configure both the FTSR and RTSR
					EXTI->FTSR |= (1 << i);
 8000f30:	4b41      	ldr	r3, [pc, #260]	; (8001038 <GPIO_Init+0x234>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f36:	2101      	movs	r1, #1
 8000f38:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	4a3e      	ldr	r2, [pc, #248]	; (8001038 <GPIO_Init+0x234>)
 8000f40:	430b      	orrs	r3, r1
 8000f42:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR |= (1 << i);
 8000f44:	4b3c      	ldr	r3, [pc, #240]	; (8001038 <GPIO_Init+0x234>)
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f50:	4611      	mov	r1, r2
 8000f52:	4a39      	ldr	r2, [pc, #228]	; (8001038 <GPIO_Init+0x234>)
 8000f54:	430b      	orrs	r3, r1
 8000f56:	6093      	str	r3, [r2, #8]
				//Configure the GPIO port selection in SYSCFG_EXTICR
				//Rule: int quotient = n >> z
				//		int remainder = n & (~(~(int) 0) << z)
				//In this case, since we always want z = 2, as we divide by 4,
				//the term ~(~(int) 0) << z) = 0x03U
				SYSCFG->EXTICR[i >> 2U] |= GPIO_PORT_INDEX(GPIOx) << ((i & 0x03U) * 4U);
 8000f58:	4a38      	ldr	r2, [pc, #224]	; (800103c <GPIO_Init+0x238>)
 8000f5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	3302      	adds	r3, #2
 8000f62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f66:	6a3b      	ldr	r3, [r7, #32]
 8000f68:	4935      	ldr	r1, [pc, #212]	; (8001040 <GPIO_Init+0x23c>)
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d02b      	beq.n	8000fc6 <GPIO_Init+0x1c2>
 8000f6e:	6a3b      	ldr	r3, [r7, #32]
 8000f70:	4934      	ldr	r1, [pc, #208]	; (8001044 <GPIO_Init+0x240>)
 8000f72:	428b      	cmp	r3, r1
 8000f74:	d025      	beq.n	8000fc2 <GPIO_Init+0x1be>
 8000f76:	6a3b      	ldr	r3, [r7, #32]
 8000f78:	4933      	ldr	r1, [pc, #204]	; (8001048 <GPIO_Init+0x244>)
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d01f      	beq.n	8000fbe <GPIO_Init+0x1ba>
 8000f7e:	6a3b      	ldr	r3, [r7, #32]
 8000f80:	4932      	ldr	r1, [pc, #200]	; (800104c <GPIO_Init+0x248>)
 8000f82:	428b      	cmp	r3, r1
 8000f84:	d019      	beq.n	8000fba <GPIO_Init+0x1b6>
 8000f86:	6a3b      	ldr	r3, [r7, #32]
 8000f88:	4931      	ldr	r1, [pc, #196]	; (8001050 <GPIO_Init+0x24c>)
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d013      	beq.n	8000fb6 <GPIO_Init+0x1b2>
 8000f8e:	6a3b      	ldr	r3, [r7, #32]
 8000f90:	4930      	ldr	r1, [pc, #192]	; (8001054 <GPIO_Init+0x250>)
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d00d      	beq.n	8000fb2 <GPIO_Init+0x1ae>
 8000f96:	6a3b      	ldr	r3, [r7, #32]
 8000f98:	492f      	ldr	r1, [pc, #188]	; (8001058 <GPIO_Init+0x254>)
 8000f9a:	428b      	cmp	r3, r1
 8000f9c:	d007      	beq.n	8000fae <GPIO_Init+0x1aa>
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
 8000fa0:	492e      	ldr	r1, [pc, #184]	; (800105c <GPIO_Init+0x258>)
 8000fa2:	428b      	cmp	r3, r1
 8000fa4:	d101      	bne.n	8000faa <GPIO_Init+0x1a6>
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	e00e      	b.n	8000fc8 <GPIO_Init+0x1c4>
 8000faa:	2308      	movs	r3, #8
 8000fac:	e00c      	b.n	8000fc8 <GPIO_Init+0x1c4>
 8000fae:	2306      	movs	r3, #6
 8000fb0:	e00a      	b.n	8000fc8 <GPIO_Init+0x1c4>
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	e008      	b.n	8000fc8 <GPIO_Init+0x1c4>
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	e006      	b.n	8000fc8 <GPIO_Init+0x1c4>
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e004      	b.n	8000fc8 <GPIO_Init+0x1c4>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e002      	b.n	8000fc8 <GPIO_Init+0x1c4>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <GPIO_Init+0x1c4>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8000fca:	f001 0103 	and.w	r1, r1, #3
 8000fce:	0089      	lsls	r1, r1, #2
 8000fd0:	408b      	lsls	r3, r1
 8000fd2:	481a      	ldr	r0, [pc, #104]	; (800103c <GPIO_Init+0x238>)
 8000fd4:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8000fd6:	0889      	lsrs	r1, r1, #2
 8000fd8:	b289      	uxth	r1, r1
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	1c8b      	adds	r3, r1, #2
 8000fde:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

				//Enable the EXTI interrupt delivery using IMR
				EXTI->IMR |= (1 << i);
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <GPIO_Init+0x234>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000fe8:	2101      	movs	r1, #1
 8000fea:	fa01 f202 	lsl.w	r2, r1, r2
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4a11      	ldr	r2, [pc, #68]	; (8001038 <GPIO_Init+0x234>)
 8000ff2:	430b      	orrs	r3, r1
 8000ff4:	6013      	str	r3, [r2, #0]
			}

			//Handle the MODER register
			GPIOx->MODER |= (GPIOx_PinConf.GPIO_PinMode << i * 2U);
 8000ff6:	6a3b      	ldr	r3, [r7, #32]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	68f9      	ldr	r1, [r7, #12]
 8000ffc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa01 f303 	lsl.w	r3, r1, r3
 8001004:	431a      	orrs	r2, r3
 8001006:	6a3b      	ldr	r3, [r7, #32]
 8001008:	601a      	str	r2, [r3, #0]

			//Handle the PuPdCtrl Register
			GPIOx->PUPDR |= (GPIOx_PinConf.GPIO_PinPuPdCtrl << i * 2U);
 800100a:	6a3b      	ldr	r3, [r7, #32]
 800100c:	68da      	ldr	r2, [r3, #12]
 800100e:	6979      	ldr	r1, [r7, #20]
 8001010:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa01 f303 	lsl.w	r3, r1, r3
 8001018:	431a      	orrs	r2, r3
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	60da      	str	r2, [r3, #12]
	for (uint16_t i = 0U; i < GPIO_PIN_NUMBER; i++) {
 800101e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001020:	3301      	adds	r3, #1
 8001022:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001024:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001026:	2b0f      	cmp	r3, #15
 8001028:	f67f af04 	bls.w	8000e34 <GPIO_Init+0x30>
		}
	}
}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	; 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bdb0      	pop	{r4, r5, r7, pc}
 8001034:	40023800 	.word	0x40023800
 8001038:	40013c00 	.word	0x40013c00
 800103c:	40013800 	.word	0x40013800
 8001040:	40020000 	.word	0x40020000
 8001044:	40020400 	.word	0x40020400
 8001048:	40020800 	.word	0x40020800
 800104c:	40020c00 	.word	0x40020c00
 8001050:	40020100 	.word	0x40020100
 8001054:	40021400 	.word	0x40021400
 8001058:	40021800 	.word	0x40021800
 800105c:	40021c00 	.word	0x40021c00

08001060 <GPIO_ReadFromInputPin>:
 * @param[in]			- The pin number
 *
 * @return				- unsigned 8 bit integer
 * @note				- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_Reg_t* pGPIOx, uint16_t pinNumber) {
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
	//value = (uint8_t) ((pGPIOx->IDR & (1 << pinNumber)) >> pinNumber);
	/*or value = (uint8_t) ((pGPIOx->IDR >> pinNumber) & 0x1);*/
	return ((pGPIOx->IDR & pinNumber) == pinNumber) ? 1 : 0;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	691a      	ldr	r2, [r3, #16]
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	401a      	ands	r2, r3
 8001074:	887b      	ldrh	r3, [r7, #2]
 8001076:	429a      	cmp	r2, r3
 8001078:	bf0c      	ite	eq
 800107a:	2301      	moveq	r3, #1
 800107c:	2300      	movne	r3, #0
 800107e:	b2db      	uxtb	r3, r3
}
 8001080:	4618      	mov	r0, r3
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <__errno>:
 800108c:	4b01      	ldr	r3, [pc, #4]	; (8001094 <__errno+0x8>)
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000000 	.word	0x20000000

08001098 <__libc_init_array>:
 8001098:	b570      	push	{r4, r5, r6, lr}
 800109a:	4e0d      	ldr	r6, [pc, #52]	; (80010d0 <__libc_init_array+0x38>)
 800109c:	4c0d      	ldr	r4, [pc, #52]	; (80010d4 <__libc_init_array+0x3c>)
 800109e:	1ba4      	subs	r4, r4, r6
 80010a0:	10a4      	asrs	r4, r4, #2
 80010a2:	2500      	movs	r5, #0
 80010a4:	42a5      	cmp	r5, r4
 80010a6:	d109      	bne.n	80010bc <__libc_init_array+0x24>
 80010a8:	4e0b      	ldr	r6, [pc, #44]	; (80010d8 <__libc_init_array+0x40>)
 80010aa:	4c0c      	ldr	r4, [pc, #48]	; (80010dc <__libc_init_array+0x44>)
 80010ac:	f000 ff68 	bl	8001f80 <_init>
 80010b0:	1ba4      	subs	r4, r4, r6
 80010b2:	10a4      	asrs	r4, r4, #2
 80010b4:	2500      	movs	r5, #0
 80010b6:	42a5      	cmp	r5, r4
 80010b8:	d105      	bne.n	80010c6 <__libc_init_array+0x2e>
 80010ba:	bd70      	pop	{r4, r5, r6, pc}
 80010bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010c0:	4798      	blx	r3
 80010c2:	3501      	adds	r5, #1
 80010c4:	e7ee      	b.n	80010a4 <__libc_init_array+0xc>
 80010c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010ca:	4798      	blx	r3
 80010cc:	3501      	adds	r5, #1
 80010ce:	e7f2      	b.n	80010b6 <__libc_init_array+0x1e>
 80010d0:	080020c0 	.word	0x080020c0
 80010d4:	080020c0 	.word	0x080020c0
 80010d8:	080020c0 	.word	0x080020c0
 80010dc:	080020c4 	.word	0x080020c4

080010e0 <memset>:
 80010e0:	4402      	add	r2, r0
 80010e2:	4603      	mov	r3, r0
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d100      	bne.n	80010ea <memset+0xa>
 80010e8:	4770      	bx	lr
 80010ea:	f803 1b01 	strb.w	r1, [r3], #1
 80010ee:	e7f9      	b.n	80010e4 <memset+0x4>

080010f0 <iprintf>:
 80010f0:	b40f      	push	{r0, r1, r2, r3}
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <iprintf+0x2c>)
 80010f4:	b513      	push	{r0, r1, r4, lr}
 80010f6:	681c      	ldr	r4, [r3, #0]
 80010f8:	b124      	cbz	r4, 8001104 <iprintf+0x14>
 80010fa:	69a3      	ldr	r3, [r4, #24]
 80010fc:	b913      	cbnz	r3, 8001104 <iprintf+0x14>
 80010fe:	4620      	mov	r0, r4
 8001100:	f000 fa22 	bl	8001548 <__sinit>
 8001104:	ab05      	add	r3, sp, #20
 8001106:	9a04      	ldr	r2, [sp, #16]
 8001108:	68a1      	ldr	r1, [r4, #8]
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	4620      	mov	r0, r4
 800110e:	f000 fbdb 	bl	80018c8 <_vfiprintf_r>
 8001112:	b002      	add	sp, #8
 8001114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001118:	b004      	add	sp, #16
 800111a:	4770      	bx	lr
 800111c:	20000000 	.word	0x20000000

08001120 <_puts_r>:
 8001120:	b570      	push	{r4, r5, r6, lr}
 8001122:	460e      	mov	r6, r1
 8001124:	4605      	mov	r5, r0
 8001126:	b118      	cbz	r0, 8001130 <_puts_r+0x10>
 8001128:	6983      	ldr	r3, [r0, #24]
 800112a:	b90b      	cbnz	r3, 8001130 <_puts_r+0x10>
 800112c:	f000 fa0c 	bl	8001548 <__sinit>
 8001130:	69ab      	ldr	r3, [r5, #24]
 8001132:	68ac      	ldr	r4, [r5, #8]
 8001134:	b913      	cbnz	r3, 800113c <_puts_r+0x1c>
 8001136:	4628      	mov	r0, r5
 8001138:	f000 fa06 	bl	8001548 <__sinit>
 800113c:	4b23      	ldr	r3, [pc, #140]	; (80011cc <_puts_r+0xac>)
 800113e:	429c      	cmp	r4, r3
 8001140:	d117      	bne.n	8001172 <_puts_r+0x52>
 8001142:	686c      	ldr	r4, [r5, #4]
 8001144:	89a3      	ldrh	r3, [r4, #12]
 8001146:	071b      	lsls	r3, r3, #28
 8001148:	d51d      	bpl.n	8001186 <_puts_r+0x66>
 800114a:	6923      	ldr	r3, [r4, #16]
 800114c:	b1db      	cbz	r3, 8001186 <_puts_r+0x66>
 800114e:	3e01      	subs	r6, #1
 8001150:	68a3      	ldr	r3, [r4, #8]
 8001152:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001156:	3b01      	subs	r3, #1
 8001158:	60a3      	str	r3, [r4, #8]
 800115a:	b9e9      	cbnz	r1, 8001198 <_puts_r+0x78>
 800115c:	2b00      	cmp	r3, #0
 800115e:	da2e      	bge.n	80011be <_puts_r+0x9e>
 8001160:	4622      	mov	r2, r4
 8001162:	210a      	movs	r1, #10
 8001164:	4628      	mov	r0, r5
 8001166:	f000 f83f 	bl	80011e8 <__swbuf_r>
 800116a:	3001      	adds	r0, #1
 800116c:	d011      	beq.n	8001192 <_puts_r+0x72>
 800116e:	200a      	movs	r0, #10
 8001170:	e011      	b.n	8001196 <_puts_r+0x76>
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <_puts_r+0xb0>)
 8001174:	429c      	cmp	r4, r3
 8001176:	d101      	bne.n	800117c <_puts_r+0x5c>
 8001178:	68ac      	ldr	r4, [r5, #8]
 800117a:	e7e3      	b.n	8001144 <_puts_r+0x24>
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <_puts_r+0xb4>)
 800117e:	429c      	cmp	r4, r3
 8001180:	bf08      	it	eq
 8001182:	68ec      	ldreq	r4, [r5, #12]
 8001184:	e7de      	b.n	8001144 <_puts_r+0x24>
 8001186:	4621      	mov	r1, r4
 8001188:	4628      	mov	r0, r5
 800118a:	f000 f87f 	bl	800128c <__swsetup_r>
 800118e:	2800      	cmp	r0, #0
 8001190:	d0dd      	beq.n	800114e <_puts_r+0x2e>
 8001192:	f04f 30ff 	mov.w	r0, #4294967295
 8001196:	bd70      	pop	{r4, r5, r6, pc}
 8001198:	2b00      	cmp	r3, #0
 800119a:	da04      	bge.n	80011a6 <_puts_r+0x86>
 800119c:	69a2      	ldr	r2, [r4, #24]
 800119e:	429a      	cmp	r2, r3
 80011a0:	dc06      	bgt.n	80011b0 <_puts_r+0x90>
 80011a2:	290a      	cmp	r1, #10
 80011a4:	d004      	beq.n	80011b0 <_puts_r+0x90>
 80011a6:	6823      	ldr	r3, [r4, #0]
 80011a8:	1c5a      	adds	r2, r3, #1
 80011aa:	6022      	str	r2, [r4, #0]
 80011ac:	7019      	strb	r1, [r3, #0]
 80011ae:	e7cf      	b.n	8001150 <_puts_r+0x30>
 80011b0:	4622      	mov	r2, r4
 80011b2:	4628      	mov	r0, r5
 80011b4:	f000 f818 	bl	80011e8 <__swbuf_r>
 80011b8:	3001      	adds	r0, #1
 80011ba:	d1c9      	bne.n	8001150 <_puts_r+0x30>
 80011bc:	e7e9      	b.n	8001192 <_puts_r+0x72>
 80011be:	6823      	ldr	r3, [r4, #0]
 80011c0:	200a      	movs	r0, #10
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	6022      	str	r2, [r4, #0]
 80011c6:	7018      	strb	r0, [r3, #0]
 80011c8:	e7e5      	b.n	8001196 <_puts_r+0x76>
 80011ca:	bf00      	nop
 80011cc:	0800204c 	.word	0x0800204c
 80011d0:	0800206c 	.word	0x0800206c
 80011d4:	0800202c 	.word	0x0800202c

080011d8 <puts>:
 80011d8:	4b02      	ldr	r3, [pc, #8]	; (80011e4 <puts+0xc>)
 80011da:	4601      	mov	r1, r0
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	f7ff bf9f 	b.w	8001120 <_puts_r>
 80011e2:	bf00      	nop
 80011e4:	20000000 	.word	0x20000000

080011e8 <__swbuf_r>:
 80011e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ea:	460e      	mov	r6, r1
 80011ec:	4614      	mov	r4, r2
 80011ee:	4605      	mov	r5, r0
 80011f0:	b118      	cbz	r0, 80011fa <__swbuf_r+0x12>
 80011f2:	6983      	ldr	r3, [r0, #24]
 80011f4:	b90b      	cbnz	r3, 80011fa <__swbuf_r+0x12>
 80011f6:	f000 f9a7 	bl	8001548 <__sinit>
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <__swbuf_r+0x98>)
 80011fc:	429c      	cmp	r4, r3
 80011fe:	d12a      	bne.n	8001256 <__swbuf_r+0x6e>
 8001200:	686c      	ldr	r4, [r5, #4]
 8001202:	69a3      	ldr	r3, [r4, #24]
 8001204:	60a3      	str	r3, [r4, #8]
 8001206:	89a3      	ldrh	r3, [r4, #12]
 8001208:	071a      	lsls	r2, r3, #28
 800120a:	d52e      	bpl.n	800126a <__swbuf_r+0x82>
 800120c:	6923      	ldr	r3, [r4, #16]
 800120e:	b363      	cbz	r3, 800126a <__swbuf_r+0x82>
 8001210:	6923      	ldr	r3, [r4, #16]
 8001212:	6820      	ldr	r0, [r4, #0]
 8001214:	1ac0      	subs	r0, r0, r3
 8001216:	6963      	ldr	r3, [r4, #20]
 8001218:	b2f6      	uxtb	r6, r6
 800121a:	4283      	cmp	r3, r0
 800121c:	4637      	mov	r7, r6
 800121e:	dc04      	bgt.n	800122a <__swbuf_r+0x42>
 8001220:	4621      	mov	r1, r4
 8001222:	4628      	mov	r0, r5
 8001224:	f000 f926 	bl	8001474 <_fflush_r>
 8001228:	bb28      	cbnz	r0, 8001276 <__swbuf_r+0x8e>
 800122a:	68a3      	ldr	r3, [r4, #8]
 800122c:	3b01      	subs	r3, #1
 800122e:	60a3      	str	r3, [r4, #8]
 8001230:	6823      	ldr	r3, [r4, #0]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	6022      	str	r2, [r4, #0]
 8001236:	701e      	strb	r6, [r3, #0]
 8001238:	6963      	ldr	r3, [r4, #20]
 800123a:	3001      	adds	r0, #1
 800123c:	4283      	cmp	r3, r0
 800123e:	d004      	beq.n	800124a <__swbuf_r+0x62>
 8001240:	89a3      	ldrh	r3, [r4, #12]
 8001242:	07db      	lsls	r3, r3, #31
 8001244:	d519      	bpl.n	800127a <__swbuf_r+0x92>
 8001246:	2e0a      	cmp	r6, #10
 8001248:	d117      	bne.n	800127a <__swbuf_r+0x92>
 800124a:	4621      	mov	r1, r4
 800124c:	4628      	mov	r0, r5
 800124e:	f000 f911 	bl	8001474 <_fflush_r>
 8001252:	b190      	cbz	r0, 800127a <__swbuf_r+0x92>
 8001254:	e00f      	b.n	8001276 <__swbuf_r+0x8e>
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <__swbuf_r+0x9c>)
 8001258:	429c      	cmp	r4, r3
 800125a:	d101      	bne.n	8001260 <__swbuf_r+0x78>
 800125c:	68ac      	ldr	r4, [r5, #8]
 800125e:	e7d0      	b.n	8001202 <__swbuf_r+0x1a>
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <__swbuf_r+0xa0>)
 8001262:	429c      	cmp	r4, r3
 8001264:	bf08      	it	eq
 8001266:	68ec      	ldreq	r4, [r5, #12]
 8001268:	e7cb      	b.n	8001202 <__swbuf_r+0x1a>
 800126a:	4621      	mov	r1, r4
 800126c:	4628      	mov	r0, r5
 800126e:	f000 f80d 	bl	800128c <__swsetup_r>
 8001272:	2800      	cmp	r0, #0
 8001274:	d0cc      	beq.n	8001210 <__swbuf_r+0x28>
 8001276:	f04f 37ff 	mov.w	r7, #4294967295
 800127a:	4638      	mov	r0, r7
 800127c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800127e:	bf00      	nop
 8001280:	0800204c 	.word	0x0800204c
 8001284:	0800206c 	.word	0x0800206c
 8001288:	0800202c 	.word	0x0800202c

0800128c <__swsetup_r>:
 800128c:	4b32      	ldr	r3, [pc, #200]	; (8001358 <__swsetup_r+0xcc>)
 800128e:	b570      	push	{r4, r5, r6, lr}
 8001290:	681d      	ldr	r5, [r3, #0]
 8001292:	4606      	mov	r6, r0
 8001294:	460c      	mov	r4, r1
 8001296:	b125      	cbz	r5, 80012a2 <__swsetup_r+0x16>
 8001298:	69ab      	ldr	r3, [r5, #24]
 800129a:	b913      	cbnz	r3, 80012a2 <__swsetup_r+0x16>
 800129c:	4628      	mov	r0, r5
 800129e:	f000 f953 	bl	8001548 <__sinit>
 80012a2:	4b2e      	ldr	r3, [pc, #184]	; (800135c <__swsetup_r+0xd0>)
 80012a4:	429c      	cmp	r4, r3
 80012a6:	d10f      	bne.n	80012c8 <__swsetup_r+0x3c>
 80012a8:	686c      	ldr	r4, [r5, #4]
 80012aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	0715      	lsls	r5, r2, #28
 80012b2:	d42c      	bmi.n	800130e <__swsetup_r+0x82>
 80012b4:	06d0      	lsls	r0, r2, #27
 80012b6:	d411      	bmi.n	80012dc <__swsetup_r+0x50>
 80012b8:	2209      	movs	r2, #9
 80012ba:	6032      	str	r2, [r6, #0]
 80012bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012c0:	81a3      	strh	r3, [r4, #12]
 80012c2:	f04f 30ff 	mov.w	r0, #4294967295
 80012c6:	e03e      	b.n	8001346 <__swsetup_r+0xba>
 80012c8:	4b25      	ldr	r3, [pc, #148]	; (8001360 <__swsetup_r+0xd4>)
 80012ca:	429c      	cmp	r4, r3
 80012cc:	d101      	bne.n	80012d2 <__swsetup_r+0x46>
 80012ce:	68ac      	ldr	r4, [r5, #8]
 80012d0:	e7eb      	b.n	80012aa <__swsetup_r+0x1e>
 80012d2:	4b24      	ldr	r3, [pc, #144]	; (8001364 <__swsetup_r+0xd8>)
 80012d4:	429c      	cmp	r4, r3
 80012d6:	bf08      	it	eq
 80012d8:	68ec      	ldreq	r4, [r5, #12]
 80012da:	e7e6      	b.n	80012aa <__swsetup_r+0x1e>
 80012dc:	0751      	lsls	r1, r2, #29
 80012de:	d512      	bpl.n	8001306 <__swsetup_r+0x7a>
 80012e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012e2:	b141      	cbz	r1, 80012f6 <__swsetup_r+0x6a>
 80012e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012e8:	4299      	cmp	r1, r3
 80012ea:	d002      	beq.n	80012f2 <__swsetup_r+0x66>
 80012ec:	4630      	mov	r0, r6
 80012ee:	f000 fa19 	bl	8001724 <_free_r>
 80012f2:	2300      	movs	r3, #0
 80012f4:	6363      	str	r3, [r4, #52]	; 0x34
 80012f6:	89a3      	ldrh	r3, [r4, #12]
 80012f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80012fc:	81a3      	strh	r3, [r4, #12]
 80012fe:	2300      	movs	r3, #0
 8001300:	6063      	str	r3, [r4, #4]
 8001302:	6923      	ldr	r3, [r4, #16]
 8001304:	6023      	str	r3, [r4, #0]
 8001306:	89a3      	ldrh	r3, [r4, #12]
 8001308:	f043 0308 	orr.w	r3, r3, #8
 800130c:	81a3      	strh	r3, [r4, #12]
 800130e:	6923      	ldr	r3, [r4, #16]
 8001310:	b94b      	cbnz	r3, 8001326 <__swsetup_r+0x9a>
 8001312:	89a3      	ldrh	r3, [r4, #12]
 8001314:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800131c:	d003      	beq.n	8001326 <__swsetup_r+0x9a>
 800131e:	4621      	mov	r1, r4
 8001320:	4630      	mov	r0, r6
 8001322:	f000 f9bf 	bl	80016a4 <__smakebuf_r>
 8001326:	89a2      	ldrh	r2, [r4, #12]
 8001328:	f012 0301 	ands.w	r3, r2, #1
 800132c:	d00c      	beq.n	8001348 <__swsetup_r+0xbc>
 800132e:	2300      	movs	r3, #0
 8001330:	60a3      	str	r3, [r4, #8]
 8001332:	6963      	ldr	r3, [r4, #20]
 8001334:	425b      	negs	r3, r3
 8001336:	61a3      	str	r3, [r4, #24]
 8001338:	6923      	ldr	r3, [r4, #16]
 800133a:	b953      	cbnz	r3, 8001352 <__swsetup_r+0xc6>
 800133c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001340:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001344:	d1ba      	bne.n	80012bc <__swsetup_r+0x30>
 8001346:	bd70      	pop	{r4, r5, r6, pc}
 8001348:	0792      	lsls	r2, r2, #30
 800134a:	bf58      	it	pl
 800134c:	6963      	ldrpl	r3, [r4, #20]
 800134e:	60a3      	str	r3, [r4, #8]
 8001350:	e7f2      	b.n	8001338 <__swsetup_r+0xac>
 8001352:	2000      	movs	r0, #0
 8001354:	e7f7      	b.n	8001346 <__swsetup_r+0xba>
 8001356:	bf00      	nop
 8001358:	20000000 	.word	0x20000000
 800135c:	0800204c 	.word	0x0800204c
 8001360:	0800206c 	.word	0x0800206c
 8001364:	0800202c 	.word	0x0800202c

08001368 <__sflush_r>:
 8001368:	898a      	ldrh	r2, [r1, #12]
 800136a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800136e:	4605      	mov	r5, r0
 8001370:	0710      	lsls	r0, r2, #28
 8001372:	460c      	mov	r4, r1
 8001374:	d458      	bmi.n	8001428 <__sflush_r+0xc0>
 8001376:	684b      	ldr	r3, [r1, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	dc05      	bgt.n	8001388 <__sflush_r+0x20>
 800137c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800137e:	2b00      	cmp	r3, #0
 8001380:	dc02      	bgt.n	8001388 <__sflush_r+0x20>
 8001382:	2000      	movs	r0, #0
 8001384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001388:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800138a:	2e00      	cmp	r6, #0
 800138c:	d0f9      	beq.n	8001382 <__sflush_r+0x1a>
 800138e:	2300      	movs	r3, #0
 8001390:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001394:	682f      	ldr	r7, [r5, #0]
 8001396:	6a21      	ldr	r1, [r4, #32]
 8001398:	602b      	str	r3, [r5, #0]
 800139a:	d032      	beq.n	8001402 <__sflush_r+0x9a>
 800139c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800139e:	89a3      	ldrh	r3, [r4, #12]
 80013a0:	075a      	lsls	r2, r3, #29
 80013a2:	d505      	bpl.n	80013b0 <__sflush_r+0x48>
 80013a4:	6863      	ldr	r3, [r4, #4]
 80013a6:	1ac0      	subs	r0, r0, r3
 80013a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013aa:	b10b      	cbz	r3, 80013b0 <__sflush_r+0x48>
 80013ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013ae:	1ac0      	subs	r0, r0, r3
 80013b0:	2300      	movs	r3, #0
 80013b2:	4602      	mov	r2, r0
 80013b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013b6:	6a21      	ldr	r1, [r4, #32]
 80013b8:	4628      	mov	r0, r5
 80013ba:	47b0      	blx	r6
 80013bc:	1c43      	adds	r3, r0, #1
 80013be:	89a3      	ldrh	r3, [r4, #12]
 80013c0:	d106      	bne.n	80013d0 <__sflush_r+0x68>
 80013c2:	6829      	ldr	r1, [r5, #0]
 80013c4:	291d      	cmp	r1, #29
 80013c6:	d848      	bhi.n	800145a <__sflush_r+0xf2>
 80013c8:	4a29      	ldr	r2, [pc, #164]	; (8001470 <__sflush_r+0x108>)
 80013ca:	40ca      	lsrs	r2, r1
 80013cc:	07d6      	lsls	r6, r2, #31
 80013ce:	d544      	bpl.n	800145a <__sflush_r+0xf2>
 80013d0:	2200      	movs	r2, #0
 80013d2:	6062      	str	r2, [r4, #4]
 80013d4:	04d9      	lsls	r1, r3, #19
 80013d6:	6922      	ldr	r2, [r4, #16]
 80013d8:	6022      	str	r2, [r4, #0]
 80013da:	d504      	bpl.n	80013e6 <__sflush_r+0x7e>
 80013dc:	1c42      	adds	r2, r0, #1
 80013de:	d101      	bne.n	80013e4 <__sflush_r+0x7c>
 80013e0:	682b      	ldr	r3, [r5, #0]
 80013e2:	b903      	cbnz	r3, 80013e6 <__sflush_r+0x7e>
 80013e4:	6560      	str	r0, [r4, #84]	; 0x54
 80013e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013e8:	602f      	str	r7, [r5, #0]
 80013ea:	2900      	cmp	r1, #0
 80013ec:	d0c9      	beq.n	8001382 <__sflush_r+0x1a>
 80013ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013f2:	4299      	cmp	r1, r3
 80013f4:	d002      	beq.n	80013fc <__sflush_r+0x94>
 80013f6:	4628      	mov	r0, r5
 80013f8:	f000 f994 	bl	8001724 <_free_r>
 80013fc:	2000      	movs	r0, #0
 80013fe:	6360      	str	r0, [r4, #52]	; 0x34
 8001400:	e7c0      	b.n	8001384 <__sflush_r+0x1c>
 8001402:	2301      	movs	r3, #1
 8001404:	4628      	mov	r0, r5
 8001406:	47b0      	blx	r6
 8001408:	1c41      	adds	r1, r0, #1
 800140a:	d1c8      	bne.n	800139e <__sflush_r+0x36>
 800140c:	682b      	ldr	r3, [r5, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0c5      	beq.n	800139e <__sflush_r+0x36>
 8001412:	2b1d      	cmp	r3, #29
 8001414:	d001      	beq.n	800141a <__sflush_r+0xb2>
 8001416:	2b16      	cmp	r3, #22
 8001418:	d101      	bne.n	800141e <__sflush_r+0xb6>
 800141a:	602f      	str	r7, [r5, #0]
 800141c:	e7b1      	b.n	8001382 <__sflush_r+0x1a>
 800141e:	89a3      	ldrh	r3, [r4, #12]
 8001420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001424:	81a3      	strh	r3, [r4, #12]
 8001426:	e7ad      	b.n	8001384 <__sflush_r+0x1c>
 8001428:	690f      	ldr	r7, [r1, #16]
 800142a:	2f00      	cmp	r7, #0
 800142c:	d0a9      	beq.n	8001382 <__sflush_r+0x1a>
 800142e:	0793      	lsls	r3, r2, #30
 8001430:	680e      	ldr	r6, [r1, #0]
 8001432:	bf08      	it	eq
 8001434:	694b      	ldreq	r3, [r1, #20]
 8001436:	600f      	str	r7, [r1, #0]
 8001438:	bf18      	it	ne
 800143a:	2300      	movne	r3, #0
 800143c:	eba6 0807 	sub.w	r8, r6, r7
 8001440:	608b      	str	r3, [r1, #8]
 8001442:	f1b8 0f00 	cmp.w	r8, #0
 8001446:	dd9c      	ble.n	8001382 <__sflush_r+0x1a>
 8001448:	4643      	mov	r3, r8
 800144a:	463a      	mov	r2, r7
 800144c:	6a21      	ldr	r1, [r4, #32]
 800144e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001450:	4628      	mov	r0, r5
 8001452:	47b0      	blx	r6
 8001454:	2800      	cmp	r0, #0
 8001456:	dc06      	bgt.n	8001466 <__sflush_r+0xfe>
 8001458:	89a3      	ldrh	r3, [r4, #12]
 800145a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800145e:	81a3      	strh	r3, [r4, #12]
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	e78e      	b.n	8001384 <__sflush_r+0x1c>
 8001466:	4407      	add	r7, r0
 8001468:	eba8 0800 	sub.w	r8, r8, r0
 800146c:	e7e9      	b.n	8001442 <__sflush_r+0xda>
 800146e:	bf00      	nop
 8001470:	20400001 	.word	0x20400001

08001474 <_fflush_r>:
 8001474:	b538      	push	{r3, r4, r5, lr}
 8001476:	690b      	ldr	r3, [r1, #16]
 8001478:	4605      	mov	r5, r0
 800147a:	460c      	mov	r4, r1
 800147c:	b1db      	cbz	r3, 80014b6 <_fflush_r+0x42>
 800147e:	b118      	cbz	r0, 8001488 <_fflush_r+0x14>
 8001480:	6983      	ldr	r3, [r0, #24]
 8001482:	b90b      	cbnz	r3, 8001488 <_fflush_r+0x14>
 8001484:	f000 f860 	bl	8001548 <__sinit>
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <_fflush_r+0x48>)
 800148a:	429c      	cmp	r4, r3
 800148c:	d109      	bne.n	80014a2 <_fflush_r+0x2e>
 800148e:	686c      	ldr	r4, [r5, #4]
 8001490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001494:	b17b      	cbz	r3, 80014b6 <_fflush_r+0x42>
 8001496:	4621      	mov	r1, r4
 8001498:	4628      	mov	r0, r5
 800149a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800149e:	f7ff bf63 	b.w	8001368 <__sflush_r>
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <_fflush_r+0x4c>)
 80014a4:	429c      	cmp	r4, r3
 80014a6:	d101      	bne.n	80014ac <_fflush_r+0x38>
 80014a8:	68ac      	ldr	r4, [r5, #8]
 80014aa:	e7f1      	b.n	8001490 <_fflush_r+0x1c>
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <_fflush_r+0x50>)
 80014ae:	429c      	cmp	r4, r3
 80014b0:	bf08      	it	eq
 80014b2:	68ec      	ldreq	r4, [r5, #12]
 80014b4:	e7ec      	b.n	8001490 <_fflush_r+0x1c>
 80014b6:	2000      	movs	r0, #0
 80014b8:	bd38      	pop	{r3, r4, r5, pc}
 80014ba:	bf00      	nop
 80014bc:	0800204c 	.word	0x0800204c
 80014c0:	0800206c 	.word	0x0800206c
 80014c4:	0800202c 	.word	0x0800202c

080014c8 <std>:
 80014c8:	2300      	movs	r3, #0
 80014ca:	b510      	push	{r4, lr}
 80014cc:	4604      	mov	r4, r0
 80014ce:	e9c0 3300 	strd	r3, r3, [r0]
 80014d2:	6083      	str	r3, [r0, #8]
 80014d4:	8181      	strh	r1, [r0, #12]
 80014d6:	6643      	str	r3, [r0, #100]	; 0x64
 80014d8:	81c2      	strh	r2, [r0, #14]
 80014da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80014de:	6183      	str	r3, [r0, #24]
 80014e0:	4619      	mov	r1, r3
 80014e2:	2208      	movs	r2, #8
 80014e4:	305c      	adds	r0, #92	; 0x5c
 80014e6:	f7ff fdfb 	bl	80010e0 <memset>
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <std+0x38>)
 80014ec:	6263      	str	r3, [r4, #36]	; 0x24
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <std+0x3c>)
 80014f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80014f2:	4b05      	ldr	r3, [pc, #20]	; (8001508 <std+0x40>)
 80014f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <std+0x44>)
 80014f8:	6224      	str	r4, [r4, #32]
 80014fa:	6323      	str	r3, [r4, #48]	; 0x30
 80014fc:	bd10      	pop	{r4, pc}
 80014fe:	bf00      	nop
 8001500:	08001e25 	.word	0x08001e25
 8001504:	08001e47 	.word	0x08001e47
 8001508:	08001e7f 	.word	0x08001e7f
 800150c:	08001ea3 	.word	0x08001ea3

08001510 <_cleanup_r>:
 8001510:	4901      	ldr	r1, [pc, #4]	; (8001518 <_cleanup_r+0x8>)
 8001512:	f000 b885 	b.w	8001620 <_fwalk_reent>
 8001516:	bf00      	nop
 8001518:	08001475 	.word	0x08001475

0800151c <__sfmoreglue>:
 800151c:	b570      	push	{r4, r5, r6, lr}
 800151e:	1e4a      	subs	r2, r1, #1
 8001520:	2568      	movs	r5, #104	; 0x68
 8001522:	4355      	muls	r5, r2
 8001524:	460e      	mov	r6, r1
 8001526:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800152a:	f000 f949 	bl	80017c0 <_malloc_r>
 800152e:	4604      	mov	r4, r0
 8001530:	b140      	cbz	r0, 8001544 <__sfmoreglue+0x28>
 8001532:	2100      	movs	r1, #0
 8001534:	e9c0 1600 	strd	r1, r6, [r0]
 8001538:	300c      	adds	r0, #12
 800153a:	60a0      	str	r0, [r4, #8]
 800153c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001540:	f7ff fdce 	bl	80010e0 <memset>
 8001544:	4620      	mov	r0, r4
 8001546:	bd70      	pop	{r4, r5, r6, pc}

08001548 <__sinit>:
 8001548:	6983      	ldr	r3, [r0, #24]
 800154a:	b510      	push	{r4, lr}
 800154c:	4604      	mov	r4, r0
 800154e:	bb33      	cbnz	r3, 800159e <__sinit+0x56>
 8001550:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001554:	6503      	str	r3, [r0, #80]	; 0x50
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <__sinit+0x58>)
 8001558:	4a12      	ldr	r2, [pc, #72]	; (80015a4 <__sinit+0x5c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6282      	str	r2, [r0, #40]	; 0x28
 800155e:	4298      	cmp	r0, r3
 8001560:	bf04      	itt	eq
 8001562:	2301      	moveq	r3, #1
 8001564:	6183      	streq	r3, [r0, #24]
 8001566:	f000 f81f 	bl	80015a8 <__sfp>
 800156a:	6060      	str	r0, [r4, #4]
 800156c:	4620      	mov	r0, r4
 800156e:	f000 f81b 	bl	80015a8 <__sfp>
 8001572:	60a0      	str	r0, [r4, #8]
 8001574:	4620      	mov	r0, r4
 8001576:	f000 f817 	bl	80015a8 <__sfp>
 800157a:	2200      	movs	r2, #0
 800157c:	60e0      	str	r0, [r4, #12]
 800157e:	2104      	movs	r1, #4
 8001580:	6860      	ldr	r0, [r4, #4]
 8001582:	f7ff ffa1 	bl	80014c8 <std>
 8001586:	2201      	movs	r2, #1
 8001588:	2109      	movs	r1, #9
 800158a:	68a0      	ldr	r0, [r4, #8]
 800158c:	f7ff ff9c 	bl	80014c8 <std>
 8001590:	2202      	movs	r2, #2
 8001592:	2112      	movs	r1, #18
 8001594:	68e0      	ldr	r0, [r4, #12]
 8001596:	f7ff ff97 	bl	80014c8 <std>
 800159a:	2301      	movs	r3, #1
 800159c:	61a3      	str	r3, [r4, #24]
 800159e:	bd10      	pop	{r4, pc}
 80015a0:	08002028 	.word	0x08002028
 80015a4:	08001511 	.word	0x08001511

080015a8 <__sfp>:
 80015a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <__sfp+0x70>)
 80015ac:	681e      	ldr	r6, [r3, #0]
 80015ae:	69b3      	ldr	r3, [r6, #24]
 80015b0:	4607      	mov	r7, r0
 80015b2:	b913      	cbnz	r3, 80015ba <__sfp+0x12>
 80015b4:	4630      	mov	r0, r6
 80015b6:	f7ff ffc7 	bl	8001548 <__sinit>
 80015ba:	3648      	adds	r6, #72	; 0x48
 80015bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80015c0:	3b01      	subs	r3, #1
 80015c2:	d503      	bpl.n	80015cc <__sfp+0x24>
 80015c4:	6833      	ldr	r3, [r6, #0]
 80015c6:	b133      	cbz	r3, 80015d6 <__sfp+0x2e>
 80015c8:	6836      	ldr	r6, [r6, #0]
 80015ca:	e7f7      	b.n	80015bc <__sfp+0x14>
 80015cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80015d0:	b16d      	cbz	r5, 80015ee <__sfp+0x46>
 80015d2:	3468      	adds	r4, #104	; 0x68
 80015d4:	e7f4      	b.n	80015c0 <__sfp+0x18>
 80015d6:	2104      	movs	r1, #4
 80015d8:	4638      	mov	r0, r7
 80015da:	f7ff ff9f 	bl	800151c <__sfmoreglue>
 80015de:	6030      	str	r0, [r6, #0]
 80015e0:	2800      	cmp	r0, #0
 80015e2:	d1f1      	bne.n	80015c8 <__sfp+0x20>
 80015e4:	230c      	movs	r3, #12
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	4604      	mov	r4, r0
 80015ea:	4620      	mov	r0, r4
 80015ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <__sfp+0x74>)
 80015f0:	6665      	str	r5, [r4, #100]	; 0x64
 80015f2:	e9c4 5500 	strd	r5, r5, [r4]
 80015f6:	60a5      	str	r5, [r4, #8]
 80015f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80015fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001600:	2208      	movs	r2, #8
 8001602:	4629      	mov	r1, r5
 8001604:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001608:	f7ff fd6a 	bl	80010e0 <memset>
 800160c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001610:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001614:	e7e9      	b.n	80015ea <__sfp+0x42>
 8001616:	bf00      	nop
 8001618:	08002028 	.word	0x08002028
 800161c:	ffff0001 	.word	0xffff0001

08001620 <_fwalk_reent>:
 8001620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001624:	4680      	mov	r8, r0
 8001626:	4689      	mov	r9, r1
 8001628:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800162c:	2600      	movs	r6, #0
 800162e:	b914      	cbnz	r4, 8001636 <_fwalk_reent+0x16>
 8001630:	4630      	mov	r0, r6
 8001632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001636:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800163a:	3f01      	subs	r7, #1
 800163c:	d501      	bpl.n	8001642 <_fwalk_reent+0x22>
 800163e:	6824      	ldr	r4, [r4, #0]
 8001640:	e7f5      	b.n	800162e <_fwalk_reent+0xe>
 8001642:	89ab      	ldrh	r3, [r5, #12]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d907      	bls.n	8001658 <_fwalk_reent+0x38>
 8001648:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800164c:	3301      	adds	r3, #1
 800164e:	d003      	beq.n	8001658 <_fwalk_reent+0x38>
 8001650:	4629      	mov	r1, r5
 8001652:	4640      	mov	r0, r8
 8001654:	47c8      	blx	r9
 8001656:	4306      	orrs	r6, r0
 8001658:	3568      	adds	r5, #104	; 0x68
 800165a:	e7ee      	b.n	800163a <_fwalk_reent+0x1a>

0800165c <__swhatbuf_r>:
 800165c:	b570      	push	{r4, r5, r6, lr}
 800165e:	460e      	mov	r6, r1
 8001660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001664:	2900      	cmp	r1, #0
 8001666:	b096      	sub	sp, #88	; 0x58
 8001668:	4614      	mov	r4, r2
 800166a:	461d      	mov	r5, r3
 800166c:	da07      	bge.n	800167e <__swhatbuf_r+0x22>
 800166e:	2300      	movs	r3, #0
 8001670:	602b      	str	r3, [r5, #0]
 8001672:	89b3      	ldrh	r3, [r6, #12]
 8001674:	061a      	lsls	r2, r3, #24
 8001676:	d410      	bmi.n	800169a <__swhatbuf_r+0x3e>
 8001678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800167c:	e00e      	b.n	800169c <__swhatbuf_r+0x40>
 800167e:	466a      	mov	r2, sp
 8001680:	f000 fc36 	bl	8001ef0 <_fstat_r>
 8001684:	2800      	cmp	r0, #0
 8001686:	dbf2      	blt.n	800166e <__swhatbuf_r+0x12>
 8001688:	9a01      	ldr	r2, [sp, #4]
 800168a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800168e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001692:	425a      	negs	r2, r3
 8001694:	415a      	adcs	r2, r3
 8001696:	602a      	str	r2, [r5, #0]
 8001698:	e7ee      	b.n	8001678 <__swhatbuf_r+0x1c>
 800169a:	2340      	movs	r3, #64	; 0x40
 800169c:	2000      	movs	r0, #0
 800169e:	6023      	str	r3, [r4, #0]
 80016a0:	b016      	add	sp, #88	; 0x58
 80016a2:	bd70      	pop	{r4, r5, r6, pc}

080016a4 <__smakebuf_r>:
 80016a4:	898b      	ldrh	r3, [r1, #12]
 80016a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80016a8:	079d      	lsls	r5, r3, #30
 80016aa:	4606      	mov	r6, r0
 80016ac:	460c      	mov	r4, r1
 80016ae:	d507      	bpl.n	80016c0 <__smakebuf_r+0x1c>
 80016b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80016b4:	6023      	str	r3, [r4, #0]
 80016b6:	6123      	str	r3, [r4, #16]
 80016b8:	2301      	movs	r3, #1
 80016ba:	6163      	str	r3, [r4, #20]
 80016bc:	b002      	add	sp, #8
 80016be:	bd70      	pop	{r4, r5, r6, pc}
 80016c0:	ab01      	add	r3, sp, #4
 80016c2:	466a      	mov	r2, sp
 80016c4:	f7ff ffca 	bl	800165c <__swhatbuf_r>
 80016c8:	9900      	ldr	r1, [sp, #0]
 80016ca:	4605      	mov	r5, r0
 80016cc:	4630      	mov	r0, r6
 80016ce:	f000 f877 	bl	80017c0 <_malloc_r>
 80016d2:	b948      	cbnz	r0, 80016e8 <__smakebuf_r+0x44>
 80016d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016d8:	059a      	lsls	r2, r3, #22
 80016da:	d4ef      	bmi.n	80016bc <__smakebuf_r+0x18>
 80016dc:	f023 0303 	bic.w	r3, r3, #3
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	81a3      	strh	r3, [r4, #12]
 80016e6:	e7e3      	b.n	80016b0 <__smakebuf_r+0xc>
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <__smakebuf_r+0x7c>)
 80016ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80016ec:	89a3      	ldrh	r3, [r4, #12]
 80016ee:	6020      	str	r0, [r4, #0]
 80016f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f4:	81a3      	strh	r3, [r4, #12]
 80016f6:	9b00      	ldr	r3, [sp, #0]
 80016f8:	6163      	str	r3, [r4, #20]
 80016fa:	9b01      	ldr	r3, [sp, #4]
 80016fc:	6120      	str	r0, [r4, #16]
 80016fe:	b15b      	cbz	r3, 8001718 <__smakebuf_r+0x74>
 8001700:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001704:	4630      	mov	r0, r6
 8001706:	f000 fc05 	bl	8001f14 <_isatty_r>
 800170a:	b128      	cbz	r0, 8001718 <__smakebuf_r+0x74>
 800170c:	89a3      	ldrh	r3, [r4, #12]
 800170e:	f023 0303 	bic.w	r3, r3, #3
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	81a3      	strh	r3, [r4, #12]
 8001718:	89a3      	ldrh	r3, [r4, #12]
 800171a:	431d      	orrs	r5, r3
 800171c:	81a5      	strh	r5, [r4, #12]
 800171e:	e7cd      	b.n	80016bc <__smakebuf_r+0x18>
 8001720:	08001511 	.word	0x08001511

08001724 <_free_r>:
 8001724:	b538      	push	{r3, r4, r5, lr}
 8001726:	4605      	mov	r5, r0
 8001728:	2900      	cmp	r1, #0
 800172a:	d045      	beq.n	80017b8 <_free_r+0x94>
 800172c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001730:	1f0c      	subs	r4, r1, #4
 8001732:	2b00      	cmp	r3, #0
 8001734:	bfb8      	it	lt
 8001736:	18e4      	addlt	r4, r4, r3
 8001738:	f000 fc0e 	bl	8001f58 <__malloc_lock>
 800173c:	4a1f      	ldr	r2, [pc, #124]	; (80017bc <_free_r+0x98>)
 800173e:	6813      	ldr	r3, [r2, #0]
 8001740:	4610      	mov	r0, r2
 8001742:	b933      	cbnz	r3, 8001752 <_free_r+0x2e>
 8001744:	6063      	str	r3, [r4, #4]
 8001746:	6014      	str	r4, [r2, #0]
 8001748:	4628      	mov	r0, r5
 800174a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800174e:	f000 bc04 	b.w	8001f5a <__malloc_unlock>
 8001752:	42a3      	cmp	r3, r4
 8001754:	d90c      	bls.n	8001770 <_free_r+0x4c>
 8001756:	6821      	ldr	r1, [r4, #0]
 8001758:	1862      	adds	r2, r4, r1
 800175a:	4293      	cmp	r3, r2
 800175c:	bf04      	itt	eq
 800175e:	681a      	ldreq	r2, [r3, #0]
 8001760:	685b      	ldreq	r3, [r3, #4]
 8001762:	6063      	str	r3, [r4, #4]
 8001764:	bf04      	itt	eq
 8001766:	1852      	addeq	r2, r2, r1
 8001768:	6022      	streq	r2, [r4, #0]
 800176a:	6004      	str	r4, [r0, #0]
 800176c:	e7ec      	b.n	8001748 <_free_r+0x24>
 800176e:	4613      	mov	r3, r2
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	b10a      	cbz	r2, 8001778 <_free_r+0x54>
 8001774:	42a2      	cmp	r2, r4
 8001776:	d9fa      	bls.n	800176e <_free_r+0x4a>
 8001778:	6819      	ldr	r1, [r3, #0]
 800177a:	1858      	adds	r0, r3, r1
 800177c:	42a0      	cmp	r0, r4
 800177e:	d10b      	bne.n	8001798 <_free_r+0x74>
 8001780:	6820      	ldr	r0, [r4, #0]
 8001782:	4401      	add	r1, r0
 8001784:	1858      	adds	r0, r3, r1
 8001786:	4282      	cmp	r2, r0
 8001788:	6019      	str	r1, [r3, #0]
 800178a:	d1dd      	bne.n	8001748 <_free_r+0x24>
 800178c:	6810      	ldr	r0, [r2, #0]
 800178e:	6852      	ldr	r2, [r2, #4]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	4401      	add	r1, r0
 8001794:	6019      	str	r1, [r3, #0]
 8001796:	e7d7      	b.n	8001748 <_free_r+0x24>
 8001798:	d902      	bls.n	80017a0 <_free_r+0x7c>
 800179a:	230c      	movs	r3, #12
 800179c:	602b      	str	r3, [r5, #0]
 800179e:	e7d3      	b.n	8001748 <_free_r+0x24>
 80017a0:	6820      	ldr	r0, [r4, #0]
 80017a2:	1821      	adds	r1, r4, r0
 80017a4:	428a      	cmp	r2, r1
 80017a6:	bf04      	itt	eq
 80017a8:	6811      	ldreq	r1, [r2, #0]
 80017aa:	6852      	ldreq	r2, [r2, #4]
 80017ac:	6062      	str	r2, [r4, #4]
 80017ae:	bf04      	itt	eq
 80017b0:	1809      	addeq	r1, r1, r0
 80017b2:	6021      	streq	r1, [r4, #0]
 80017b4:	605c      	str	r4, [r3, #4]
 80017b6:	e7c7      	b.n	8001748 <_free_r+0x24>
 80017b8:	bd38      	pop	{r3, r4, r5, pc}
 80017ba:	bf00      	nop
 80017bc:	20000084 	.word	0x20000084

080017c0 <_malloc_r>:
 80017c0:	b570      	push	{r4, r5, r6, lr}
 80017c2:	1ccd      	adds	r5, r1, #3
 80017c4:	f025 0503 	bic.w	r5, r5, #3
 80017c8:	3508      	adds	r5, #8
 80017ca:	2d0c      	cmp	r5, #12
 80017cc:	bf38      	it	cc
 80017ce:	250c      	movcc	r5, #12
 80017d0:	2d00      	cmp	r5, #0
 80017d2:	4606      	mov	r6, r0
 80017d4:	db01      	blt.n	80017da <_malloc_r+0x1a>
 80017d6:	42a9      	cmp	r1, r5
 80017d8:	d903      	bls.n	80017e2 <_malloc_r+0x22>
 80017da:	230c      	movs	r3, #12
 80017dc:	6033      	str	r3, [r6, #0]
 80017de:	2000      	movs	r0, #0
 80017e0:	bd70      	pop	{r4, r5, r6, pc}
 80017e2:	f000 fbb9 	bl	8001f58 <__malloc_lock>
 80017e6:	4a21      	ldr	r2, [pc, #132]	; (800186c <_malloc_r+0xac>)
 80017e8:	6814      	ldr	r4, [r2, #0]
 80017ea:	4621      	mov	r1, r4
 80017ec:	b991      	cbnz	r1, 8001814 <_malloc_r+0x54>
 80017ee:	4c20      	ldr	r4, [pc, #128]	; (8001870 <_malloc_r+0xb0>)
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	b91b      	cbnz	r3, 80017fc <_malloc_r+0x3c>
 80017f4:	4630      	mov	r0, r6
 80017f6:	f000 fb05 	bl	8001e04 <_sbrk_r>
 80017fa:	6020      	str	r0, [r4, #0]
 80017fc:	4629      	mov	r1, r5
 80017fe:	4630      	mov	r0, r6
 8001800:	f000 fb00 	bl	8001e04 <_sbrk_r>
 8001804:	1c43      	adds	r3, r0, #1
 8001806:	d124      	bne.n	8001852 <_malloc_r+0x92>
 8001808:	230c      	movs	r3, #12
 800180a:	6033      	str	r3, [r6, #0]
 800180c:	4630      	mov	r0, r6
 800180e:	f000 fba4 	bl	8001f5a <__malloc_unlock>
 8001812:	e7e4      	b.n	80017de <_malloc_r+0x1e>
 8001814:	680b      	ldr	r3, [r1, #0]
 8001816:	1b5b      	subs	r3, r3, r5
 8001818:	d418      	bmi.n	800184c <_malloc_r+0x8c>
 800181a:	2b0b      	cmp	r3, #11
 800181c:	d90f      	bls.n	800183e <_malloc_r+0x7e>
 800181e:	600b      	str	r3, [r1, #0]
 8001820:	50cd      	str	r5, [r1, r3]
 8001822:	18cc      	adds	r4, r1, r3
 8001824:	4630      	mov	r0, r6
 8001826:	f000 fb98 	bl	8001f5a <__malloc_unlock>
 800182a:	f104 000b 	add.w	r0, r4, #11
 800182e:	1d23      	adds	r3, r4, #4
 8001830:	f020 0007 	bic.w	r0, r0, #7
 8001834:	1ac3      	subs	r3, r0, r3
 8001836:	d0d3      	beq.n	80017e0 <_malloc_r+0x20>
 8001838:	425a      	negs	r2, r3
 800183a:	50e2      	str	r2, [r4, r3]
 800183c:	e7d0      	b.n	80017e0 <_malloc_r+0x20>
 800183e:	428c      	cmp	r4, r1
 8001840:	684b      	ldr	r3, [r1, #4]
 8001842:	bf16      	itet	ne
 8001844:	6063      	strne	r3, [r4, #4]
 8001846:	6013      	streq	r3, [r2, #0]
 8001848:	460c      	movne	r4, r1
 800184a:	e7eb      	b.n	8001824 <_malloc_r+0x64>
 800184c:	460c      	mov	r4, r1
 800184e:	6849      	ldr	r1, [r1, #4]
 8001850:	e7cc      	b.n	80017ec <_malloc_r+0x2c>
 8001852:	1cc4      	adds	r4, r0, #3
 8001854:	f024 0403 	bic.w	r4, r4, #3
 8001858:	42a0      	cmp	r0, r4
 800185a:	d005      	beq.n	8001868 <_malloc_r+0xa8>
 800185c:	1a21      	subs	r1, r4, r0
 800185e:	4630      	mov	r0, r6
 8001860:	f000 fad0 	bl	8001e04 <_sbrk_r>
 8001864:	3001      	adds	r0, #1
 8001866:	d0cf      	beq.n	8001808 <_malloc_r+0x48>
 8001868:	6025      	str	r5, [r4, #0]
 800186a:	e7db      	b.n	8001824 <_malloc_r+0x64>
 800186c:	20000084 	.word	0x20000084
 8001870:	20000088 	.word	0x20000088

08001874 <__sfputc_r>:
 8001874:	6893      	ldr	r3, [r2, #8]
 8001876:	3b01      	subs	r3, #1
 8001878:	2b00      	cmp	r3, #0
 800187a:	b410      	push	{r4}
 800187c:	6093      	str	r3, [r2, #8]
 800187e:	da08      	bge.n	8001892 <__sfputc_r+0x1e>
 8001880:	6994      	ldr	r4, [r2, #24]
 8001882:	42a3      	cmp	r3, r4
 8001884:	db01      	blt.n	800188a <__sfputc_r+0x16>
 8001886:	290a      	cmp	r1, #10
 8001888:	d103      	bne.n	8001892 <__sfputc_r+0x1e>
 800188a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800188e:	f7ff bcab 	b.w	80011e8 <__swbuf_r>
 8001892:	6813      	ldr	r3, [r2, #0]
 8001894:	1c58      	adds	r0, r3, #1
 8001896:	6010      	str	r0, [r2, #0]
 8001898:	7019      	strb	r1, [r3, #0]
 800189a:	4608      	mov	r0, r1
 800189c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <__sfputs_r>:
 80018a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a4:	4606      	mov	r6, r0
 80018a6:	460f      	mov	r7, r1
 80018a8:	4614      	mov	r4, r2
 80018aa:	18d5      	adds	r5, r2, r3
 80018ac:	42ac      	cmp	r4, r5
 80018ae:	d101      	bne.n	80018b4 <__sfputs_r+0x12>
 80018b0:	2000      	movs	r0, #0
 80018b2:	e007      	b.n	80018c4 <__sfputs_r+0x22>
 80018b4:	463a      	mov	r2, r7
 80018b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018ba:	4630      	mov	r0, r6
 80018bc:	f7ff ffda 	bl	8001874 <__sfputc_r>
 80018c0:	1c43      	adds	r3, r0, #1
 80018c2:	d1f3      	bne.n	80018ac <__sfputs_r+0xa>
 80018c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080018c8 <_vfiprintf_r>:
 80018c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018cc:	460c      	mov	r4, r1
 80018ce:	b09d      	sub	sp, #116	; 0x74
 80018d0:	4617      	mov	r7, r2
 80018d2:	461d      	mov	r5, r3
 80018d4:	4606      	mov	r6, r0
 80018d6:	b118      	cbz	r0, 80018e0 <_vfiprintf_r+0x18>
 80018d8:	6983      	ldr	r3, [r0, #24]
 80018da:	b90b      	cbnz	r3, 80018e0 <_vfiprintf_r+0x18>
 80018dc:	f7ff fe34 	bl	8001548 <__sinit>
 80018e0:	4b7c      	ldr	r3, [pc, #496]	; (8001ad4 <_vfiprintf_r+0x20c>)
 80018e2:	429c      	cmp	r4, r3
 80018e4:	d158      	bne.n	8001998 <_vfiprintf_r+0xd0>
 80018e6:	6874      	ldr	r4, [r6, #4]
 80018e8:	89a3      	ldrh	r3, [r4, #12]
 80018ea:	0718      	lsls	r0, r3, #28
 80018ec:	d55e      	bpl.n	80019ac <_vfiprintf_r+0xe4>
 80018ee:	6923      	ldr	r3, [r4, #16]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d05b      	beq.n	80019ac <_vfiprintf_r+0xe4>
 80018f4:	2300      	movs	r3, #0
 80018f6:	9309      	str	r3, [sp, #36]	; 0x24
 80018f8:	2320      	movs	r3, #32
 80018fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80018fe:	2330      	movs	r3, #48	; 0x30
 8001900:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001904:	9503      	str	r5, [sp, #12]
 8001906:	f04f 0b01 	mov.w	fp, #1
 800190a:	46b8      	mov	r8, r7
 800190c:	4645      	mov	r5, r8
 800190e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001912:	b10b      	cbz	r3, 8001918 <_vfiprintf_r+0x50>
 8001914:	2b25      	cmp	r3, #37	; 0x25
 8001916:	d154      	bne.n	80019c2 <_vfiprintf_r+0xfa>
 8001918:	ebb8 0a07 	subs.w	sl, r8, r7
 800191c:	d00b      	beq.n	8001936 <_vfiprintf_r+0x6e>
 800191e:	4653      	mov	r3, sl
 8001920:	463a      	mov	r2, r7
 8001922:	4621      	mov	r1, r4
 8001924:	4630      	mov	r0, r6
 8001926:	f7ff ffbc 	bl	80018a2 <__sfputs_r>
 800192a:	3001      	adds	r0, #1
 800192c:	f000 80c2 	beq.w	8001ab4 <_vfiprintf_r+0x1ec>
 8001930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001932:	4453      	add	r3, sl
 8001934:	9309      	str	r3, [sp, #36]	; 0x24
 8001936:	f898 3000 	ldrb.w	r3, [r8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 80ba 	beq.w	8001ab4 <_vfiprintf_r+0x1ec>
 8001940:	2300      	movs	r3, #0
 8001942:	f04f 32ff 	mov.w	r2, #4294967295
 8001946:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800194a:	9304      	str	r3, [sp, #16]
 800194c:	9307      	str	r3, [sp, #28]
 800194e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001952:	931a      	str	r3, [sp, #104]	; 0x68
 8001954:	46a8      	mov	r8, r5
 8001956:	2205      	movs	r2, #5
 8001958:	f818 1b01 	ldrb.w	r1, [r8], #1
 800195c:	485e      	ldr	r0, [pc, #376]	; (8001ad8 <_vfiprintf_r+0x210>)
 800195e:	f7fe fc4f 	bl	8000200 <memchr>
 8001962:	9b04      	ldr	r3, [sp, #16]
 8001964:	bb78      	cbnz	r0, 80019c6 <_vfiprintf_r+0xfe>
 8001966:	06d9      	lsls	r1, r3, #27
 8001968:	bf44      	itt	mi
 800196a:	2220      	movmi	r2, #32
 800196c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001970:	071a      	lsls	r2, r3, #28
 8001972:	bf44      	itt	mi
 8001974:	222b      	movmi	r2, #43	; 0x2b
 8001976:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800197a:	782a      	ldrb	r2, [r5, #0]
 800197c:	2a2a      	cmp	r2, #42	; 0x2a
 800197e:	d02a      	beq.n	80019d6 <_vfiprintf_r+0x10e>
 8001980:	9a07      	ldr	r2, [sp, #28]
 8001982:	46a8      	mov	r8, r5
 8001984:	2000      	movs	r0, #0
 8001986:	250a      	movs	r5, #10
 8001988:	4641      	mov	r1, r8
 800198a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800198e:	3b30      	subs	r3, #48	; 0x30
 8001990:	2b09      	cmp	r3, #9
 8001992:	d969      	bls.n	8001a68 <_vfiprintf_r+0x1a0>
 8001994:	b360      	cbz	r0, 80019f0 <_vfiprintf_r+0x128>
 8001996:	e024      	b.n	80019e2 <_vfiprintf_r+0x11a>
 8001998:	4b50      	ldr	r3, [pc, #320]	; (8001adc <_vfiprintf_r+0x214>)
 800199a:	429c      	cmp	r4, r3
 800199c:	d101      	bne.n	80019a2 <_vfiprintf_r+0xda>
 800199e:	68b4      	ldr	r4, [r6, #8]
 80019a0:	e7a2      	b.n	80018e8 <_vfiprintf_r+0x20>
 80019a2:	4b4f      	ldr	r3, [pc, #316]	; (8001ae0 <_vfiprintf_r+0x218>)
 80019a4:	429c      	cmp	r4, r3
 80019a6:	bf08      	it	eq
 80019a8:	68f4      	ldreq	r4, [r6, #12]
 80019aa:	e79d      	b.n	80018e8 <_vfiprintf_r+0x20>
 80019ac:	4621      	mov	r1, r4
 80019ae:	4630      	mov	r0, r6
 80019b0:	f7ff fc6c 	bl	800128c <__swsetup_r>
 80019b4:	2800      	cmp	r0, #0
 80019b6:	d09d      	beq.n	80018f4 <_vfiprintf_r+0x2c>
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	b01d      	add	sp, #116	; 0x74
 80019be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019c2:	46a8      	mov	r8, r5
 80019c4:	e7a2      	b.n	800190c <_vfiprintf_r+0x44>
 80019c6:	4a44      	ldr	r2, [pc, #272]	; (8001ad8 <_vfiprintf_r+0x210>)
 80019c8:	1a80      	subs	r0, r0, r2
 80019ca:	fa0b f000 	lsl.w	r0, fp, r0
 80019ce:	4318      	orrs	r0, r3
 80019d0:	9004      	str	r0, [sp, #16]
 80019d2:	4645      	mov	r5, r8
 80019d4:	e7be      	b.n	8001954 <_vfiprintf_r+0x8c>
 80019d6:	9a03      	ldr	r2, [sp, #12]
 80019d8:	1d11      	adds	r1, r2, #4
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	9103      	str	r1, [sp, #12]
 80019de:	2a00      	cmp	r2, #0
 80019e0:	db01      	blt.n	80019e6 <_vfiprintf_r+0x11e>
 80019e2:	9207      	str	r2, [sp, #28]
 80019e4:	e004      	b.n	80019f0 <_vfiprintf_r+0x128>
 80019e6:	4252      	negs	r2, r2
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	9207      	str	r2, [sp, #28]
 80019ee:	9304      	str	r3, [sp, #16]
 80019f0:	f898 3000 	ldrb.w	r3, [r8]
 80019f4:	2b2e      	cmp	r3, #46	; 0x2e
 80019f6:	d10e      	bne.n	8001a16 <_vfiprintf_r+0x14e>
 80019f8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80019fc:	2b2a      	cmp	r3, #42	; 0x2a
 80019fe:	d138      	bne.n	8001a72 <_vfiprintf_r+0x1aa>
 8001a00:	9b03      	ldr	r3, [sp, #12]
 8001a02:	1d1a      	adds	r2, r3, #4
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	9203      	str	r2, [sp, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bfb8      	it	lt
 8001a0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001a10:	f108 0802 	add.w	r8, r8, #2
 8001a14:	9305      	str	r3, [sp, #20]
 8001a16:	4d33      	ldr	r5, [pc, #204]	; (8001ae4 <_vfiprintf_r+0x21c>)
 8001a18:	f898 1000 	ldrb.w	r1, [r8]
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	4628      	mov	r0, r5
 8001a20:	f7fe fbee 	bl	8000200 <memchr>
 8001a24:	b140      	cbz	r0, 8001a38 <_vfiprintf_r+0x170>
 8001a26:	2340      	movs	r3, #64	; 0x40
 8001a28:	1b40      	subs	r0, r0, r5
 8001a2a:	fa03 f000 	lsl.w	r0, r3, r0
 8001a2e:	9b04      	ldr	r3, [sp, #16]
 8001a30:	4303      	orrs	r3, r0
 8001a32:	f108 0801 	add.w	r8, r8, #1
 8001a36:	9304      	str	r3, [sp, #16]
 8001a38:	f898 1000 	ldrb.w	r1, [r8]
 8001a3c:	482a      	ldr	r0, [pc, #168]	; (8001ae8 <_vfiprintf_r+0x220>)
 8001a3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a42:	2206      	movs	r2, #6
 8001a44:	f108 0701 	add.w	r7, r8, #1
 8001a48:	f7fe fbda 	bl	8000200 <memchr>
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	d037      	beq.n	8001ac0 <_vfiprintf_r+0x1f8>
 8001a50:	4b26      	ldr	r3, [pc, #152]	; (8001aec <_vfiprintf_r+0x224>)
 8001a52:	bb1b      	cbnz	r3, 8001a9c <_vfiprintf_r+0x1d4>
 8001a54:	9b03      	ldr	r3, [sp, #12]
 8001a56:	3307      	adds	r3, #7
 8001a58:	f023 0307 	bic.w	r3, r3, #7
 8001a5c:	3308      	adds	r3, #8
 8001a5e:	9303      	str	r3, [sp, #12]
 8001a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a62:	444b      	add	r3, r9
 8001a64:	9309      	str	r3, [sp, #36]	; 0x24
 8001a66:	e750      	b.n	800190a <_vfiprintf_r+0x42>
 8001a68:	fb05 3202 	mla	r2, r5, r2, r3
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	4688      	mov	r8, r1
 8001a70:	e78a      	b.n	8001988 <_vfiprintf_r+0xc0>
 8001a72:	2300      	movs	r3, #0
 8001a74:	f108 0801 	add.w	r8, r8, #1
 8001a78:	9305      	str	r3, [sp, #20]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	250a      	movs	r5, #10
 8001a7e:	4640      	mov	r0, r8
 8001a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a84:	3a30      	subs	r2, #48	; 0x30
 8001a86:	2a09      	cmp	r2, #9
 8001a88:	d903      	bls.n	8001a92 <_vfiprintf_r+0x1ca>
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0c3      	beq.n	8001a16 <_vfiprintf_r+0x14e>
 8001a8e:	9105      	str	r1, [sp, #20]
 8001a90:	e7c1      	b.n	8001a16 <_vfiprintf_r+0x14e>
 8001a92:	fb05 2101 	mla	r1, r5, r1, r2
 8001a96:	2301      	movs	r3, #1
 8001a98:	4680      	mov	r8, r0
 8001a9a:	e7f0      	b.n	8001a7e <_vfiprintf_r+0x1b6>
 8001a9c:	ab03      	add	r3, sp, #12
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	4622      	mov	r2, r4
 8001aa2:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <_vfiprintf_r+0x228>)
 8001aa4:	a904      	add	r1, sp, #16
 8001aa6:	4630      	mov	r0, r6
 8001aa8:	f3af 8000 	nop.w
 8001aac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001ab0:	4681      	mov	r9, r0
 8001ab2:	d1d5      	bne.n	8001a60 <_vfiprintf_r+0x198>
 8001ab4:	89a3      	ldrh	r3, [r4, #12]
 8001ab6:	065b      	lsls	r3, r3, #25
 8001ab8:	f53f af7e 	bmi.w	80019b8 <_vfiprintf_r+0xf0>
 8001abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001abe:	e77d      	b.n	80019bc <_vfiprintf_r+0xf4>
 8001ac0:	ab03      	add	r3, sp, #12
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	4622      	mov	r2, r4
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <_vfiprintf_r+0x228>)
 8001ac8:	a904      	add	r1, sp, #16
 8001aca:	4630      	mov	r0, r6
 8001acc:	f000 f888 	bl	8001be0 <_printf_i>
 8001ad0:	e7ec      	b.n	8001aac <_vfiprintf_r+0x1e4>
 8001ad2:	bf00      	nop
 8001ad4:	0800204c 	.word	0x0800204c
 8001ad8:	0800208c 	.word	0x0800208c
 8001adc:	0800206c 	.word	0x0800206c
 8001ae0:	0800202c 	.word	0x0800202c
 8001ae4:	08002092 	.word	0x08002092
 8001ae8:	08002096 	.word	0x08002096
 8001aec:	00000000 	.word	0x00000000
 8001af0:	080018a3 	.word	0x080018a3

08001af4 <_printf_common>:
 8001af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001af8:	4691      	mov	r9, r2
 8001afa:	461f      	mov	r7, r3
 8001afc:	688a      	ldr	r2, [r1, #8]
 8001afe:	690b      	ldr	r3, [r1, #16]
 8001b00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001b04:	4293      	cmp	r3, r2
 8001b06:	bfb8      	it	lt
 8001b08:	4613      	movlt	r3, r2
 8001b0a:	f8c9 3000 	str.w	r3, [r9]
 8001b0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001b12:	4606      	mov	r6, r0
 8001b14:	460c      	mov	r4, r1
 8001b16:	b112      	cbz	r2, 8001b1e <_printf_common+0x2a>
 8001b18:	3301      	adds	r3, #1
 8001b1a:	f8c9 3000 	str.w	r3, [r9]
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	0699      	lsls	r1, r3, #26
 8001b22:	bf42      	ittt	mi
 8001b24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001b28:	3302      	addmi	r3, #2
 8001b2a:	f8c9 3000 	strmi.w	r3, [r9]
 8001b2e:	6825      	ldr	r5, [r4, #0]
 8001b30:	f015 0506 	ands.w	r5, r5, #6
 8001b34:	d107      	bne.n	8001b46 <_printf_common+0x52>
 8001b36:	f104 0a19 	add.w	sl, r4, #25
 8001b3a:	68e3      	ldr	r3, [r4, #12]
 8001b3c:	f8d9 2000 	ldr.w	r2, [r9]
 8001b40:	1a9b      	subs	r3, r3, r2
 8001b42:	42ab      	cmp	r3, r5
 8001b44:	dc28      	bgt.n	8001b98 <_printf_common+0xa4>
 8001b46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001b4a:	6822      	ldr	r2, [r4, #0]
 8001b4c:	3300      	adds	r3, #0
 8001b4e:	bf18      	it	ne
 8001b50:	2301      	movne	r3, #1
 8001b52:	0692      	lsls	r2, r2, #26
 8001b54:	d42d      	bmi.n	8001bb2 <_printf_common+0xbe>
 8001b56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b5a:	4639      	mov	r1, r7
 8001b5c:	4630      	mov	r0, r6
 8001b5e:	47c0      	blx	r8
 8001b60:	3001      	adds	r0, #1
 8001b62:	d020      	beq.n	8001ba6 <_printf_common+0xb2>
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	68e5      	ldr	r5, [r4, #12]
 8001b68:	f8d9 2000 	ldr.w	r2, [r9]
 8001b6c:	f003 0306 	and.w	r3, r3, #6
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	bf08      	it	eq
 8001b74:	1aad      	subeq	r5, r5, r2
 8001b76:	68a3      	ldr	r3, [r4, #8]
 8001b78:	6922      	ldr	r2, [r4, #16]
 8001b7a:	bf0c      	ite	eq
 8001b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b80:	2500      	movne	r5, #0
 8001b82:	4293      	cmp	r3, r2
 8001b84:	bfc4      	itt	gt
 8001b86:	1a9b      	subgt	r3, r3, r2
 8001b88:	18ed      	addgt	r5, r5, r3
 8001b8a:	f04f 0900 	mov.w	r9, #0
 8001b8e:	341a      	adds	r4, #26
 8001b90:	454d      	cmp	r5, r9
 8001b92:	d11a      	bne.n	8001bca <_printf_common+0xd6>
 8001b94:	2000      	movs	r0, #0
 8001b96:	e008      	b.n	8001baa <_printf_common+0xb6>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	4652      	mov	r2, sl
 8001b9c:	4639      	mov	r1, r7
 8001b9e:	4630      	mov	r0, r6
 8001ba0:	47c0      	blx	r8
 8001ba2:	3001      	adds	r0, #1
 8001ba4:	d103      	bne.n	8001bae <_printf_common+0xba>
 8001ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8001baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001bae:	3501      	adds	r5, #1
 8001bb0:	e7c3      	b.n	8001b3a <_printf_common+0x46>
 8001bb2:	18e1      	adds	r1, r4, r3
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	2030      	movs	r0, #48	; 0x30
 8001bb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001bbc:	4422      	add	r2, r4
 8001bbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001bc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	e7c5      	b.n	8001b56 <_printf_common+0x62>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	4622      	mov	r2, r4
 8001bce:	4639      	mov	r1, r7
 8001bd0:	4630      	mov	r0, r6
 8001bd2:	47c0      	blx	r8
 8001bd4:	3001      	adds	r0, #1
 8001bd6:	d0e6      	beq.n	8001ba6 <_printf_common+0xb2>
 8001bd8:	f109 0901 	add.w	r9, r9, #1
 8001bdc:	e7d8      	b.n	8001b90 <_printf_common+0x9c>
	...

08001be0 <_printf_i>:
 8001be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001be4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001be8:	460c      	mov	r4, r1
 8001bea:	7e09      	ldrb	r1, [r1, #24]
 8001bec:	b085      	sub	sp, #20
 8001bee:	296e      	cmp	r1, #110	; 0x6e
 8001bf0:	4617      	mov	r7, r2
 8001bf2:	4606      	mov	r6, r0
 8001bf4:	4698      	mov	r8, r3
 8001bf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001bf8:	f000 80b3 	beq.w	8001d62 <_printf_i+0x182>
 8001bfc:	d822      	bhi.n	8001c44 <_printf_i+0x64>
 8001bfe:	2963      	cmp	r1, #99	; 0x63
 8001c00:	d036      	beq.n	8001c70 <_printf_i+0x90>
 8001c02:	d80a      	bhi.n	8001c1a <_printf_i+0x3a>
 8001c04:	2900      	cmp	r1, #0
 8001c06:	f000 80b9 	beq.w	8001d7c <_printf_i+0x19c>
 8001c0a:	2958      	cmp	r1, #88	; 0x58
 8001c0c:	f000 8083 	beq.w	8001d16 <_printf_i+0x136>
 8001c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001c18:	e032      	b.n	8001c80 <_printf_i+0xa0>
 8001c1a:	2964      	cmp	r1, #100	; 0x64
 8001c1c:	d001      	beq.n	8001c22 <_printf_i+0x42>
 8001c1e:	2969      	cmp	r1, #105	; 0x69
 8001c20:	d1f6      	bne.n	8001c10 <_printf_i+0x30>
 8001c22:	6820      	ldr	r0, [r4, #0]
 8001c24:	6813      	ldr	r3, [r2, #0]
 8001c26:	0605      	lsls	r5, r0, #24
 8001c28:	f103 0104 	add.w	r1, r3, #4
 8001c2c:	d52a      	bpl.n	8001c84 <_printf_i+0xa4>
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6011      	str	r1, [r2, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	da03      	bge.n	8001c3e <_printf_i+0x5e>
 8001c36:	222d      	movs	r2, #45	; 0x2d
 8001c38:	425b      	negs	r3, r3
 8001c3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001c3e:	486f      	ldr	r0, [pc, #444]	; (8001dfc <_printf_i+0x21c>)
 8001c40:	220a      	movs	r2, #10
 8001c42:	e039      	b.n	8001cb8 <_printf_i+0xd8>
 8001c44:	2973      	cmp	r1, #115	; 0x73
 8001c46:	f000 809d 	beq.w	8001d84 <_printf_i+0x1a4>
 8001c4a:	d808      	bhi.n	8001c5e <_printf_i+0x7e>
 8001c4c:	296f      	cmp	r1, #111	; 0x6f
 8001c4e:	d020      	beq.n	8001c92 <_printf_i+0xb2>
 8001c50:	2970      	cmp	r1, #112	; 0x70
 8001c52:	d1dd      	bne.n	8001c10 <_printf_i+0x30>
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	f043 0320 	orr.w	r3, r3, #32
 8001c5a:	6023      	str	r3, [r4, #0]
 8001c5c:	e003      	b.n	8001c66 <_printf_i+0x86>
 8001c5e:	2975      	cmp	r1, #117	; 0x75
 8001c60:	d017      	beq.n	8001c92 <_printf_i+0xb2>
 8001c62:	2978      	cmp	r1, #120	; 0x78
 8001c64:	d1d4      	bne.n	8001c10 <_printf_i+0x30>
 8001c66:	2378      	movs	r3, #120	; 0x78
 8001c68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c6c:	4864      	ldr	r0, [pc, #400]	; (8001e00 <_printf_i+0x220>)
 8001c6e:	e055      	b.n	8001d1c <_printf_i+0x13c>
 8001c70:	6813      	ldr	r3, [r2, #0]
 8001c72:	1d19      	adds	r1, r3, #4
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6011      	str	r1, [r2, #0]
 8001c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c80:	2301      	movs	r3, #1
 8001c82:	e08c      	b.n	8001d9e <_printf_i+0x1be>
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6011      	str	r1, [r2, #0]
 8001c88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c8c:	bf18      	it	ne
 8001c8e:	b21b      	sxthne	r3, r3
 8001c90:	e7cf      	b.n	8001c32 <_printf_i+0x52>
 8001c92:	6813      	ldr	r3, [r2, #0]
 8001c94:	6825      	ldr	r5, [r4, #0]
 8001c96:	1d18      	adds	r0, r3, #4
 8001c98:	6010      	str	r0, [r2, #0]
 8001c9a:	0628      	lsls	r0, r5, #24
 8001c9c:	d501      	bpl.n	8001ca2 <_printf_i+0xc2>
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	e002      	b.n	8001ca8 <_printf_i+0xc8>
 8001ca2:	0668      	lsls	r0, r5, #25
 8001ca4:	d5fb      	bpl.n	8001c9e <_printf_i+0xbe>
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	4854      	ldr	r0, [pc, #336]	; (8001dfc <_printf_i+0x21c>)
 8001caa:	296f      	cmp	r1, #111	; 0x6f
 8001cac:	bf14      	ite	ne
 8001cae:	220a      	movne	r2, #10
 8001cb0:	2208      	moveq	r2, #8
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001cb8:	6865      	ldr	r5, [r4, #4]
 8001cba:	60a5      	str	r5, [r4, #8]
 8001cbc:	2d00      	cmp	r5, #0
 8001cbe:	f2c0 8095 	blt.w	8001dec <_printf_i+0x20c>
 8001cc2:	6821      	ldr	r1, [r4, #0]
 8001cc4:	f021 0104 	bic.w	r1, r1, #4
 8001cc8:	6021      	str	r1, [r4, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d13d      	bne.n	8001d4a <_printf_i+0x16a>
 8001cce:	2d00      	cmp	r5, #0
 8001cd0:	f040 808e 	bne.w	8001df0 <_printf_i+0x210>
 8001cd4:	4665      	mov	r5, ip
 8001cd6:	2a08      	cmp	r2, #8
 8001cd8:	d10b      	bne.n	8001cf2 <_printf_i+0x112>
 8001cda:	6823      	ldr	r3, [r4, #0]
 8001cdc:	07db      	lsls	r3, r3, #31
 8001cde:	d508      	bpl.n	8001cf2 <_printf_i+0x112>
 8001ce0:	6923      	ldr	r3, [r4, #16]
 8001ce2:	6862      	ldr	r2, [r4, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	bfde      	ittt	le
 8001ce8:	2330      	movle	r3, #48	; 0x30
 8001cea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001cee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001cf2:	ebac 0305 	sub.w	r3, ip, r5
 8001cf6:	6123      	str	r3, [r4, #16]
 8001cf8:	f8cd 8000 	str.w	r8, [sp]
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	aa03      	add	r2, sp, #12
 8001d00:	4621      	mov	r1, r4
 8001d02:	4630      	mov	r0, r6
 8001d04:	f7ff fef6 	bl	8001af4 <_printf_common>
 8001d08:	3001      	adds	r0, #1
 8001d0a:	d14d      	bne.n	8001da8 <_printf_i+0x1c8>
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	b005      	add	sp, #20
 8001d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d16:	4839      	ldr	r0, [pc, #228]	; (8001dfc <_printf_i+0x21c>)
 8001d18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001d1c:	6813      	ldr	r3, [r2, #0]
 8001d1e:	6821      	ldr	r1, [r4, #0]
 8001d20:	1d1d      	adds	r5, r3, #4
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6015      	str	r5, [r2, #0]
 8001d26:	060a      	lsls	r2, r1, #24
 8001d28:	d50b      	bpl.n	8001d42 <_printf_i+0x162>
 8001d2a:	07ca      	lsls	r2, r1, #31
 8001d2c:	bf44      	itt	mi
 8001d2e:	f041 0120 	orrmi.w	r1, r1, #32
 8001d32:	6021      	strmi	r1, [r4, #0]
 8001d34:	b91b      	cbnz	r3, 8001d3e <_printf_i+0x15e>
 8001d36:	6822      	ldr	r2, [r4, #0]
 8001d38:	f022 0220 	bic.w	r2, r2, #32
 8001d3c:	6022      	str	r2, [r4, #0]
 8001d3e:	2210      	movs	r2, #16
 8001d40:	e7b7      	b.n	8001cb2 <_printf_i+0xd2>
 8001d42:	064d      	lsls	r5, r1, #25
 8001d44:	bf48      	it	mi
 8001d46:	b29b      	uxthmi	r3, r3
 8001d48:	e7ef      	b.n	8001d2a <_printf_i+0x14a>
 8001d4a:	4665      	mov	r5, ip
 8001d4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d50:	fb02 3311 	mls	r3, r2, r1, r3
 8001d54:	5cc3      	ldrb	r3, [r0, r3]
 8001d56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	2900      	cmp	r1, #0
 8001d5e:	d1f5      	bne.n	8001d4c <_printf_i+0x16c>
 8001d60:	e7b9      	b.n	8001cd6 <_printf_i+0xf6>
 8001d62:	6813      	ldr	r3, [r2, #0]
 8001d64:	6825      	ldr	r5, [r4, #0]
 8001d66:	6961      	ldr	r1, [r4, #20]
 8001d68:	1d18      	adds	r0, r3, #4
 8001d6a:	6010      	str	r0, [r2, #0]
 8001d6c:	0628      	lsls	r0, r5, #24
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	d501      	bpl.n	8001d76 <_printf_i+0x196>
 8001d72:	6019      	str	r1, [r3, #0]
 8001d74:	e002      	b.n	8001d7c <_printf_i+0x19c>
 8001d76:	066a      	lsls	r2, r5, #25
 8001d78:	d5fb      	bpl.n	8001d72 <_printf_i+0x192>
 8001d7a:	8019      	strh	r1, [r3, #0]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	6123      	str	r3, [r4, #16]
 8001d80:	4665      	mov	r5, ip
 8001d82:	e7b9      	b.n	8001cf8 <_printf_i+0x118>
 8001d84:	6813      	ldr	r3, [r2, #0]
 8001d86:	1d19      	adds	r1, r3, #4
 8001d88:	6011      	str	r1, [r2, #0]
 8001d8a:	681d      	ldr	r5, [r3, #0]
 8001d8c:	6862      	ldr	r2, [r4, #4]
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4628      	mov	r0, r5
 8001d92:	f7fe fa35 	bl	8000200 <memchr>
 8001d96:	b108      	cbz	r0, 8001d9c <_printf_i+0x1bc>
 8001d98:	1b40      	subs	r0, r0, r5
 8001d9a:	6060      	str	r0, [r4, #4]
 8001d9c:	6863      	ldr	r3, [r4, #4]
 8001d9e:	6123      	str	r3, [r4, #16]
 8001da0:	2300      	movs	r3, #0
 8001da2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001da6:	e7a7      	b.n	8001cf8 <_printf_i+0x118>
 8001da8:	6923      	ldr	r3, [r4, #16]
 8001daa:	462a      	mov	r2, r5
 8001dac:	4639      	mov	r1, r7
 8001dae:	4630      	mov	r0, r6
 8001db0:	47c0      	blx	r8
 8001db2:	3001      	adds	r0, #1
 8001db4:	d0aa      	beq.n	8001d0c <_printf_i+0x12c>
 8001db6:	6823      	ldr	r3, [r4, #0]
 8001db8:	079b      	lsls	r3, r3, #30
 8001dba:	d413      	bmi.n	8001de4 <_printf_i+0x204>
 8001dbc:	68e0      	ldr	r0, [r4, #12]
 8001dbe:	9b03      	ldr	r3, [sp, #12]
 8001dc0:	4298      	cmp	r0, r3
 8001dc2:	bfb8      	it	lt
 8001dc4:	4618      	movlt	r0, r3
 8001dc6:	e7a3      	b.n	8001d10 <_printf_i+0x130>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	464a      	mov	r2, r9
 8001dcc:	4639      	mov	r1, r7
 8001dce:	4630      	mov	r0, r6
 8001dd0:	47c0      	blx	r8
 8001dd2:	3001      	adds	r0, #1
 8001dd4:	d09a      	beq.n	8001d0c <_printf_i+0x12c>
 8001dd6:	3501      	adds	r5, #1
 8001dd8:	68e3      	ldr	r3, [r4, #12]
 8001dda:	9a03      	ldr	r2, [sp, #12]
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	42ab      	cmp	r3, r5
 8001de0:	dcf2      	bgt.n	8001dc8 <_printf_i+0x1e8>
 8001de2:	e7eb      	b.n	8001dbc <_printf_i+0x1dc>
 8001de4:	2500      	movs	r5, #0
 8001de6:	f104 0919 	add.w	r9, r4, #25
 8001dea:	e7f5      	b.n	8001dd8 <_printf_i+0x1f8>
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1ac      	bne.n	8001d4a <_printf_i+0x16a>
 8001df0:	7803      	ldrb	r3, [r0, #0]
 8001df2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001df6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001dfa:	e76c      	b.n	8001cd6 <_printf_i+0xf6>
 8001dfc:	0800209d 	.word	0x0800209d
 8001e00:	080020ae 	.word	0x080020ae

08001e04 <_sbrk_r>:
 8001e04:	b538      	push	{r3, r4, r5, lr}
 8001e06:	4c06      	ldr	r4, [pc, #24]	; (8001e20 <_sbrk_r+0x1c>)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	4605      	mov	r5, r0
 8001e0c:	4608      	mov	r0, r1
 8001e0e:	6023      	str	r3, [r4, #0]
 8001e10:	f7fe fd32 	bl	8000878 <_sbrk>
 8001e14:	1c43      	adds	r3, r0, #1
 8001e16:	d102      	bne.n	8001e1e <_sbrk_r+0x1a>
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	b103      	cbz	r3, 8001e1e <_sbrk_r+0x1a>
 8001e1c:	602b      	str	r3, [r5, #0]
 8001e1e:	bd38      	pop	{r3, r4, r5, pc}
 8001e20:	2000008c 	.word	0x2000008c

08001e24 <__sread>:
 8001e24:	b510      	push	{r4, lr}
 8001e26:	460c      	mov	r4, r1
 8001e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e2c:	f000 f896 	bl	8001f5c <_read_r>
 8001e30:	2800      	cmp	r0, #0
 8001e32:	bfab      	itete	ge
 8001e34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001e36:	89a3      	ldrhlt	r3, [r4, #12]
 8001e38:	181b      	addge	r3, r3, r0
 8001e3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001e3e:	bfac      	ite	ge
 8001e40:	6563      	strge	r3, [r4, #84]	; 0x54
 8001e42:	81a3      	strhlt	r3, [r4, #12]
 8001e44:	bd10      	pop	{r4, pc}

08001e46 <__swrite>:
 8001e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e4a:	461f      	mov	r7, r3
 8001e4c:	898b      	ldrh	r3, [r1, #12]
 8001e4e:	05db      	lsls	r3, r3, #23
 8001e50:	4605      	mov	r5, r0
 8001e52:	460c      	mov	r4, r1
 8001e54:	4616      	mov	r6, r2
 8001e56:	d505      	bpl.n	8001e64 <__swrite+0x1e>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e60:	f000 f868 	bl	8001f34 <_lseek_r>
 8001e64:	89a3      	ldrh	r3, [r4, #12]
 8001e66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e6e:	81a3      	strh	r3, [r4, #12]
 8001e70:	4632      	mov	r2, r6
 8001e72:	463b      	mov	r3, r7
 8001e74:	4628      	mov	r0, r5
 8001e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e7a:	f000 b817 	b.w	8001eac <_write_r>

08001e7e <__sseek>:
 8001e7e:	b510      	push	{r4, lr}
 8001e80:	460c      	mov	r4, r1
 8001e82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e86:	f000 f855 	bl	8001f34 <_lseek_r>
 8001e8a:	1c43      	adds	r3, r0, #1
 8001e8c:	89a3      	ldrh	r3, [r4, #12]
 8001e8e:	bf15      	itete	ne
 8001e90:	6560      	strne	r0, [r4, #84]	; 0x54
 8001e92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001e96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001e9a:	81a3      	strheq	r3, [r4, #12]
 8001e9c:	bf18      	it	ne
 8001e9e:	81a3      	strhne	r3, [r4, #12]
 8001ea0:	bd10      	pop	{r4, pc}

08001ea2 <__sclose>:
 8001ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ea6:	f000 b813 	b.w	8001ed0 <_close_r>
	...

08001eac <_write_r>:
 8001eac:	b538      	push	{r3, r4, r5, lr}
 8001eae:	4c07      	ldr	r4, [pc, #28]	; (8001ecc <_write_r+0x20>)
 8001eb0:	4605      	mov	r5, r0
 8001eb2:	4608      	mov	r0, r1
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	6022      	str	r2, [r4, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f7fe fc8b 	bl	80007d6 <_write>
 8001ec0:	1c43      	adds	r3, r0, #1
 8001ec2:	d102      	bne.n	8001eca <_write_r+0x1e>
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	b103      	cbz	r3, 8001eca <_write_r+0x1e>
 8001ec8:	602b      	str	r3, [r5, #0]
 8001eca:	bd38      	pop	{r3, r4, r5, pc}
 8001ecc:	2000008c 	.word	0x2000008c

08001ed0 <_close_r>:
 8001ed0:	b538      	push	{r3, r4, r5, lr}
 8001ed2:	4c06      	ldr	r4, [pc, #24]	; (8001eec <_close_r+0x1c>)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	4605      	mov	r5, r0
 8001ed8:	4608      	mov	r0, r1
 8001eda:	6023      	str	r3, [r4, #0]
 8001edc:	f7fe fc97 	bl	800080e <_close>
 8001ee0:	1c43      	adds	r3, r0, #1
 8001ee2:	d102      	bne.n	8001eea <_close_r+0x1a>
 8001ee4:	6823      	ldr	r3, [r4, #0]
 8001ee6:	b103      	cbz	r3, 8001eea <_close_r+0x1a>
 8001ee8:	602b      	str	r3, [r5, #0]
 8001eea:	bd38      	pop	{r3, r4, r5, pc}
 8001eec:	2000008c 	.word	0x2000008c

08001ef0 <_fstat_r>:
 8001ef0:	b538      	push	{r3, r4, r5, lr}
 8001ef2:	4c07      	ldr	r4, [pc, #28]	; (8001f10 <_fstat_r+0x20>)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	4605      	mov	r5, r0
 8001ef8:	4608      	mov	r0, r1
 8001efa:	4611      	mov	r1, r2
 8001efc:	6023      	str	r3, [r4, #0]
 8001efe:	f7fe fc92 	bl	8000826 <_fstat>
 8001f02:	1c43      	adds	r3, r0, #1
 8001f04:	d102      	bne.n	8001f0c <_fstat_r+0x1c>
 8001f06:	6823      	ldr	r3, [r4, #0]
 8001f08:	b103      	cbz	r3, 8001f0c <_fstat_r+0x1c>
 8001f0a:	602b      	str	r3, [r5, #0]
 8001f0c:	bd38      	pop	{r3, r4, r5, pc}
 8001f0e:	bf00      	nop
 8001f10:	2000008c 	.word	0x2000008c

08001f14 <_isatty_r>:
 8001f14:	b538      	push	{r3, r4, r5, lr}
 8001f16:	4c06      	ldr	r4, [pc, #24]	; (8001f30 <_isatty_r+0x1c>)
 8001f18:	2300      	movs	r3, #0
 8001f1a:	4605      	mov	r5, r0
 8001f1c:	4608      	mov	r0, r1
 8001f1e:	6023      	str	r3, [r4, #0]
 8001f20:	f7fe fc91 	bl	8000846 <_isatty>
 8001f24:	1c43      	adds	r3, r0, #1
 8001f26:	d102      	bne.n	8001f2e <_isatty_r+0x1a>
 8001f28:	6823      	ldr	r3, [r4, #0]
 8001f2a:	b103      	cbz	r3, 8001f2e <_isatty_r+0x1a>
 8001f2c:	602b      	str	r3, [r5, #0]
 8001f2e:	bd38      	pop	{r3, r4, r5, pc}
 8001f30:	2000008c 	.word	0x2000008c

08001f34 <_lseek_r>:
 8001f34:	b538      	push	{r3, r4, r5, lr}
 8001f36:	4c07      	ldr	r4, [pc, #28]	; (8001f54 <_lseek_r+0x20>)
 8001f38:	4605      	mov	r5, r0
 8001f3a:	4608      	mov	r0, r1
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	2200      	movs	r2, #0
 8001f40:	6022      	str	r2, [r4, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	f7fe fc8a 	bl	800085c <_lseek>
 8001f48:	1c43      	adds	r3, r0, #1
 8001f4a:	d102      	bne.n	8001f52 <_lseek_r+0x1e>
 8001f4c:	6823      	ldr	r3, [r4, #0]
 8001f4e:	b103      	cbz	r3, 8001f52 <_lseek_r+0x1e>
 8001f50:	602b      	str	r3, [r5, #0]
 8001f52:	bd38      	pop	{r3, r4, r5, pc}
 8001f54:	2000008c 	.word	0x2000008c

08001f58 <__malloc_lock>:
 8001f58:	4770      	bx	lr

08001f5a <__malloc_unlock>:
 8001f5a:	4770      	bx	lr

08001f5c <_read_r>:
 8001f5c:	b538      	push	{r3, r4, r5, lr}
 8001f5e:	4c07      	ldr	r4, [pc, #28]	; (8001f7c <_read_r+0x20>)
 8001f60:	4605      	mov	r5, r0
 8001f62:	4608      	mov	r0, r1
 8001f64:	4611      	mov	r1, r2
 8001f66:	2200      	movs	r2, #0
 8001f68:	6022      	str	r2, [r4, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	f7fe fc16 	bl	800079c <_read>
 8001f70:	1c43      	adds	r3, r0, #1
 8001f72:	d102      	bne.n	8001f7a <_read_r+0x1e>
 8001f74:	6823      	ldr	r3, [r4, #0]
 8001f76:	b103      	cbz	r3, 8001f7a <_read_r+0x1e>
 8001f78:	602b      	str	r3, [r5, #0]
 8001f7a:	bd38      	pop	{r3, r4, r5, pc}
 8001f7c:	2000008c 	.word	0x2000008c

08001f80 <_init>:
 8001f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f82:	bf00      	nop
 8001f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f86:	bc08      	pop	{r3}
 8001f88:	469e      	mov	lr, r3
 8001f8a:	4770      	bx	lr

08001f8c <_fini>:
 8001f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f8e:	bf00      	nop
 8001f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f92:	bc08      	pop	{r3}
 8001f94:	469e      	mov	lr, r3
 8001f96:	4770      	bx	lr
