
STM32F407xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000154c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080016f4  080016f4  000116f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001714  08001714  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08001714  08001714  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001714  08001714  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001714  08001714  00011714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001718  08001718  00011718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  0800171c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  2000003c  08001758  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08001758  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000307a  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000072a  00000000  00000000  000230e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000208  00000000  00000000  00023810  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001d0  00000000  00000000  00023a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002e9b  00000000  00000000  00023be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001b5a  00000000  00000000  00026a83  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c96e  00000000  00000000  000285dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00034f4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000820  00000000  00000000  00034fc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000003c 	.word	0x2000003c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080016dc 	.word	0x080016dc

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000040 	.word	0x20000040
 80001e4:	080016dc 	.word	0x080016dc

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <main>:
//Note: data should be less than 32 bytes in one transaction (a.k.a less than 32 characters)
uint8_t Txdata[] = "Testing I2C Slave Tx successfulHIHIHIHIHIHIHIHIHIHIHIHI\n";
I2C_Handle_t  I2C_Handler; //global data for I2C ISR


int main() {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b08e      	sub	sp, #56	; 0x38
 80001fc:	af00      	add	r7, sp, #0



	//Define the handle structures
	GPIO_Handle_t GPIO_Button, I2C_GPIO;
	memset(&GPIO_Button, 0, sizeof(GPIO_Button));
 80001fe:	f107 031c 	add.w	r3, r7, #28
 8000202:	221c      	movs	r2, #28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f001 fa60 	bl	80016cc <memset>
	memset(&I2C_GPIO, 0, sizeof(GPIO_Button));
 800020c:	463b      	mov	r3, r7
 800020e:	221c      	movs	r2, #28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f001 fa5a 	bl	80016cc <memset>
	memset(&I2C_Handler, 0, sizeof(GPIO_Button));
 8000218:	221c      	movs	r2, #28
 800021a:	2100      	movs	r1, #0
 800021c:	4810      	ldr	r0, [pc, #64]	; (8000260 <main+0x68>)
 800021e:	f001 fa55 	bl	80016cc <memset>

	GPIO_ButtonInit(&GPIO_Button);
 8000222:	f107 031c 	add.w	r3, r7, #28
 8000226:	4618      	mov	r0, r3
 8000228:	f000 f8b6 	bl	8000398 <GPIO_ButtonInit>
	GPIO_I2CInit(&I2C_GPIO);
 800022c:	463b      	mov	r3, r7
 800022e:	4618      	mov	r0, r3
 8000230:	f000 f8d4 	bl	80003dc <GPIO_I2CInit>
	I2C_HandlerInit(&I2C_Handler);
 8000234:	480a      	ldr	r0, [pc, #40]	; (8000260 <main+0x68>)
 8000236:	f000 f8f9 	bl	800042c <I2C_HandlerInit>


	//Enable the NVIC table for I2C Event an Error Interrupt
	I2C_IRQITConfig(I2C1_EV_IRQ_NO, ENABLE);
 800023a:	2101      	movs	r1, #1
 800023c:	201f      	movs	r0, #31
 800023e:	f000 faed 	bl	800081c <I2C_IRQITConfig>
	I2C_IRQITConfig(I2C1_ER_IRQ_NO, ENABLE);
 8000242:	2101      	movs	r1, #1
 8000244:	2020      	movs	r0, #32
 8000246:	f000 fae9 	bl	800081c <I2C_IRQITConfig>

	//Enable the interrupt control
	I2C_InterruptCtrl(I2C1, ENABLE);
 800024a:	2101      	movs	r1, #1
 800024c:	4805      	ldr	r0, [pc, #20]	; (8000264 <main+0x6c>)
 800024e:	f000 fd6e 	bl	8000d2e <I2C_InterruptCtrl>

	//Enable the I2C Peripheral enable
	I2C_PeripheralEnable(I2C_Handler.pI2Cx, ENABLE);
 8000252:	4b03      	ldr	r3, [pc, #12]	; (8000260 <main+0x68>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2101      	movs	r1, #1
 8000258:	4618      	mov	r0, r3
 800025a:	f000 fa8f 	bl	800077c <I2C_PeripheralEnable>

	while(1);
 800025e:	e7fe      	b.n	800025e <main+0x66>
 8000260:	2000005c 	.word	0x2000005c
 8000264:	40005400 	.word	0x40005400

08000268 <I2C_ApplicationEventCallBack>:
	return EXIT_SUCCESS;
}

//Implement I2C Call back function to signal event completion
void I2C_ApplicationEventCallBack(I2C_Handle_t* pI2CHandler, uint8_t appEvt) {
 8000268:	b590      	push	{r4, r7, lr}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	460b      	mov	r3, r1
 8000272:	70fb      	strb	r3, [r7, #3]
	static uint8_t counter = 0;
	static uint8_t write_byte = 0;

	//If possible, try implementing different application
	//events such as Acknowledgement Error and such
	switch (appEvt) {
 8000274:	78fb      	ldrb	r3, [r7, #3]
 8000276:	3b02      	subs	r3, #2
 8000278:	2b09      	cmp	r3, #9
 800027a:	d86a      	bhi.n	8000352 <I2C_ApplicationEventCallBack+0xea>
 800027c:	a201      	add	r2, pc, #4	; (adr r2, 8000284 <I2C_ApplicationEventCallBack+0x1c>)
 800027e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000282:	bf00      	nop
 8000284:	08000349 	.word	0x08000349
 8000288:	08000353 	.word	0x08000353
 800028c:	08000317 	.word	0x08000317
 8000290:	08000353 	.word	0x08000353
 8000294:	08000353 	.word	0x08000353
 8000298:	08000353 	.word	0x08000353
 800029c:	08000353 	.word	0x08000353
 80002a0:	08000353 	.word	0x08000353
 80002a4:	080002c1 	.word	0x080002c1
 80002a8:	080002ad 	.word	0x080002ad

	//Slave receives command code from master
	case I2C_EVT_DATA_RCV:	commandCode = I2C_SlaveReceiveData(pI2CHandler->pI2Cx);
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 fa90 	bl	80007d6 <I2C_SlaveReceiveData>
 80002b6:	4603      	mov	r3, r0
 80002b8:	461a      	mov	r2, r3
 80002ba:	4b28      	ldr	r3, [pc, #160]	; (800035c <I2C_ApplicationEventCallBack+0xf4>)
 80002bc:	701a      	strb	r2, [r3, #0]
						  	break;
 80002be:	e048      	b.n	8000352 <I2C_ApplicationEventCallBack+0xea>

	//Master requests data from slave
	case I2C_EVT_DATA_REQ:	if (commandCode ==  COMMAND_REQUEST) {
 80002c0:	4b26      	ldr	r3, [pc, #152]	; (800035c <I2C_ApplicationEventCallBack+0xf4>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b51      	cmp	r3, #81	; 0x51
 80002c6:	d114      	bne.n	80002f2 <I2C_ApplicationEventCallBack+0x8a>
								I2C_SlaveSendData(I2C1, ((strlen((char*) Txdata)) >> (counter * 8)) & 0xFF);
 80002c8:	4825      	ldr	r0, [pc, #148]	; (8000360 <I2C_ApplicationEventCallBack+0xf8>)
 80002ca:	f7ff ff8d 	bl	80001e8 <strlen>
 80002ce:	4602      	mov	r2, r0
 80002d0:	4b24      	ldr	r3, [pc, #144]	; (8000364 <I2C_ApplicationEventCallBack+0xfc>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	00db      	lsls	r3, r3, #3
 80002d6:	fa22 f303 	lsr.w	r3, r2, r3
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	4619      	mov	r1, r3
 80002de:	4822      	ldr	r0, [pc, #136]	; (8000368 <I2C_ApplicationEventCallBack+0x100>)
 80002e0:	f000 fa6a 	bl	80007b8 <I2C_SlaveSendData>
								counter++;
 80002e4:	4b1f      	ldr	r3, [pc, #124]	; (8000364 <I2C_ApplicationEventCallBack+0xfc>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	3301      	adds	r3, #1
 80002ea:	b2da      	uxtb	r2, r3
 80002ec:	4b1d      	ldr	r3, [pc, #116]	; (8000364 <I2C_ApplicationEventCallBack+0xfc>)
 80002ee:	701a      	strb	r2, [r3, #0]
								I2C_SlaveSendData(I2C1, Txdata[write_byte++]);
							} else {
								//Possibly terminate the communication
								//or wait until master sends correct command
							}
							break;
 80002f0:	e02e      	b.n	8000350 <I2C_ApplicationEventCallBack+0xe8>
							} else if (commandCode == COMMAND_READ_DATA) {
 80002f2:	4b1a      	ldr	r3, [pc, #104]	; (800035c <I2C_ApplicationEventCallBack+0xf4>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b52      	cmp	r3, #82	; 0x52
 80002f8:	d12a      	bne.n	8000350 <I2C_ApplicationEventCallBack+0xe8>
								I2C_SlaveSendData(I2C1, Txdata[write_byte++]);
 80002fa:	4b1c      	ldr	r3, [pc, #112]	; (800036c <I2C_ApplicationEventCallBack+0x104>)
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	1c5a      	adds	r2, r3, #1
 8000300:	b2d1      	uxtb	r1, r2
 8000302:	4a1a      	ldr	r2, [pc, #104]	; (800036c <I2C_ApplicationEventCallBack+0x104>)
 8000304:	7011      	strb	r1, [r2, #0]
 8000306:	461a      	mov	r2, r3
 8000308:	4b15      	ldr	r3, [pc, #84]	; (8000360 <I2C_ApplicationEventCallBack+0xf8>)
 800030a:	5c9b      	ldrb	r3, [r3, r2]
 800030c:	4619      	mov	r1, r3
 800030e:	4816      	ldr	r0, [pc, #88]	; (8000368 <I2C_ApplicationEventCallBack+0x100>)
 8000310:	f000 fa52 	bl	80007b8 <I2C_SlaveSendData>
							break;
 8000314:	e01c      	b.n	8000350 <I2C_ApplicationEventCallBack+0xe8>
	//End I2C Slave Transmission mode
	//Invalidate the commandCode and the counter so that slave no
	//longer sends data bytes to master.
	case I2C_ERR_AF:		if (commandCode == COMMAND_REQUEST) {
 8000316:	4b11      	ldr	r3, [pc, #68]	; (800035c <I2C_ApplicationEventCallBack+0xf4>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	2b51      	cmp	r3, #81	; 0x51
 800031c:	d102      	bne.n	8000324 <I2C_ApplicationEventCallBack+0xbc>
								commandCode = 0xff;
 800031e:	4b0f      	ldr	r3, [pc, #60]	; (800035c <I2C_ApplicationEventCallBack+0xf4>)
 8000320:	22ff      	movs	r2, #255	; 0xff
 8000322:	701a      	strb	r2, [r3, #0]
							}

							counter = 0;
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <I2C_ApplicationEventCallBack+0xfc>)
 8000326:	2200      	movs	r2, #0
 8000328:	701a      	strb	r2, [r3, #0]
							if (write_byte >= strlen((char*) Txdata)) {
 800032a:	4b10      	ldr	r3, [pc, #64]	; (800036c <I2C_ApplicationEventCallBack+0x104>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	461c      	mov	r4, r3
 8000330:	480b      	ldr	r0, [pc, #44]	; (8000360 <I2C_ApplicationEventCallBack+0xf8>)
 8000332:	f7ff ff59 	bl	80001e8 <strlen>
 8000336:	4603      	mov	r3, r0
 8000338:	429c      	cmp	r4, r3
 800033a:	d305      	bcc.n	8000348 <I2C_ApplicationEventCallBack+0xe0>
								write_byte = 0;
 800033c:	4b0b      	ldr	r3, [pc, #44]	; (800036c <I2C_ApplicationEventCallBack+0x104>)
 800033e:	2200      	movs	r2, #0
 8000340:	701a      	strb	r2, [r3, #0]
								commandCode = 0xff;
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <I2C_ApplicationEventCallBack+0xf4>)
 8000344:	22ff      	movs	r2, #255	; 0xff
 8000346:	701a      	strb	r2, [r3, #0]
							}

	//End I2C Slave Reception mode
	//When the slave receives all the data
	case I2C_EVT_STOPF_CMPLT: counter = 0; break;
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <I2C_ApplicationEventCallBack+0xfc>)
 800034a:	2200      	movs	r2, #0
 800034c:	701a      	strb	r2, [r3, #0]
 800034e:	e000      	b.n	8000352 <I2C_ApplicationEventCallBack+0xea>
							break;
 8000350:	bf00      	nop

	}
}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	bd90      	pop	{r4, r7, pc}
 800035a:	bf00      	nop
 800035c:	20000058 	.word	0x20000058
 8000360:	20000000 	.word	0x20000000
 8000364:	20000059 	.word	0x20000059
 8000368:	40005400 	.word	0x40005400
 800036c:	2000005a 	.word	0x2000005a

08000370 <I2C1_EV_IRQHandler>:

//Interrupt Service Routine to handle I2C1 Event Interrupt
void I2C1_EV_IRQHandler(void) {
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C_Handler);
 8000374:	4802      	ldr	r0, [pc, #8]	; (8000380 <I2C1_EV_IRQHandler+0x10>)
 8000376:	f000 fa95 	bl	80008a4 <I2C_EV_IRQHandling>
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	2000005c 	.word	0x2000005c

08000384 <I2C1_ER_IRQHandler>:

//Interrupt Service Routine to handle I2C1 Error Interrupt
void I2C1_ER_IRQHandler(void) {
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C_Handler);
 8000388:	4802      	ldr	r0, [pc, #8]	; (8000394 <I2C1_ER_IRQHandler+0x10>)
 800038a:	f000 fbf3 	bl	8000b74 <I2C_ER_IRQHandling>
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	2000005c 	.word	0x2000005c

08000398 <GPIO_ButtonInit>:

void GPIO_ButtonInit(GPIO_Handle_t* GPIO_Button) {
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	GPIO_Button->pGPIOx = GPIOA;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4a0d      	ldr	r2, [pc, #52]	; (80003d8 <GPIO_ButtonInit+0x40>)
 80003a4:	601a      	str	r2, [r3, #0]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinMode = GPIO_INPUT_MODE;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2201      	movs	r2, #1
 80003b0:	605a      	str	r2, [r3, #4]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PU_PD;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2200      	movs	r2, #0
 80003b6:	611a      	str	r2, [r3, #16]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2202      	movs	r2, #2
 80003bc:	60da      	str	r2, [r3, #12]

	GPIO_DeInit(GPIO_Button->pGPIOx);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 f882 	bl	80014cc <GPIO_DeInit>
	GPIO_Init(GPIO_Button);
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f000 ff51 	bl	8001270 <GPIO_Init>
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40020000 	.word	0x40020000

080003dc <GPIO_I2CInit>:

void GPIO_I2CInit(GPIO_Handle_t* I2C_GPIO) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	I2C_GPIO->pGPIOx = GPIOB;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a10      	ldr	r2, [pc, #64]	; (8000428 <GPIO_I2CInit+0x4c>)
 80003e8:	601a      	str	r2, [r3, #0]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinMode = GPIO_ALT_FUNC_MODE;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2202      	movs	r2, #2
 80003ee:	609a      	str	r2, [r3, #8]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinAltFuncMode = AF4;
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	2204      	movs	r2, #4
 80003f4:	619a      	str	r2, [r3, #24]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinNumber = GPIO_PIN_6 | GPIO_PIN_7;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	22c0      	movs	r2, #192	; 0xc0
 80003fa:	605a      	str	r2, [r3, #4]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinOPType = GPIO_OPEN_DRAIN;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2201      	movs	r2, #1
 8000400:	615a      	str	r2, [r3, #20]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinPuPdCtrl = GPIO_PU;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2201      	movs	r2, #1
 8000406:	611a      	str	r2, [r3, #16]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinSpeed = GPIO_MEDIUM_SPEED;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	2201      	movs	r2, #1
 800040c:	60da      	str	r2, [r3, #12]

	GPIO_DeInit(I2C_GPIO->pGPIOx);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4618      	mov	r0, r3
 8000414:	f001 f85a 	bl	80014cc <GPIO_DeInit>
	GPIO_Init(I2C_GPIO);
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	f000 ff29 	bl	8001270 <GPIO_Init>
}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40020400 	.word	0x40020400

0800042c <I2C_HandlerInit>:

void I2C_HandlerInit(I2C_Handle_t* I2C_Handler) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	I2C_Handler->pI2Cx = I2C1;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a0d      	ldr	r2, [pc, #52]	; (800046c <I2C_HandlerInit+0x40>)
 8000438:	601a      	str	r2, [r3, #0]
	I2C_Handler->I2C_Config.ACKControl = I2C_ACK_EN;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2201      	movs	r2, #1
 800043e:	739a      	strb	r2, [r3, #14]
	I2C_Handler->I2C_Config.FMDutyCycle = I2C_FM_DUTY_2;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	2200      	movs	r2, #0
 8000444:	73da      	strb	r2, [r3, #15]
	I2C_Handler->I2C_Config.SCLSpeed = I2C_SCL_SPEED_SM;
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2200      	movs	r2, #0
 800044a:	731a      	strb	r2, [r3, #12]
	I2C_Handler->I2C_Config.DeviceAddress = SLAVE_ADDR;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	2268      	movs	r2, #104	; 0x68
 8000450:	735a      	strb	r2, [r3, #13]

	I2C_DeInit(I2C_Handler->pI2Cx);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4618      	mov	r0, r3
 8000458:	f000 f952 	bl	8000700 <I2C_DeInit>
	I2C_Init(I2C_Handler);
 800045c:	6878      	ldr	r0, [r7, #4]
 800045e:	f000 f87f 	bl	8000560 <I2C_Init>
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40005400 	.word	0x40005400

08000470 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000470:	480d      	ldr	r0, [pc, #52]	; (80004a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000472:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000474:	480d      	ldr	r0, [pc, #52]	; (80004ac <LoopForever+0x6>)
  ldr r1, =_edata
 8000476:	490e      	ldr	r1, [pc, #56]	; (80004b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000478:	4a0e      	ldr	r2, [pc, #56]	; (80004b4 <LoopForever+0xe>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800047c:	e002      	b.n	8000484 <LoopCopyDataInit>

0800047e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000482:	3304      	adds	r3, #4

08000484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000488:	d3f9      	bcc.n	800047e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800048a:	4a0b      	ldr	r2, [pc, #44]	; (80004b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800048c:	4c0b      	ldr	r4, [pc, #44]	; (80004bc <LoopForever+0x16>)
  movs r3, #0
 800048e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000490:	e001      	b.n	8000496 <LoopFillZerobss>

08000492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000494:	3204      	adds	r2, #4

08000496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000498:	d3fb      	bcc.n	8000492 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800049a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800049e:	f001 f8f1 	bl	8001684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004a2:	f7ff fea9 	bl	80001f8 <main>

080004a6 <LoopForever>:

LoopForever:
    b LoopForever
 80004a6:	e7fe      	b.n	80004a6 <LoopForever>
  ldr   r0, =_estack
 80004a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b0:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80004b4:	0800171c 	.word	0x0800171c
  ldr r2, =_sbss
 80004b8:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80004bc:	2000007c 	.word	0x2000007c

080004c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c0:	e7fe      	b.n	80004c0 <ADC_IRQHandler>
	...

080004c4 <I2C_PeriClkCtrl>:
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void I2C_PeriClkCtrl(I2C_Reg_t* pI2Cx, uint8_t EnOrDi) {
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	460b      	mov	r3, r1
 80004ce:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 80004d0:	78fb      	ldrb	r3, [r7, #3]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d01c      	beq.n	8000510 <I2C_PeriClkCtrl+0x4c>
		I2Cx_PCLK_EN(pI2Cx); //Go to I2Cx_PCLK_EN macro for more details
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a1e      	ldr	r2, [pc, #120]	; (8000554 <I2C_PeriClkCtrl+0x90>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d106      	bne.n	80004ec <I2C_PeriClkCtrl+0x28>
 80004de:	4b1e      	ldr	r3, [pc, #120]	; (8000558 <I2C_PeriClkCtrl+0x94>)
 80004e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004e2:	4a1d      	ldr	r2, [pc, #116]	; (8000558 <I2C_PeriClkCtrl+0x94>)
 80004e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004e8:	6413      	str	r3, [r2, #64]	; 0x40
	} else {
		I2Cx_PCLK_DI(pI2Cx); //Go to I2Cx_PCLK_DI macro for more details
	}
}
 80004ea:	e02d      	b.n	8000548 <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_EN(pI2Cx); //Go to I2Cx_PCLK_EN macro for more details
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a1b      	ldr	r2, [pc, #108]	; (800055c <I2C_PeriClkCtrl+0x98>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d106      	bne.n	8000502 <I2C_PeriClkCtrl+0x3e>
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <I2C_PeriClkCtrl+0x94>)
 80004f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004f8:	4a17      	ldr	r2, [pc, #92]	; (8000558 <I2C_PeriClkCtrl+0x94>)
 80004fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004fe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000500:	e022      	b.n	8000548 <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_EN(pI2Cx); //Go to I2Cx_PCLK_EN macro for more details
 8000502:	4b15      	ldr	r3, [pc, #84]	; (8000558 <I2C_PeriClkCtrl+0x94>)
 8000504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000506:	4a14      	ldr	r2, [pc, #80]	; (8000558 <I2C_PeriClkCtrl+0x94>)
 8000508:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800050c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800050e:	e01b      	b.n	8000548 <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_DI(pI2Cx); //Go to I2Cx_PCLK_DI macro for more details
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a10      	ldr	r2, [pc, #64]	; (8000554 <I2C_PeriClkCtrl+0x90>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d106      	bne.n	8000526 <I2C_PeriClkCtrl+0x62>
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <I2C_PeriClkCtrl+0x94>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051c:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <I2C_PeriClkCtrl+0x94>)
 800051e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000522:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000524:	e010      	b.n	8000548 <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_DI(pI2Cx); //Go to I2Cx_PCLK_DI macro for more details
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a0c      	ldr	r2, [pc, #48]	; (800055c <I2C_PeriClkCtrl+0x98>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d106      	bne.n	800053c <I2C_PeriClkCtrl+0x78>
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <I2C_PeriClkCtrl+0x94>)
 8000530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000532:	4a09      	ldr	r2, [pc, #36]	; (8000558 <I2C_PeriClkCtrl+0x94>)
 8000534:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000538:	6413      	str	r3, [r2, #64]	; 0x40
}
 800053a:	e005      	b.n	8000548 <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_DI(pI2Cx); //Go to I2Cx_PCLK_DI macro for more details
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <I2C_PeriClkCtrl+0x94>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	4a05      	ldr	r2, [pc, #20]	; (8000558 <I2C_PeriClkCtrl+0x94>)
 8000542:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000546:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40005400 	.word	0x40005400
 8000558:	40023800 	.word	0x40023800
 800055c:	40005800 	.word	0x40005800

08000560 <I2C_Init>:
 * 						  and port
 *
 * @return				- none
 * @note				- none
 */
void I2C_Init(I2C_Handle_t* pI2CHandler) {
 8000560:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000564:	b088      	sub	sp, #32
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]

	uint16_t ccr_value;
	uint32_t APB1ClkFreq;
	uint64_t temp;
	temp = 0;
 800056a:	f04f 0300 	mov.w	r3, #0
 800056e:	f04f 0400 	mov.w	r4, #0
 8000572:	e9c7 3404 	strd	r3, r4, [r7, #16]

	//Enable the peripheral clock
	I2C_PeriClkCtrl(pI2CHandler->pI2Cx, ENABLE);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2101      	movs	r1, #1
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff ffa1 	bl	80004c4 <I2C_PeriClkCtrl>
	//Clock stretching is enabled by default in slave mode. To disable it,
	//configure the I2C_CR1 register bit 7.

	//Select the peripheral clock frequency
	//The other bits are ignored and set to 0 by default
	APB1ClkFreq = getAPB1ClkFreq();
 8000582:	f000 fc09 	bl	8000d98 <getAPB1ClkFreq>
 8000586:	60f8      	str	r0, [r7, #12]
	pI2CHandler->pI2Cx->CR2 |= (APB1ClkFreq / 1000000U) & 0x3F;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	6859      	ldr	r1, [r3, #4]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	4a53      	ldr	r2, [pc, #332]	; (80006e0 <I2C_Init+0x180>)
 8000592:	fba2 2303 	umull	r2, r3, r2, r3
 8000596:	0c9b      	lsrs	r3, r3, #18
 8000598:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	430a      	orrs	r2, r1
 80005a2:	605a      	str	r2, [r3, #4]
	//I2C1->CR2 |= (APB1ClkFreq / 1000000U) & 0x3F;
	//You may have option to configure the addressing mode in the I2C_OAR1
	//register. However, we don't implement that as part of the configuration
	//option in I2C. If you so wish to do it, implement that yourself!!!
	pI2CHandler->pI2Cx->OAR1 |= (pI2CHandler->I2C_Config.DeviceAddress << 1) & 0xFF;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	6899      	ldr	r1, [r3, #8]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	7b5b      	ldrb	r3, [r3, #13]
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	430a      	orrs	r2, r1
 80005b8:	609a      	str	r2, [r3, #8]

	//SPECIAL NOTE: Bit 14 of I2C_OAR1 register should be on kept at 1
	//by the software. Reason: I don't know, figure it out if you can.
	pI2CHandler->pI2Cx->OAR1 |= (1 << 14U);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	689a      	ldr	r2, [r3, #8]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80005c8:	609a      	str	r2, [r3, #8]

	//Configure the SCL clock frequencies depending on the mode
	//standard mode/Fast mode and duty cycle bit
	temp |= pI2CHandler->I2C_Config.SCLSpeed << I2C_CCR_F_S;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7b1b      	ldrb	r3, [r3, #12]
 80005ce:	03db      	lsls	r3, r3, #15
 80005d0:	469b      	mov	fp, r3
 80005d2:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80005d6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80005da:	ea4b 0301 	orr.w	r3, fp, r1
 80005de:	ea4c 0402 	orr.w	r4, ip, r2
 80005e2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	temp |= pI2CHandler->I2C_Config.FMDutyCycle << I2C_CCR_DUTY;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	7bdb      	ldrb	r3, [r3, #15]
 80005ea:	039b      	lsls	r3, r3, #14
 80005ec:	469b      	mov	fp, r3
 80005ee:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80005f2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80005f6:	ea4b 0301 	orr.w	r3, fp, r1
 80005fa:	ea4c 0402 	orr.w	r4, ip, r2
 80005fe:	e9c7 3404 	strd	r3, r4, [r7, #16]

	//Given: T(High) + T(Low) = T(I2C_SCL_SPEED)
	//T_I2C_SCL_SPEED = (float) 1 / I2C_SCL_SPEED(pI2CHandler->I2C_Config.SCLSpeed);
	//T_APB1ClkFreq	= (float) 1 / APB1ClkFreq;
	if (pI2CHandler->pI2Cx->CCR & (1 << I2C_CCR_F_S)) { //Fast mode
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	69db      	ldr	r3, [r3, #28]
 8000608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800060c:	2b00      	cmp	r3, #0
 800060e:	d01e      	beq.n	800064e <I2C_Init+0xee>
		if (pI2CHandler->pI2Cx->CCR & (1 << I2C_CCR_DUTY)) { //To reach 400khz
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800061a:	2b00      	cmp	r3, #0
 800061c:	d00b      	beq.n	8000636 <I2C_Init+0xd6>
			/*	Calculation: T(High) = 9 * CCR * T(PCLK1)
			 *		   		 T(Low) = 16 * CCR * T(PCLK1)
			 *			     T(High) + T(Low) = 25 * CCR * T(PCLK1)
			 *			     CCR = (T(High) + T(Low)) / (25 * T(PCLK1))
			 */
			ccr_value = APB1ClkFreq / (25 * (I2C_SCL_SPEED(pI2CHandler->I2C_Config.SCLSpeed)));
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	7b1b      	ldrb	r3, [r3, #12]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d101      	bne.n	800062a <I2C_Init+0xca>
 8000626:	4b2f      	ldr	r3, [pc, #188]	; (80006e4 <I2C_Init+0x184>)
 8000628:	e000      	b.n	800062c <I2C_Init+0xcc>
 800062a:	4b2f      	ldr	r3, [pc, #188]	; (80006e8 <I2C_Init+0x188>)
 800062c:	68fa      	ldr	r2, [r7, #12]
 800062e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000632:	83fb      	strh	r3, [r7, #30]
 8000634:	e016      	b.n	8000664 <I2C_Init+0x104>
			/*	Calculation: T(High) = 1 * CCR * T(PCLK1)
			 *		   		 T(Low) = 2 * CCR * T(PCLK1)
			 *			     T(High) + T(Low) = 3 * CCR * T(PCLK1)
			 *			     CCR = (T(High) + T(Low)) / (3 * T(PCLK1))
			 */
			ccr_value = APB1ClkFreq / (3 * (I2C_SCL_SPEED(pI2CHandler->I2C_Config.SCLSpeed)));
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	7b1b      	ldrb	r3, [r3, #12]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d101      	bne.n	8000642 <I2C_Init+0xe2>
 800063e:	4b2b      	ldr	r3, [pc, #172]	; (80006ec <I2C_Init+0x18c>)
 8000640:	e000      	b.n	8000644 <I2C_Init+0xe4>
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <I2C_Init+0x190>)
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	fbb2 f3f3 	udiv	r3, r2, r3
 800064a:	83fb      	strh	r3, [r7, #30]
 800064c:	e00a      	b.n	8000664 <I2C_Init+0x104>
		/*	Calculation: T(High) = CCR * T(PCLK1)
		 *		   		 T(Low) =   CCR * T(PCLK1)
		 *			     T(High) + T(Low) = 2 * CCR * T(PCLK1)
		 *			     CCR = (T(High) + T(Low)) / (2 * T(PCLK1))
		 */
		ccr_value = APB1ClkFreq / (2 * (I2C_SCL_SPEED(pI2CHandler->I2C_Config.SCLSpeed)));
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7b1b      	ldrb	r3, [r3, #12]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d101      	bne.n	800065a <I2C_Init+0xfa>
 8000656:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <I2C_Init+0x194>)
 8000658:	e000      	b.n	800065c <I2C_Init+0xfc>
 800065a:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <I2C_Init+0x198>)
 800065c:	68fa      	ldr	r2, [r7, #12]
 800065e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000662:	83fb      	strh	r3, [r7, #30]
	}
	temp |= (ccr_value & 0xFFF);
 8000664:	8bfb      	ldrh	r3, [r7, #30]
 8000666:	f04f 0400 	mov.w	r4, #0
 800066a:	f640 71ff 	movw	r1, #4095	; 0xfff
 800066e:	f04f 0200 	mov.w	r2, #0
 8000672:	ea03 0b01 	and.w	fp, r3, r1
 8000676:	ea04 0c02 	and.w	ip, r4, r2
 800067a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800067e:	ea4b 0301 	orr.w	r3, fp, r1
 8000682:	ea4c 0402 	orr.w	r4, ip, r2
 8000686:	e9c7 3404 	strd	r3, r4, [r7, #16]
	pI2CHandler->pI2Cx->CCR = temp;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	693a      	ldr	r2, [r7, #16]
 8000690:	61da      	str	r2, [r3, #28]

	//Clear the TRISE reg
	pI2CHandler->pI2Cx->TRISE &= ~((int) 1);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	6a1a      	ldr	r2, [r3, #32]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f022 0201 	bic.w	r2, r2, #1
 80006a0:	621a      	str	r2, [r3, #32]

	//Configure the Rise Time (TRISE)
	temp = APB1ClkFreq * (I2C_T_RISE(pI2CHandler->I2C_Config.SCLSpeed)) / (10000000U);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	7b1b      	ldrb	r3, [r3, #12]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d101      	bne.n	80006ae <I2C_Init+0x14e>
 80006aa:	2303      	movs	r3, #3
 80006ac:	e000      	b.n	80006b0 <I2C_Init+0x150>
 80006ae:	230a      	movs	r3, #10
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	fb02 f303 	mul.w	r3, r2, r3
 80006b6:	4a11      	ldr	r2, [pc, #68]	; (80006fc <I2C_Init+0x19c>)
 80006b8:	fba2 2303 	umull	r2, r3, r2, r3
 80006bc:	0d9b      	lsrs	r3, r3, #22
 80006be:	f04f 0400 	mov.w	r4, #0
 80006c2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	pI2CHandler->pI2Cx->TRISE = (temp + 1) & 0x3F;
 80006c6:	693b      	ldr	r3, [r7, #16]
 80006c8:	1c5a      	adds	r2, r3, #1
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80006d2:	621a      	str	r2, [r3, #32]

}
 80006d4:	bf00      	nop
 80006d6:	3720      	adds	r7, #32
 80006d8:	46bd      	mov	sp, r7
 80006da:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80006de:	bf00      	nop
 80006e0:	431bde83 	.word	0x431bde83
 80006e4:	00989680 	.word	0x00989680
 80006e8:	002625a0 	.word	0x002625a0
 80006ec:	00124f80 	.word	0x00124f80
 80006f0:	000493e0 	.word	0x000493e0
 80006f4:	000c3500 	.word	0x000c3500
 80006f8:	00030d40 	.word	0x00030d40
 80006fc:	6b5fca6b 	.word	0x6b5fca6b

08000700 <I2C_DeInit>:
 * @param[in]			- Base address of the specific SPI peripherals (I2C_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- The implementation so far only covers only 3 I2C ports
 */
void I2C_DeInit(I2C_Reg_t* pI2Cx) {
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	if (pI2Cx == I2C1) {
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a19      	ldr	r2, [pc, #100]	; (8000770 <I2C_DeInit+0x70>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d10c      	bne.n	800072a <I2C_DeInit+0x2a>
		I2C1_PCLK_RST();
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <I2C_DeInit+0x74>)
 8000712:	6a1b      	ldr	r3, [r3, #32]
 8000714:	4a17      	ldr	r2, [pc, #92]	; (8000774 <I2C_DeInit+0x74>)
 8000716:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800071a:	6213      	str	r3, [r2, #32]
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <I2C_DeInit+0x74>)
 800071e:	6a1b      	ldr	r3, [r3, #32]
 8000720:	4a14      	ldr	r2, [pc, #80]	; (8000774 <I2C_DeInit+0x74>)
 8000722:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000726:	6213      	str	r3, [r2, #32]
	} else if (pI2Cx == I2C2) {
		I2C2_PCLK_RST();
	} else {
		I2C3_PCLK_RST();
	}
}
 8000728:	e01c      	b.n	8000764 <I2C_DeInit+0x64>
	} else if (pI2Cx == I2C2) {
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a12      	ldr	r2, [pc, #72]	; (8000778 <I2C_DeInit+0x78>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d10c      	bne.n	800074c <I2C_DeInit+0x4c>
		I2C2_PCLK_RST();
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <I2C_DeInit+0x74>)
 8000734:	6a1b      	ldr	r3, [r3, #32]
 8000736:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <I2C_DeInit+0x74>)
 8000738:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800073c:	6213      	str	r3, [r2, #32]
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <I2C_DeInit+0x74>)
 8000740:	6a1b      	ldr	r3, [r3, #32]
 8000742:	4a0c      	ldr	r2, [pc, #48]	; (8000774 <I2C_DeInit+0x74>)
 8000744:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000748:	6213      	str	r3, [r2, #32]
}
 800074a:	e00b      	b.n	8000764 <I2C_DeInit+0x64>
		I2C3_PCLK_RST();
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <I2C_DeInit+0x74>)
 800074e:	6a1b      	ldr	r3, [r3, #32]
 8000750:	4a08      	ldr	r2, [pc, #32]	; (8000774 <I2C_DeInit+0x74>)
 8000752:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000756:	6213      	str	r3, [r2, #32]
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <I2C_DeInit+0x74>)
 800075a:	6a1b      	ldr	r3, [r3, #32]
 800075c:	4a05      	ldr	r2, [pc, #20]	; (8000774 <I2C_DeInit+0x74>)
 800075e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000762:	6213      	str	r3, [r2, #32]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	40005400 	.word	0x40005400
 8000774:	40023800 	.word	0x40023800
 8000778:	40005800 	.word	0x40005800

0800077c <I2C_PeripheralEnable>:
 * @param[in]			= ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void I2C_PeripheralEnable(I2C_Reg_t* pI2Cx, uint8_t EnOrDi) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d00a      	beq.n	80007a4 <I2C_PeripheralEnable+0x28>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f043 0201 	orr.w	r2, r3, #1
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	601a      	str	r2, [r3, #0]

		//Enable the Acknowledge bit
		ctrlBitACK(pI2Cx, ENABLE);
 800079a:	2101      	movs	r1, #1
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f000 fbab 	bl	8000ef8 <ctrlBitACK>
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE); //clearing PE also clears ACK
	}
}
 80007a2:	e005      	b.n	80007b0 <I2C_PeripheralEnable+0x34>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE); //clearing PE also clears ACK
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f023 0201 	bic.w	r2, r3, #1
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	601a      	str	r2, [r3, #0]
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <I2C_SlaveSendData>:
 *
 * @return				- none
 * @note				- See the Transfer Sequence diagram for master recevier on page 850
 * 						  in MCU Reference Manual for more details
 */
void I2C_SlaveSendData(I2C_Reg_t* pI2Cx, uint8_t data) {
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
	//Write data to specific I2C peripheral data  register
	pI2Cx->DR = data;
 80007c4:	78fa      	ldrb	r2, [r7, #3]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	611a      	str	r2, [r3, #16]
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <I2C_SlaveReceiveData>:
 *
 * @return				- 1 byte unsigned integer
 * @note				- See the Transfer Sequence diagram for master recevier on page 850
 * 						  in MCU Reference Manual for more details
 */
uint8_t I2C_SlaveReceiveData(I2C_Reg_t* pI2Cx) {
 80007d6:	b480      	push	{r7}
 80007d8:	b083      	sub	sp, #12
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
	return (uint8_t) pI2Cx->DR;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	691b      	ldr	r3, [r3, #16]
 80007e2:	b2db      	uxtb	r3, r3
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <I2C_CheckStatusFlag>:
 * @param[in]			- the status flag
 *
 * @return				- none
 * @note				- none
 */
uint8_t I2C_CheckStatusFlag(__vo uint32_t* statusReg, uint16_t flag) {
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	807b      	strh	r3, [r7, #2]
	if ((*statusReg) & flag) {
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	887b      	ldrh	r3, [r7, #2]
 8000802:	4013      	ands	r3, r2
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <I2C_CheckStatusFlag+0x1c>
		return FLAG_SET;
 8000808:	2301      	movs	r3, #1
 800080a:	e000      	b.n	800080e <I2C_CheckStatusFlag+0x1e>
	}
	return FLAG_RESET;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <I2C_IRQITConfig>:
 * @param[in]			= ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- Refer to the Cortex M4 Generic User Guide the NVIC register table
 */
void I2C_IRQITConfig(uint8_t IRQNumber, uint8_t EnOrDi) {
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	460a      	mov	r2, r1
 8000826:	71fb      	strb	r3, [r7, #7]
 8000828:	4613      	mov	r3, r2
 800082a:	71bb      	strb	r3, [r7, #6]
	//In order to trigger the interrupt on the processor side,
	//configuration enable on the ISER of the NVIC is needed
	//Note: There are 7 different NVIC_ISER and NVIC_ICER register
	//at certain range
	uint32_t indx, remainder;
	indx = IRQNumber >> 5U; //Index to configure the correct NVIC_ISER
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	095b      	lsrs	r3, r3, #5
 8000830:	b2db      	uxtb	r3, r3
 8000832:	60fb      	str	r3, [r7, #12]
	if (indx >= 0U  && indx <= 7U) {
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	2b07      	cmp	r3, #7
 8000838:	d82b      	bhi.n	8000892 <I2C_IRQITConfig+0x76>
		remainder = IRQNumber & (~(~(int)0 << 5U)); //find the remainder
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	f003 031f 	and.w	r3, r3, #31
 8000840:	60bb      	str	r3, [r7, #8]
		if (EnOrDi) {
 8000842:	79bb      	ldrb	r3, [r7, #6]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d014      	beq.n	8000872 <I2C_IRQITConfig+0x56>
			NVIC_ISER(indx) |= 1 << remainder; //See NVIC_ISER(__INDEX__) declaration for more implementation details
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000850:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	2101      	movs	r1, #1
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	4619      	mov	r1, r3
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000868:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800086c:	430a      	orrs	r2, r1
 800086e:	601a      	str	r2, [r3, #0]
		} else {
			NVIC_ICER(indx) |= 1 << remainder; //See NVIC_ICER(__INDEX__) declaration for more implementation details
		}
	}
}
 8000870:	e00f      	b.n	8000892 <I2C_IRQITConfig+0x76>
			NVIC_ICER(indx) |= 1 << remainder; //See NVIC_ICER(__INDEX__) declaration for more implementation details
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	009a      	lsls	r2, r3, #2
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <I2C_IRQITConfig+0x84>)
 8000878:	4413      	add	r3, r2
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	2101      	movs	r1, #1
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	fa01 f303 	lsl.w	r3, r1, r3
 8000884:	4618      	mov	r0, r3
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	0099      	lsls	r1, r3, #2
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <I2C_IRQITConfig+0x84>)
 800088c:	440b      	add	r3, r1
 800088e:	4302      	orrs	r2, r0
 8000890:	601a      	str	r2, [r3, #0]
}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000e180 	.word	0xe000e180

080008a4 <I2C_EV_IRQHandling>:
 *
 * @return				- none
 * @note				- In this function, you need to cover the case for both master AND slave
 *						  since I2C is half-duplex in STM32
 */
void I2C_EV_IRQHandling(I2C_Handle_t* pI2CHandler) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	//Interrupt handling for both master and slave mode of a device

		uint32_t temp, temp1, temp2;
		I2C_Reg_t* pI2Cx = pI2CHandler->pI2Cx;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	617b      	str	r3, [r7, #20]

		//Check status of the event interrupt control bit
		temp1 = (pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN)) >> I2C_CR2_ITBUFEN;
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	0a9b      	lsrs	r3, r3, #10
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	613b      	str	r3, [r7, #16]
		temp2 = (pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN)) >> I2C_CR2_ITEVTEN;
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	0a5b      	lsrs	r3, r3, #9
 80008c4:	f003 0301 	and.w	r3, r3, #1
 80008c8:	60fb      	str	r3, [r7, #12]

/****************************************SB_EVENT_INTERRUPT*****************************************/
		temp  = pI2CHandler->pI2Cx->SR1 & ( 1 << I2C_SR1_SB);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	60bb      	str	r3, [r7, #8]
		//1. Handle For interrupt generated by SB event
		//	Note : SB flag is only applicable in Master mode
		//Handle for interrupt generated by SB event
		//Note: SB flag is only applicable in master mode
		//temp  = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_SB);
		if (temp && temp2) {
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d023      	beq.n	8000924 <I2C_EV_IRQHandling+0x80>
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d020      	beq.n	8000924 <I2C_EV_IRQHandling+0x80>
			if (I2C_CheckStatusFlag(&pI2Cx->SR2, I2C_FLAG_SR2_SML)) { //master mode
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	3318      	adds	r3, #24
 80008e6:	2101      	movs	r1, #1
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff81 	bl	80007f0 <I2C_CheckStatusFlag>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d017      	beq.n	8000924 <I2C_EV_IRQHandling+0x80>
				clearFlagSB(pI2Cx);
 80008f4:	6978      	ldr	r0, [r7, #20]
 80008f6:	f000 fad1 	bl	8000e9c <clearFlagSB>
				if (pI2CHandler->TxRxState == I2C_BUSY_IN_TX) { //busy in transmission
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	7f1b      	ldrb	r3, [r3, #28]
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d106      	bne.n	8000910 <I2C_EV_IRQHandling+0x6c>
					//clear the SB bit by reading the SR1 register
					//AND writing slave address to the DR with r/w bit low
					sendAddressToSlaveWrite(pI2Cx, pI2CHandler->DeviceAddr);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	7f9b      	ldrb	r3, [r3, #30]
 8000906:	4619      	mov	r1, r3
 8000908:	6978      	ldr	r0, [r7, #20]
 800090a:	f000 fb2d 	bl	8000f68 <sendAddressToSlaveWrite>
 800090e:	e009      	b.n	8000924 <I2C_EV_IRQHandling+0x80>

				} else if (pI2CHandler->TxRxState == I2C_BUSY_IN_RX) { //busy in reception
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	7f1b      	ldrb	r3, [r3, #28]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d105      	bne.n	8000924 <I2C_EV_IRQHandling+0x80>
					//Write slave address to DR with r/w bit high
					sendAddressToSlaveRead(pI2Cx, pI2CHandler->DeviceAddr);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	7f9b      	ldrb	r3, [r3, #30]
 800091c:	4619      	mov	r1, r3
 800091e:	6978      	ldr	r0, [r7, #20]
 8000920:	f000 fb33 	bl	8000f8a <sendAddressToSlaveRead>

/***************************************ADDR_EVENT_INTERRUPT******************************************/
		//Handle interrupt generated by ADDR event
		//Note: When device is in master mode, the Address is sent
		//		When device is in slave mode, address matched with its own address
		temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_ADDR);
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	3314      	adds	r3, #20
 8000928:	2102      	movs	r1, #2
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ff60 	bl	80007f0 <I2C_CheckStatusFlag>
 8000930:	4603      	mov	r3, r0
 8000932:	60bb      	str	r3, [r7, #8]
		//temp = (pI2Cx->SR1 & ( 1 << I2C_SR1_ADDR)) >> I2C_SR1_ADDR;
		if (temp && temp2) {
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d02b      	beq.n	8000992 <I2C_EV_IRQHandling+0xee>
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d028      	beq.n	8000992 <I2C_EV_IRQHandling+0xee>
			if (I2C_CheckStatusFlag(&pI2Cx->SR2, I2C_FLAG_SR2_SML)) { //master mode
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	3318      	adds	r3, #24
 8000944:	2101      	movs	r1, #1
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff ff52 	bl	80007f0 <I2C_CheckStatusFlag>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d01f      	beq.n	8000992 <I2C_EV_IRQHandling+0xee>
				if (pI2CHandler->TxRxState == I2C_BUSY_IN_TX) { //busy in transmission
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	7f1b      	ldrb	r3, [r3, #28]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d103      	bne.n	8000962 <I2C_EV_IRQHandling+0xbe>

					//As soon as the slave address is sent, the ADDR bit is set by HARDWARE
					//and an interrupt is generated if the ITEVFEN bit is set (which we don't cover in
					//this case). Clear this by reading SR1 register followed by reading SR2
					clearFlagADDR(pI2Cx);
 800095a:	6978      	ldr	r0, [r7, #20]
 800095c:	f000 faab 	bl	8000eb6 <clearFlagADDR>
 8000960:	e017      	b.n	8000992 <I2C_EV_IRQHandling+0xee>
				} else if (pI2CHandler->TxRxState == I2C_BUSY_IN_RX) {
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	7f1b      	ldrb	r3, [r3, #28]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d113      	bne.n	8000992 <I2C_EV_IRQHandling+0xee>

					//In the even of having 1 byte reception, the Acknowledge bit must be disabled
					//in the EV6 before clearing the ADDR flag
					if (pI2CHandler->RxSize == 1) {
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d104      	bne.n	800097c <I2C_EV_IRQHandling+0xd8>
						ctrlBitACK(pI2Cx, DISABLE); //Disable ACK bit before clearing ADDR
 8000972:	2100      	movs	r1, #0
 8000974:	6978      	ldr	r0, [r7, #20]
 8000976:	f000 fabf 	bl	8000ef8 <ctrlBitACK>
 800097a:	e007      	b.n	800098c <I2C_EV_IRQHandling+0xe8>
					} else if (pI2CHandler->RxSize == 2) {
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d103      	bne.n	800098c <I2C_EV_IRQHandling+0xe8>
						ctrlBitPOS(pI2Cx, ENABLE); //enable POS bit before clearing ADDR
 8000984:	2101      	movs	r1, #1
 8000986:	6978      	ldr	r0, [r7, #20]
 8000988:	f000 fad2 	bl	8000f30 <ctrlBitPOS>
					}

					//As soon as the slave address is sent, the ADDR bit is set by HARDWARE
					//and an interrupt is generated if the ITEVFEN bit is set (which we don't cover in
					//this case). Clear this by reading SR1 register followed by reading SR2
					clearFlagADDR(pI2Cx);
 800098c:	6978      	ldr	r0, [r7, #20]
 800098e:	f000 fa92 	bl	8000eb6 <clearFlagADDR>
			}
		}

/***************************************BTF_EVENT_INTERRUPT*******************************************/
		//Handle for interrupt generate by BTF (Byte Transfer Finished) event
		temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_BTF);
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	3314      	adds	r3, #20
 8000996:	2104      	movs	r1, #4
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ff29 	bl	80007f0 <I2C_CheckStatusFlag>
 800099e:	4603      	mov	r3, r0
 80009a0:	60bb      	str	r3, [r7, #8]
		if (temp && temp2) {
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d03f      	beq.n	8000a28 <I2C_EV_IRQHandling+0x184>
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d03c      	beq.n	8000a28 <I2C_EV_IRQHandling+0x184>
			if (I2C_CheckStatusFlag(&pI2Cx->SR2, I2C_FLAG_SR2_SML)) { //master mode
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	3318      	adds	r3, #24
 80009b2:	2101      	movs	r1, #1
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff ff1b 	bl	80007f0 <I2C_CheckStatusFlag>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d033      	beq.n	8000a28 <I2C_EV_IRQHandling+0x184>
				if (I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_TXE)) { //the end of transmission
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	3314      	adds	r3, #20
 80009c4:	2180      	movs	r1, #128	; 0x80
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ff12 	bl	80007f0 <I2C_CheckStatusFlag>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d012      	beq.n	80009f8 <I2C_EV_IRQHandling+0x154>

					if (pI2CHandler->TxLen == 0) {
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	691b      	ldr	r3, [r3, #16]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d126      	bne.n	8000a28 <I2C_EV_IRQHandling+0x184>
						//Generate the stop condition
						if (!pI2CHandler->RepeatedStart) {
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	7f5b      	ldrb	r3, [r3, #29]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d102      	bne.n	80009e8 <I2C_EV_IRQHandling+0x144>
							generateStopCondition(pI2Cx);
 80009e2:	6978      	ldr	r0, [r7, #20]
 80009e4:	f000 fa4a 	bl	8000e7c <generateStopCondition>
						}

						//Close the transmission
						closeMasterTx(pI2CHandler);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 fae1 	bl	8000fb0 <closeMasterTx>

						//Application Call back
						I2C_ApplicationEventCallBack(pI2CHandler, I2C_EVT_TX_CMPLT);
 80009ee:	2100      	movs	r1, #0
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff fc39 	bl	8000268 <I2C_ApplicationEventCallBack>
 80009f6:	e017      	b.n	8000a28 <I2C_EV_IRQHandling+0x184>
					}
				}
				else if (I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_RXNE)) { //the end of reception
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	3314      	adds	r3, #20
 80009fc:	2140      	movs	r1, #64	; 0x40
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fef6 	bl	80007f0 <I2C_CheckStatusFlag>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d00e      	beq.n	8000a28 <I2C_EV_IRQHandling+0x184>
					if (pI2CHandler->RxLen == 2) {
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	d10a      	bne.n	8000a28 <I2C_EV_IRQHandling+0x184>
						ctrlBitACK(pI2Cx, DISABLE);
 8000a12:	2100      	movs	r1, #0
 8000a14:	6978      	ldr	r0, [r7, #20]
 8000a16:	f000 fa6f 	bl	8000ef8 <ctrlBitACK>
						//Generate the stop condition
						if (!pI2CHandler->RepeatedStart) {
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	7f5b      	ldrb	r3, [r3, #29]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d102      	bne.n	8000a28 <I2C_EV_IRQHandling+0x184>
							generateStopCondition(pI2Cx);
 8000a22:	6978      	ldr	r0, [r7, #20]
 8000a24:	f000 fa2a 	bl	8000e7c <generateStopCondition>
		}
/***************************************STOPF_EVENT_INTERRUPT*****************************************/
		//Handle for interrupt generated by STOPF event
		//Note: Stop detection flag is applicable only in slave receiver mode.
		//		See datasheet for more details. For master, this flag will never be set
		temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_STOPF);
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	3314      	adds	r3, #20
 8000a2c:	2110      	movs	r1, #16
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fede 	bl	80007f0 <I2C_CheckStatusFlag>
 8000a34:	4603      	mov	r3, r0
 8000a36:	60bb      	str	r3, [r7, #8]
		if (temp && temp2) {
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d012      	beq.n	8000a64 <I2C_EV_IRQHandling+0x1c0>
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d00f      	beq.n	8000a64 <I2C_EV_IRQHandling+0x1c0>

			if (!I2C_CheckStatusFlag(&pI2Cx->SR2, I2C_FLAG_SR2_SML)) { //slave mode
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	3318      	adds	r3, #24
 8000a48:	2101      	movs	r1, #1
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fed0 	bl	80007f0 <I2C_CheckStatusFlag>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d106      	bne.n	8000a64 <I2C_EV_IRQHandling+0x1c0>
				clearFlagSTOPF(pI2Cx);
 8000a56:	6978      	ldr	r0, [r7, #20]
 8000a58:	f000 fa3d 	bl	8000ed6 <clearFlagSTOPF>
				I2C_ApplicationEventCallBack(pI2CHandler, I2C_EVT_STOPF_CMPLT);
 8000a5c:	2102      	movs	r1, #2
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff fc02 	bl	8000268 <I2C_ApplicationEventCallBack>
			}
		}

/***************************************TXE_EVENT_INTERRUPT*******************************************/
		//Handle for interrupt generated by TXE event
		temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_TXE);
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	3314      	adds	r3, #20
 8000a68:	2180      	movs	r1, #128	; 0x80
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fec0 	bl	80007f0 <I2C_CheckStatusFlag>
 8000a70:	4603      	mov	r3, r0
 8000a72:	60bb      	str	r3, [r7, #8]
		if ((temp && temp1) && temp2) {
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d030      	beq.n	8000adc <I2C_EV_IRQHandling+0x238>
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d02d      	beq.n	8000adc <I2C_EV_IRQHandling+0x238>
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d02a      	beq.n	8000adc <I2C_EV_IRQHandling+0x238>
			if (I2C_CheckStatusFlag(&pI2Cx->SR2, I2C_FLAG_SR2_SML)) { //Master mode
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	3318      	adds	r3, #24
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff feaf 	bl	80007f0 <I2C_CheckStatusFlag>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d014      	beq.n	8000ac2 <I2C_EV_IRQHandling+0x21e>
				//Handle for transmission
				if (pI2CHandler->TxLen > 0) {
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	691b      	ldr	r3, [r3, #16]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d01d      	beq.n	8000adc <I2C_EV_IRQHandling+0x238>
					pI2CHandler->pI2Cx->DR = *(pI2CHandler->pTxBuffer);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	781a      	ldrb	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	611a      	str	r2, [r3, #16]
					pI2CHandler->TxLen--;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	691b      	ldr	r3, [r3, #16]
 8000ab0:	1e5a      	subs	r2, r3, #1
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	611a      	str	r2, [r3, #16]
					pI2CHandler->pTxBuffer++;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	1c5a      	adds	r2, r3, #1
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	e00c      	b.n	8000adc <I2C_EV_IRQHandling+0x238>
				}
			} else { //Slave mode
				if (I2C_CheckStatusFlag(&pI2Cx->SR2, I2C_FLAG_SR2_TRA)) { //transmitter mode
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	3318      	adds	r3, #24
 8000ac6:	2104      	movs	r1, #4
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fe91 	bl	80007f0 <I2C_CheckStatusFlag>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d003      	beq.n	8000adc <I2C_EV_IRQHandling+0x238>
					I2C_ApplicationEventCallBack(pI2CHandler, I2C_EVT_DATA_REQ);
 8000ad4:	210a      	movs	r1, #10
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff fbc6 	bl	8000268 <I2C_ApplicationEventCallBack>
			}
		}
/***************************************RXNE_EVENT_INTERRUPT*******************************************/
		//Handle for interrupt generated by RXNE event
		//Handle for interrupt generated by TXE event
		temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_RXNE);
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	3314      	adds	r3, #20
 8000ae0:	2140      	movs	r1, #64	; 0x40
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fe84 	bl	80007f0 <I2C_CheckStatusFlag>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	60bb      	str	r3, [r7, #8]
		if ((temp && temp1) && temp2) {
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d03c      	beq.n	8000b6c <I2C_EV_IRQHandling+0x2c8>
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d039      	beq.n	8000b6c <I2C_EV_IRQHandling+0x2c8>
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d036      	beq.n	8000b6c <I2C_EV_IRQHandling+0x2c8>
			if (I2C_CheckStatusFlag(&pI2Cx->SR2, I2C_FLAG_SR2_SML)) { //Master mode
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	3318      	adds	r3, #24
 8000b02:	2101      	movs	r1, #1
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fe73 	bl	80007f0 <I2C_CheckStatusFlag>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d020      	beq.n	8000b52 <I2C_EV_IRQHandling+0x2ae>

				//Handle for multiple reception
				*(pI2CHandler->pRxBuffer) = pI2CHandler->pI2Cx->DR;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	691a      	ldr	r2, [r3, #16]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	701a      	strb	r2, [r3, #0]
				pI2CHandler->RxLen--;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	1e5a      	subs	r2, r3, #1
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	615a      	str	r2, [r3, #20]
				if (pI2CHandler->RxLen > 1) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d904      	bls.n	8000b3a <I2C_EV_IRQHandling+0x296>
					pI2CHandler->pRxBuffer++;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	609a      	str	r2, [r3, #8]
				//Note: To me sometime later when I got the job as firmware engineer.
				//C is procedural programming, so after decrementing the Rx len, you MUST
				//remember to check for 0 to close the communication ASAP to avoid going to
				//another ISR. If you do so, RXNE will be set to 0 and the condition for
				//this interrupt will never be fulfilled.
				if (pI2CHandler->RxLen == 0) {
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d114      	bne.n	8000b6c <I2C_EV_IRQHandling+0x2c8>
					//Close the transmission
					closeMasterRx(pI2CHandler);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f000 fa57 	bl	8000ff6 <closeMasterRx>

					//Application Call back
					I2C_ApplicationEventCallBack(pI2CHandler, I2C_EVT_RX_CMPLT);
 8000b48:	2101      	movs	r1, #1
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff fb8c 	bl	8000268 <I2C_ApplicationEventCallBack>
				if (!I2C_CheckStatusFlag(&pI2Cx->SR2, I2C_FLAG_SR2_TRA)) { //receiver mode
					I2C_ApplicationEventCallBack(pI2CHandler, I2C_EVT_DATA_RCV);
				}
			}
		}
}
 8000b50:	e00c      	b.n	8000b6c <I2C_EV_IRQHandling+0x2c8>
				if (!I2C_CheckStatusFlag(&pI2Cx->SR2, I2C_FLAG_SR2_TRA)) { //receiver mode
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	3318      	adds	r3, #24
 8000b56:	2104      	movs	r1, #4
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fe49 	bl	80007f0 <I2C_CheckStatusFlag>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d103      	bne.n	8000b6c <I2C_EV_IRQHandling+0x2c8>
					I2C_ApplicationEventCallBack(pI2CHandler, I2C_EVT_DATA_RCV);
 8000b64:	210b      	movs	r1, #11
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff fb7e 	bl	8000268 <I2C_ApplicationEventCallBack>
}
 8000b6c:	bf00      	nop
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <I2C_ER_IRQHandling>:
 * @param[in]			- I2C handle structure
 *
 * @return				- none
 * @note				- none
 */
void I2C_ER_IRQHandling(I2C_Handle_t* pI2CHandler) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	uint32_t temp, temp1;
	I2C_Reg_t* pI2Cx = pI2CHandler->pI2Cx;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	617b      	str	r3, [r7, #20]

	//Check the status of the error interrupt flag
	temp1 = pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b8a:	613b      	str	r3, [r7, #16]

/**************************************BERR_ERROR_INTERRUPT*********************************************/
	//This error occurs when the I2C interface detects an external Stop
	//Start condition during an address or a data transfer.
	temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_BERR);
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	3314      	adds	r3, #20
 8000b90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fe2b 	bl	80007f0 <I2C_CheckStatusFlag>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	60fb      	str	r3, [r7, #12]
	if (temp && temp1) {
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d01b      	beq.n	8000bdc <I2C_ER_IRQHandling+0x68>
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d018      	beq.n	8000bdc <I2C_ER_IRQHandling+0x68>

		//Clear the BERR flag
		pI2Cx->SR1 &= ~I2C_FLAG_SR1_BERR;
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	615a      	str	r2, [r3, #20]

		//In master mode: the lines are not released, and the state of the
		//current transmission is not affected. It is up to software to abort
		//or not the current transmission. In this implemenetation, I decided
		//to close the transmission instead.
		if (I2C_CheckStatusFlag(&pI2Cx->SR2, I2C_FLAG_SR2_SML)) { //Master mode
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	3318      	adds	r3, #24
 8000bba:	2101      	movs	r1, #1
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fe17 	bl	80007f0 <I2C_CheckStatusFlag>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d005      	beq.n	8000bd4 <I2C_ER_IRQHandling+0x60>

			//Close the master transmission
			generateStopCondition(pI2Cx);
 8000bc8:	6978      	ldr	r0, [r7, #20]
 8000bca:	f000 f957 	bl	8000e7c <generateStopCondition>
			closeMasterTx(pI2CHandler);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 f9ee 	bl	8000fb0 <closeMasterTx>

		//In slave mode, data are discarded and the lines are released by hardware
		else {
			//Implement later
		}
		I2C_ApplicationEventCallBack(pI2CHandler, I2C_ERR_BERR);
 8000bd4:	2103      	movs	r1, #3
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff fb46 	bl	8000268 <I2C_ApplicationEventCallBack>


/**************************************AF_ERROR_INTERRUPT*********************************************/
	//This error occurs when the interface detects a nonacknowledge bit.
	//Note: A transmitter that receives NACK should reset the transmission
	temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_AF);
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	3314      	adds	r3, #20
 8000be0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fe03 	bl	80007f0 <I2C_CheckStatusFlag>
 8000bea:	4603      	mov	r3, r0
 8000bec:	60fb      	str	r3, [r7, #12]
	if (temp && temp1) {
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d01b      	beq.n	8000c2c <I2C_ER_IRQHandling+0xb8>
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d018      	beq.n	8000c2c <I2C_ER_IRQHandling+0xb8>

		//Clear the AF flag
		pI2Cx->SR1 &= ~I2C_FLAG_SR1_AF;
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	615a      	str	r2, [r3, #20]

		//In master mode, a stop or repeated start condition must
		//be generated by software
		if (I2C_CheckStatusFlag(&pI2Cx->SR2, I2C_FLAG_SR2_SML)) { //Master mode
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	3318      	adds	r3, #24
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fdef 	bl	80007f0 <I2C_CheckStatusFlag>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d005      	beq.n	8000c24 <I2C_ER_IRQHandling+0xb0>

			//Close the master transmission by
			//generating the stop condition
			generateStopCondition(pI2Cx);
 8000c18:	6978      	ldr	r0, [r7, #20]
 8000c1a:	f000 f92f 	bl	8000e7c <generateStopCondition>
			closeMasterTx(pI2CHandler);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f000 f9c6 	bl	8000fb0 <closeMasterTx>
		}

		//In slave mode, data are discarded and the lines are released by hardware
		//Note: In slave transmitter mode, the AF bit signals the end of slave transmission,
		//		as master sends NACK which results in AF bit HIGH to close the communication
		I2C_ApplicationEventCallBack(pI2CHandler, I2C_ERR_AF);
 8000c24:	2104      	movs	r1, #4
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff fb1e 	bl	8000268 <I2C_ApplicationEventCallBack>
	}

/**************************************ARLO_ERROR_INTERRUPT*********************************************/
	//This error occurs when the I2C interface detects an arbitration lost condition
	//This happens all the more often in the multi-master communication
	temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_ARLO);
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3314      	adds	r3, #20
 8000c30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fddb 	bl	80007f0 <I2C_CheckStatusFlag>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	60fb      	str	r3, [r7, #12]
	if (temp && temp1) {
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d00c      	beq.n	8000c5e <I2C_ER_IRQHandling+0xea>
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d009      	beq.n	8000c5e <I2C_ER_IRQHandling+0xea>

		//Clear the ARLO flag
		pI2Cx->SR1 &= ~I2C_FLAG_SR1_ARLO;
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	615a      	str	r2, [r3, #20]

		//Note: When this flag is set, the I2C interface goes automatically back to
		//slave mode (the MSL bit is cleared). Whe the I2C loses the arbitration, it
		//is not able to acknowledge its slave address in the same transfer
		//Lines are released by hardware
		I2C_ApplicationEventCallBack(pI2CHandler, I2C_ERR_ARLO);
 8000c56:	2105      	movs	r1, #5
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff fb05 	bl	8000268 <I2C_ApplicationEventCallBack>
	//An overrun error can occur in slave mode while underrun can occur in
	//master mode. This is when clock stretching is disabled and the I2C interface
	//is receiving data. The interface has received a byte (RXNE = 1) and the data in
	//DR has not been read, before the next byte is received by the interface, which
	//results in the loss of the newly received byte.
	temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_OVR);
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3314      	adds	r3, #20
 8000c62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fdc2 	bl	80007f0 <I2C_CheckStatusFlag>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	60fb      	str	r3, [r7, #12]
	if (temp && temp1) {
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d00c      	beq.n	8000c90 <I2C_ER_IRQHandling+0x11c>
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d009      	beq.n	8000c90 <I2C_ER_IRQHandling+0x11c>

		//Clear the OVR flag
		pI2Cx->SR1 &= ~I2C_FLAG_SR1_OVR;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	615a      	str	r2, [r3, #20]

		//Report to the user application
		I2C_ApplicationEventCallBack(pI2CHandler, I2C_ERR_OVR);
 8000c88:	2106      	movs	r1, #6
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff faec 	bl	8000268 <I2C_ApplicationEventCallBack>
	}

/***************************************OVR_ERROR_INTERRUPT********************************************/
	//Handle for PECERR error interrupt. For more details, see STM32F407xx Reference Manual
	temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_PECERR);
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	3314      	adds	r3, #20
 8000c94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fda9 	bl	80007f0 <I2C_CheckStatusFlag>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	60fb      	str	r3, [r7, #12]
	if (temp && temp1) {
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d00c      	beq.n	8000cc2 <I2C_ER_IRQHandling+0x14e>
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d009      	beq.n	8000cc2 <I2C_ER_IRQHandling+0x14e>

		//Clear the PECERR flag
		pI2Cx->SR1 &= ~I2C_FLAG_SR1_PECERR;
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	615a      	str	r2, [r3, #20]

		//Report to the user application
		I2C_ApplicationEventCallBack(pI2CHandler, I2C_ERR_PECERR);
 8000cba:	2107      	movs	r1, #7
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff fad3 	bl	8000268 <I2C_ApplicationEventCallBack>
	}

/***************************************OVR_ERROR_INTERRUPT********************************************/
	//Handle for TIMEOUT error interrupt. For more details, see STM32F407xx Reference Manual
	temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_TIMEOUT);
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3314      	adds	r3, #20
 8000cc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fd90 	bl	80007f0 <I2C_CheckStatusFlag>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	60fb      	str	r3, [r7, #12]
	if (temp && temp1) {
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d00c      	beq.n	8000cf4 <I2C_ER_IRQHandling+0x180>
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d009      	beq.n	8000cf4 <I2C_ER_IRQHandling+0x180>

		//Clear the TIMEOUT flag
		pI2Cx->SR1 &= ~I2C_FLAG_SR1_TIMEOUT;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	615a      	str	r2, [r3, #20]

		//Report to the user application
		I2C_ApplicationEventCallBack(pI2CHandler, I2C_ERR_TIMEOUT);
 8000cec:	2108      	movs	r1, #8
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff faba 	bl	8000268 <I2C_ApplicationEventCallBack>
	}

/***************************************SMBALERT_ERROR_INTERRUPT***************************************/
	//Handle for SMBALERT error interrupt. For more details, see STM32F407xx Reference Manual
	temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_SMBALERT);
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	3314      	adds	r3, #20
 8000cf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fd77 	bl	80007f0 <I2C_CheckStatusFlag>
 8000d02:	4603      	mov	r3, r0
 8000d04:	60fb      	str	r3, [r7, #12]
	if (temp && temp1) {
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d00c      	beq.n	8000d26 <I2C_ER_IRQHandling+0x1b2>
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d009      	beq.n	8000d26 <I2C_ER_IRQHandling+0x1b2>

		//Clear the SMBALERT flag
		pI2Cx->SR1 &= ~I2C_FLAG_SR1_SMBALERT;
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	615a      	str	r2, [r3, #20]

		//Report to the user application
		I2C_ApplicationEventCallBack(pI2CHandler, I2C_ERR_SMBALERT);
 8000d1e:	2109      	movs	r1, #9
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff faa1 	bl	8000268 <I2C_ApplicationEventCallBack>
	}
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <I2C_InterruptCtrl>:
 * @param[in]			- Enable or Disable macros
 *
 * @return				- none
 * @note				- This function is ostensibly designed for slave mode only
 */
void I2C_InterruptCtrl(I2C_Reg_t* pI2Cx, uint8_t EnOrDi) {
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	460b      	mov	r3, r1
 8000d38:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 8000d3a:	78fb      	ldrb	r3, [r7, #3]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d012      	beq.n	8000d66 <I2C_InterruptCtrl+0x38>
		pI2Cx->CR2 |= 1 << I2C_CR2_ITBUFEN;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= 1 << I2C_CR2_ITEVTEN;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 |= 1 << I2C_CR2_ITERREN;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	605a      	str	r2, [r3, #4]
	} else {
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
	}
}
 8000d64:	e011      	b.n	8000d8a <I2C_InterruptCtrl+0x5c>
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	605a      	str	r2, [r3, #4]
		pI2Cx->CR2 &= ~(1 << I2C_CR2_ITERREN);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	605a      	str	r2, [r3, #4]
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <getAPB1ClkFreq>:
 * @param[in]			-
 *
 * @return				- none
 * @note				- See the Clock Tree diagram in STM32F4xx Reference Manual for details
 */
static uint32_t getAPB1ClkFreq() {
 8000d98:	b5b0      	push	{r4, r5, r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0

	uint16_t temp, AHB1Prescalar,  APB1Prescalar;
	uint16_t AHB1PreSclr[9] = {1, 2, 4, 6, 16, 64, 128, 256, 512};
 8000d9e:	4b2e      	ldr	r3, [pc, #184]	; (8000e58 <getAPB1ClkFreq+0xc0>)
 8000da0:	f107 040c 	add.w	r4, r7, #12
 8000da4:	461d      	mov	r5, r3
 8000da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000daa:	682b      	ldr	r3, [r5, #0]
 8000dac:	8023      	strh	r3, [r4, #0]
	uint16_t APB1PreSclr[5] = {1, 2, 4, 8, 16};
 8000dae:	4a2b      	ldr	r2, [pc, #172]	; (8000e5c <getAPB1ClkFreq+0xc4>)
 8000db0:	463b      	mov	r3, r7
 8000db2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000db4:	c303      	stmia	r3!, {r0, r1}
 8000db6:	801a      	strh	r2, [r3, #0]
	uint32_t sysClk;

	//Determine what system clock the MCU is running
	switch ((RCC->CFGR >> 2U) & 0x3) {
 8000db8:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <getAPB1ClkFreq+0xc8>)
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d004      	beq.n	8000dd0 <getAPB1ClkFreq+0x38>
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d305      	bcc.n	8000dd6 <getAPB1ClkFreq+0x3e>
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d006      	beq.n	8000ddc <getAPB1ClkFreq+0x44>
 8000dce:	e009      	b.n	8000de4 <getAPB1ClkFreq+0x4c>
	case RCC_HSE:	sysClk = HSE_CLK_FREQ; break; //8MHz
 8000dd0:	4b24      	ldr	r3, [pc, #144]	; (8000e64 <getAPB1ClkFreq+0xcc>)
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8000dd4:	e006      	b.n	8000de4 <getAPB1ClkFreq+0x4c>
	case RCC_HSI:	sysClk = HSI_CLK_FREQ; break; //16MHz
 8000dd6:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <getAPB1ClkFreq+0xd0>)
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000dda:	e003      	b.n	8000de4 <getAPB1ClkFreq+0x4c>
	case RCC_PLL:	sysClk = getPLLClkFreq(); break; //See this function implementation for details
 8000ddc:	f000 f846 	bl	8000e6c <getPLLClkFreq>
 8000de0:	6278      	str	r0, [r7, #36]	; 0x24
 8000de2:	bf00      	nop
	}

	//Determine the prescalar factor AHB1 is using
	temp = (RCC->CFGR >> 4U) & 0xF;
 8000de4:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <getAPB1ClkFreq+0xc8>)
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	091b      	lsrs	r3, r3, #4
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	f003 030f 	and.w	r3, r3, #15
 8000df0:	847b      	strh	r3, [r7, #34]	; 0x22
	AHB1Prescalar = (temp < 8U) ? AHB1PreSclr[0] : AHB1PreSclr[temp % 8 + 1];
 8000df2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000df4:	2b07      	cmp	r3, #7
 8000df6:	d801      	bhi.n	8000dfc <getAPB1ClkFreq+0x64>
 8000df8:	89bb      	ldrh	r3, [r7, #12]
 8000dfa:	e009      	b.n	8000e10 <getAPB1ClkFreq+0x78>
 8000dfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	3301      	adds	r3, #1
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e0a:	4413      	add	r3, r2
 8000e0c:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8000e10:	843b      	strh	r3, [r7, #32]

	//Determine the prescalar factor APB1 is using
	temp = (RCC->CFGR >> 10U) & 0x7;
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <getAPB1ClkFreq+0xc8>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	0a9b      	lsrs	r3, r3, #10
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	847b      	strh	r3, [r7, #34]	; 0x22
	APB1Prescalar = (temp < 4U) ? APB1PreSclr[0] : APB1PreSclr[temp % 8 + 1];
 8000e20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d801      	bhi.n	8000e2a <getAPB1ClkFreq+0x92>
 8000e26:	883b      	ldrh	r3, [r7, #0]
 8000e28:	e009      	b.n	8000e3e <getAPB1ClkFreq+0xa6>
 8000e2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	3301      	adds	r3, #1
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e38:	4413      	add	r3, r2
 8000e3a:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8000e3e:	83fb      	strh	r3, [r7, #30]

	//Return the APB1 clock freq
	return (sysClk / AHB1Prescalar) / APB1Prescalar;
 8000e40:	8c3b      	ldrh	r3, [r7, #32]
 8000e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e48:	8bfb      	ldrh	r3, [r7, #30]
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3728      	adds	r7, #40	; 0x28
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bdb0      	pop	{r4, r5, r7, pc}
 8000e56:	bf00      	nop
 8000e58:	080016f4 	.word	0x080016f4
 8000e5c:	08001708 	.word	0x08001708
 8000e60:	40023800 	.word	0x40023800
 8000e64:	007a1200 	.word	0x007a1200
 8000e68:	00f42400 	.word	0x00f42400

08000e6c <getPLLClkFreq>:
 * @param[in]			-
 *
 * @return				- none
 * @note				- See the Clock Tree diagram in STM32F4xx Reference Manual for details
 */
static uint32_t getPLLClkFreq() {
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

	//Implemented later
	return 1;
 8000e70:	2301      	movs	r3, #1
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <generateStopCondition>:
 * @param[in]			- Base address of the specific I2C peripherals (I2C_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- none
 */
static void generateStopCondition(I2C_Reg_t* pI2Cx) {
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= 1 << I2C_CR1_STOP;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	601a      	str	r2, [r3, #0]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <clearFlagSB>:
 * @param[in]			- Base address of the specific I2C peripherals (I2C_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- none
 */
static void clearFlagSB(I2C_Reg_t* pI2Cx) {
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	temp = pI2Cx->SR1;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	60fb      	str	r3, [r7, #12]
	(void) temp; //resolve unused variable warning
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <clearFlagADDR>:
 * @param[in]			- Base address of the specific I2C peripherals (I2C_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- none
 */
static void clearFlagADDR(I2C_Reg_t* pI2Cx) {
 8000eb6:	b480      	push	{r7}
 8000eb8:	b085      	sub	sp, #20
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	temp = pI2Cx->SR1;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	60fb      	str	r3, [r7, #12]
	temp = pI2Cx->SR2;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	60fb      	str	r3, [r7, #12]
	(void) temp; //resolve unused variable warning
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <clearFlagSTOPF>:
 * @param[in]			- base address of the I2C peripheral
 *
 * @return				- none
 * @note				- none
 */
static void clearFlagSTOPF(I2C_Reg_t* pI2Cx) {
 8000ed6:	b480      	push	{r7}
 8000ed8:	b085      	sub	sp, #20
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
	uint16_t temp;
	temp = pI2Cx->SR1; //reading the SR1 register
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	81fb      	strh	r3, [r7, #14]
	pI2Cx->CR1 |= 0x0000; //write to CR1 register
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	601a      	str	r2, [r3, #0]
	(void) temp;
}
 8000eec:	bf00      	nop
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <ctrlBitACK>:
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
static void ctrlBitACK(I2C_Reg_t* pI2Cx, uint8_t EnOrDi) {
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d006      	beq.n	8000f18 <ctrlBitACK+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	601a      	str	r2, [r3, #0]
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 8000f16:	e005      	b.n	8000f24 <ctrlBitACK+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	601a      	str	r2, [r3, #0]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <ctrlBitPOS>:
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
static void ctrlBitPOS(I2C_Reg_t* pI2Cx, uint8_t EnOrDi) {
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d006      	beq.n	8000f50 <ctrlBitPOS+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_POS);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	601a      	str	r2, [r3, #0]
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_POS);
	}
}
 8000f4e:	e005      	b.n	8000f5c <ctrlBitPOS+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_POS);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	601a      	str	r2, [r3, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <sendAddressToSlaveWrite>:
 * @param[in]			- slave address
 *
 * @return				- none
 * @note				- none
 */
static void sendAddressToSlaveWrite(I2C_Reg_t* pI2Cx, uint8_t pSlaveAddress) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	70fb      	strb	r3, [r7, #3]
	 //Write the slave address to DR register
	pI2Cx->DR = (pSlaveAddress << 1);
 8000f74:	78fb      	ldrb	r3, [r7, #3]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	461a      	mov	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	611a      	str	r2, [r3, #16]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <sendAddressToSlaveRead>:
 * @param[in]			- slave address
 *
 * @return				- none
 * @note				- none
 */
static void sendAddressToSlaveRead(I2C_Reg_t* pI2Cx, uint8_t pSlaveAddress) {
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	460b      	mov	r3, r1
 8000f94:	70fb      	strb	r3, [r7, #3]

	//Write the slave address to DR register
	//with the r/w bit high at the end
	pI2Cx->DR = (pSlaveAddress << 1) | 0x1;
 8000f96:	78fb      	ldrb	r3, [r7, #3]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	611a      	str	r2, [r3, #16]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <closeMasterTx>:
 * @param[in]			- I2C handle structure
 *
 * @return				- none
 * @note				- none
 */
static void closeMasterTx(I2C_Handle_t* pI2CHandler) {
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

	//Reset the interrupt buffer and event
	pI2CHandler->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fc6:	605a      	str	r2, [r3, #4]
	pI2CHandler->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	685a      	ldr	r2, [r3, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000fd6:	605a      	str	r2, [r3, #4]

	//Reset all the global fields
	pI2CHandler->TxRxState = I2C_READY;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	771a      	strb	r2, [r3, #28]
	pI2CHandler->pTxBuffer = NULL;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	605a      	str	r2, [r3, #4]
	pI2CHandler->TxLen = 0;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <closeMasterRx>:
 * @param[in]			- I2C handle structure
 *
 * @return				- none
 * @note				- none
 */
static void closeMasterRx(I2C_Handle_t* pI2CHandler) {
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]

	//Reset the interrupt buffer and event
	pI2CHandler->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800100c:	605a      	str	r2, [r3, #4]
	pI2CHandler->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800101c:	605a      	str	r2, [r3, #4]

	//Reset all the global fields
	pI2CHandler->TxRxState = I2C_READY;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	771a      	strb	r2, [r3, #28]
	pI2CHandler->pRxBuffer = NULL;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
	pI2CHandler->RxSize = 0;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
	pI2CHandler->RxLen = 0;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	615a      	str	r2, [r3, #20]



	//Re-enable the ACKking
	if (pI2CHandler->I2C_Config.ACKControl == ENABLE) {
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7b9b      	ldrb	r3, [r3, #14]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d105      	bne.n	800104a <closeMasterRx+0x54>
		ctrlBitACK(pI2CHandler->pI2Cx, ENABLE);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2101      	movs	r1, #1
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff57 	bl	8000ef8 <ctrlBitACK>
	}
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <GPIO_PeriClkCtrl>:
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void GPIO_PeriClkCtrl(GPIO_Reg_t* pGPIOx, uint8_t EnOrDi) {
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	460b      	mov	r3, r1
 800105e:	70fb      	strb	r3, [r7, #3]

	//Enable or disable the GPIO clock peripherals
	if (EnOrDi) {
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d074      	beq.n	8001150 <GPIO_PeriClkCtrl+0xfc>
		//Special note: switch cannot be used for pointer, only integer
		GPIO_PCLK_EN(pGPIOx);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a76      	ldr	r2, [pc, #472]	; (8001244 <GPIO_PeriClkCtrl+0x1f0>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d106      	bne.n	800107c <GPIO_PeriClkCtrl+0x28>
 800106e:	4b76      	ldr	r3, [pc, #472]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a75      	ldr	r2, [pc, #468]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
	} else {
		GPIO_PCLK_DI(pGPIOx);
	}
}
 800107a:	e0dd      	b.n	8001238 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a73      	ldr	r2, [pc, #460]	; (800124c <GPIO_PeriClkCtrl+0x1f8>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d106      	bne.n	8001092 <GPIO_PeriClkCtrl+0x3e>
 8001084:	4b70      	ldr	r3, [pc, #448]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	4a6f      	ldr	r2, [pc, #444]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 800108a:	f043 0302 	orr.w	r3, r3, #2
 800108e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001090:	e0d2      	b.n	8001238 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a6e      	ldr	r2, [pc, #440]	; (8001250 <GPIO_PeriClkCtrl+0x1fc>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d106      	bne.n	80010a8 <GPIO_PeriClkCtrl+0x54>
 800109a:	4b6b      	ldr	r3, [pc, #428]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a6a      	ldr	r2, [pc, #424]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80010a6:	e0c7      	b.n	8001238 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a6a      	ldr	r2, [pc, #424]	; (8001254 <GPIO_PeriClkCtrl+0x200>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d106      	bne.n	80010be <GPIO_PeriClkCtrl+0x6a>
 80010b0:	4b65      	ldr	r3, [pc, #404]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	4a64      	ldr	r2, [pc, #400]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80010bc:	e0bc      	b.n	8001238 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a65      	ldr	r2, [pc, #404]	; (8001258 <GPIO_PeriClkCtrl+0x204>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d106      	bne.n	80010d4 <GPIO_PeriClkCtrl+0x80>
 80010c6:	4b60      	ldr	r3, [pc, #384]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a5f      	ldr	r2, [pc, #380]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 80010cc:	f043 0310 	orr.w	r3, r3, #16
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80010d2:	e0b1      	b.n	8001238 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a61      	ldr	r2, [pc, #388]	; (800125c <GPIO_PeriClkCtrl+0x208>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d106      	bne.n	80010ea <GPIO_PeriClkCtrl+0x96>
 80010dc:	4b5a      	ldr	r3, [pc, #360]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	4a59      	ldr	r2, [pc, #356]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 80010e2:	f043 0320 	orr.w	r3, r3, #32
 80010e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80010e8:	e0a6      	b.n	8001238 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a5c      	ldr	r2, [pc, #368]	; (8001260 <GPIO_PeriClkCtrl+0x20c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d106      	bne.n	8001100 <GPIO_PeriClkCtrl+0xac>
 80010f2:	4b55      	ldr	r3, [pc, #340]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a54      	ldr	r2, [pc, #336]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 80010f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80010fe:	e09b      	b.n	8001238 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a58      	ldr	r2, [pc, #352]	; (8001264 <GPIO_PeriClkCtrl+0x210>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d106      	bne.n	8001116 <GPIO_PeriClkCtrl+0xc2>
 8001108:	4b4f      	ldr	r3, [pc, #316]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	4a4e      	ldr	r2, [pc, #312]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 800110e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001112:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001114:	e090      	b.n	8001238 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a53      	ldr	r2, [pc, #332]	; (8001268 <GPIO_PeriClkCtrl+0x214>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d106      	bne.n	800112c <GPIO_PeriClkCtrl+0xd8>
 800111e:	4b4a      	ldr	r3, [pc, #296]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a49      	ldr	r2, [pc, #292]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 8001124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
}
 800112a:	e085      	b.n	8001238 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a4f      	ldr	r2, [pc, #316]	; (800126c <GPIO_PeriClkCtrl+0x218>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d106      	bne.n	8001142 <GPIO_PeriClkCtrl+0xee>
 8001134:	4b44      	ldr	r3, [pc, #272]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	4a43      	ldr	r2, [pc, #268]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 800113a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001140:	e07a      	b.n	8001238 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8001142:	4b41      	ldr	r3, [pc, #260]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a40      	ldr	r2, [pc, #256]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 8001148:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800114e:	e073      	b.n	8001238 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a3c      	ldr	r2, [pc, #240]	; (8001244 <GPIO_PeriClkCtrl+0x1f0>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d106      	bne.n	8001166 <GPIO_PeriClkCtrl+0x112>
 8001158:	4b3b      	ldr	r3, [pc, #236]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	4a3a      	ldr	r2, [pc, #232]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 800115e:	f023 0301 	bic.w	r3, r3, #1
 8001162:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001164:	e068      	b.n	8001238 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a38      	ldr	r2, [pc, #224]	; (800124c <GPIO_PeriClkCtrl+0x1f8>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d106      	bne.n	800117c <GPIO_PeriClkCtrl+0x128>
 800116e:	4b36      	ldr	r3, [pc, #216]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a35      	ldr	r2, [pc, #212]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 8001174:	f023 0302 	bic.w	r3, r3, #2
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
}
 800117a:	e05d      	b.n	8001238 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a34      	ldr	r2, [pc, #208]	; (8001250 <GPIO_PeriClkCtrl+0x1fc>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d106      	bne.n	8001192 <GPIO_PeriClkCtrl+0x13e>
 8001184:	4b30      	ldr	r3, [pc, #192]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	4a2f      	ldr	r2, [pc, #188]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 800118a:	f023 0304 	bic.w	r3, r3, #4
 800118e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001190:	e052      	b.n	8001238 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a2f      	ldr	r2, [pc, #188]	; (8001254 <GPIO_PeriClkCtrl+0x200>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d106      	bne.n	80011a8 <GPIO_PeriClkCtrl+0x154>
 800119a:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a2a      	ldr	r2, [pc, #168]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 80011a0:	f023 0308 	bic.w	r3, r3, #8
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011a6:	e047      	b.n	8001238 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a2b      	ldr	r2, [pc, #172]	; (8001258 <GPIO_PeriClkCtrl+0x204>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d106      	bne.n	80011be <GPIO_PeriClkCtrl+0x16a>
 80011b0:	4b25      	ldr	r3, [pc, #148]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	4a24      	ldr	r2, [pc, #144]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 80011b6:	f023 0310 	bic.w	r3, r3, #16
 80011ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011bc:	e03c      	b.n	8001238 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a26      	ldr	r2, [pc, #152]	; (800125c <GPIO_PeriClkCtrl+0x208>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d106      	bne.n	80011d4 <GPIO_PeriClkCtrl+0x180>
 80011c6:	4b20      	ldr	r3, [pc, #128]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a1f      	ldr	r2, [pc, #124]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 80011cc:	f023 0320 	bic.w	r3, r3, #32
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011d2:	e031      	b.n	8001238 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a22      	ldr	r2, [pc, #136]	; (8001260 <GPIO_PeriClkCtrl+0x20c>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d106      	bne.n	80011ea <GPIO_PeriClkCtrl+0x196>
 80011dc:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	4a19      	ldr	r2, [pc, #100]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 80011e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011e8:	e026      	b.n	8001238 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a1d      	ldr	r2, [pc, #116]	; (8001264 <GPIO_PeriClkCtrl+0x210>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d106      	bne.n	8001200 <GPIO_PeriClkCtrl+0x1ac>
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a14      	ldr	r2, [pc, #80]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 80011f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011fe:	e01b      	b.n	8001238 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a19      	ldr	r2, [pc, #100]	; (8001268 <GPIO_PeriClkCtrl+0x214>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d106      	bne.n	8001216 <GPIO_PeriClkCtrl+0x1c2>
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	4a0e      	ldr	r2, [pc, #56]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 800120e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001212:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001214:	e010      	b.n	8001238 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a14      	ldr	r2, [pc, #80]	; (800126c <GPIO_PeriClkCtrl+0x218>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d106      	bne.n	800122c <GPIO_PeriClkCtrl+0x1d8>
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a09      	ldr	r2, [pc, #36]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 8001224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
}
 800122a:	e005      	b.n	8001238 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	4a05      	ldr	r2, [pc, #20]	; (8001248 <GPIO_PeriClkCtrl+0x1f4>)
 8001232:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001236:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	40020000 	.word	0x40020000
 8001248:	40023800 	.word	0x40023800
 800124c:	40020400 	.word	0x40020400
 8001250:	40020800 	.word	0x40020800
 8001254:	40020c00 	.word	0x40020c00
 8001258:	40020100 	.word	0x40020100
 800125c:	40021400 	.word	0x40021400
 8001260:	40021800 	.word	0x40021800
 8001264:	40021c00 	.word	0x40021c00
 8001268:	40022000 	.word	0x40022000
 800126c:	40022400 	.word	0x40022400

08001270 <GPIO_Init>:
 * @param[in]			-
 *
 * @return				- none
 * @note				- none
 */
void GPIO_Init(GPIO_Handle_t* pGPIOHandler) {
 8001270:	b5b0      	push	{r4, r5, r7, lr}
 8001272:	b08a      	sub	sp, #40	; 0x28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

	//uint32_t temp;
	GPIO_Reg_t* GPIOx = pGPIOHandler->pGPIOx;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	623b      	str	r3, [r7, #32]
	GPIO_PinConfig_t GPIOx_PinConf = pGPIOHandler->GPIOx_PinConfig;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f107 0408 	add.w	r4, r7, #8
 8001284:	1d1d      	adds	r5, r3, #4
 8001286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800128a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800128e:	e884 0003 	stmia.w	r4, {r0, r1}

	//Enable the GPIO Clock
	GPIO_PeriClkCtrl(GPIOx, ENABLE);
 8001292:	2101      	movs	r1, #1
 8001294:	6a38      	ldr	r0, [r7, #32]
 8001296:	f7ff fedd 	bl	8001054 <GPIO_PeriClkCtrl>

	/*Note: before setting the bits: make sure those registers are clear */
	//Clearing the registers
	//Setting the bits register
	for (uint16_t i = 0U; i < GPIO_PIN_NUMBER; i++) {
 800129a:	2300      	movs	r3, #0
 800129c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800129e:	e0f7      	b.n	8001490 <GPIO_Init+0x220>

		//Check if the ith bit is set
		if (GPIOx_PinConf.GPIO_PinNumber & (1 << i)) {
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80012a4:	2101      	movs	r1, #1
 80012a6:	fa01 f202 	lsl.w	r2, r1, r2
 80012aa:	4013      	ands	r3, r2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 80ec 	beq.w	800148a <GPIO_Init+0x21a>

			//Handle the GPIO pin alternate function mode and GPIO output mode
			if (GPIOx_PinConf.GPIO_PinMode == GPIO_ALT_FUNC_MODE || GPIOx_PinConf.GPIO_PinMode == GPIO_OUTPUT_MODE) {
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d002      	beq.n	80012be <GPIO_Init+0x4e>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d12c      	bne.n	8001318 <GPIO_Init+0xa8>
				if (i < (GPIO_PIN_NUMBER / 2)) {
 80012be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012c0:	2b07      	cmp	r3, #7
 80012c2:	d80a      	bhi.n	80012da <GPIO_Init+0x6a>
					GPIOx->AFR[0] |= (GPIOx_PinConf.GPIO_PinAltFuncMode << i * 4U);
 80012c4:	6a3b      	ldr	r3, [r7, #32]
 80012c6:	6a1a      	ldr	r2, [r3, #32]
 80012c8:	69f9      	ldr	r1, [r7, #28]
 80012ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	431a      	orrs	r2, r3
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	621a      	str	r2, [r3, #32]
 80012d8:	e00b      	b.n	80012f2 <GPIO_Init+0x82>
				} else {
					GPIOx->AFR[1] |= (GPIOx_PinConf.GPIO_PinAltFuncMode << (i % (GPIO_PIN_NUMBER / 2)) * 4U);
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012de:	69f9      	ldr	r1, [r7, #28]
 80012e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	431a      	orrs	r2, r3
 80012ee:	6a3b      	ldr	r3, [r7, #32]
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24
				}

				//Configure the OTYPER register
				GPIOx->OTYPER |= (GPIOx_PinConf.GPIO_PinOPType << i);
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	69b9      	ldr	r1, [r7, #24]
 80012f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	431a      	orrs	r2, r3
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	605a      	str	r2, [r3, #4]

				//Configure the OSPEED register
				GPIOx->OSPEEDR |= (GPIOx_PinConf.GPIO_PinSpeed << i * 2U);
 8001304:	6a3b      	ldr	r3, [r7, #32]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	6939      	ldr	r1, [r7, #16]
 800130a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	431a      	orrs	r2, r3
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	609a      	str	r2, [r3, #8]
			}

			//Handle the GPIO pin interrupt mode
			if ((GPIOx_PinConf.GPIO_PinMode == GPIO_IT_FT_MODE) || (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RT_MODE)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2b04      	cmp	r3, #4
 800131c:	d006      	beq.n	800132c <GPIO_Init+0xbc>
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2b05      	cmp	r3, #5
 8001322:	d003      	beq.n	800132c <GPIO_Init+0xbc>
				|| (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RFT_MODE)) {
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b06      	cmp	r3, #6
 8001328:	f040 809b 	bne.w	8001462 <GPIO_Init+0x1f2>

				//Enable the clock for SYSCFG registers
				SYSCFG_PCLK_EN();
 800132c:	4b5c      	ldr	r3, [pc, #368]	; (80014a0 <GPIO_Init+0x230>)
 800132e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001330:	4a5b      	ldr	r2, [pc, #364]	; (80014a0 <GPIO_Init+0x230>)
 8001332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001336:	6453      	str	r3, [r2, #68]	; 0x44

				//Handling the falling edge cases
				if (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_FT_MODE) {
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b04      	cmp	r3, #4
 800133c:	d115      	bne.n	800136a <GPIO_Init+0xfa>
					//Configure the FTSR
					EXTI->FTSR |= (1 << i);
 800133e:	4b59      	ldr	r3, [pc, #356]	; (80014a4 <GPIO_Init+0x234>)
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001344:	2101      	movs	r1, #1
 8001346:	fa01 f202 	lsl.w	r2, r1, r2
 800134a:	4611      	mov	r1, r2
 800134c:	4a55      	ldr	r2, [pc, #340]	; (80014a4 <GPIO_Init+0x234>)
 800134e:	430b      	orrs	r3, r1
 8001350:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~(1 << i); //Clear the corresponding RTSR bit
 8001352:	4b54      	ldr	r3, [pc, #336]	; (80014a4 <GPIO_Init+0x234>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001358:	2101      	movs	r1, #1
 800135a:	fa01 f202 	lsl.w	r2, r1, r2
 800135e:	43d2      	mvns	r2, r2
 8001360:	4611      	mov	r1, r2
 8001362:	4a50      	ldr	r2, [pc, #320]	; (80014a4 <GPIO_Init+0x234>)
 8001364:	400b      	ands	r3, r1
 8001366:	6093      	str	r3, [r2, #8]
 8001368:	e02c      	b.n	80013c4 <GPIO_Init+0x154>
				} else if (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RT_MODE) {
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b05      	cmp	r3, #5
 800136e:	d115      	bne.n	800139c <GPIO_Init+0x12c>
					//Configure the RTSR
					EXTI->RTSR |= (1 << i);
 8001370:	4b4c      	ldr	r3, [pc, #304]	; (80014a4 <GPIO_Init+0x234>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001376:	2101      	movs	r1, #1
 8001378:	fa01 f202 	lsl.w	r2, r1, r2
 800137c:	4611      	mov	r1, r2
 800137e:	4a49      	ldr	r2, [pc, #292]	; (80014a4 <GPIO_Init+0x234>)
 8001380:	430b      	orrs	r3, r1
 8001382:	6093      	str	r3, [r2, #8]
					EXTI->FTSR &= ~(1 << i); //Clear the corresponding FTSR bit
 8001384:	4b47      	ldr	r3, [pc, #284]	; (80014a4 <GPIO_Init+0x234>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800138a:	2101      	movs	r1, #1
 800138c:	fa01 f202 	lsl.w	r2, r1, r2
 8001390:	43d2      	mvns	r2, r2
 8001392:	4611      	mov	r1, r2
 8001394:	4a43      	ldr	r2, [pc, #268]	; (80014a4 <GPIO_Init+0x234>)
 8001396:	400b      	ands	r3, r1
 8001398:	60d3      	str	r3, [r2, #12]
 800139a:	e013      	b.n	80013c4 <GPIO_Init+0x154>
				}  else {
					//Configure both the FTSR and RTSR
					EXTI->FTSR |= (1 << i);
 800139c:	4b41      	ldr	r3, [pc, #260]	; (80014a4 <GPIO_Init+0x234>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80013a2:	2101      	movs	r1, #1
 80013a4:	fa01 f202 	lsl.w	r2, r1, r2
 80013a8:	4611      	mov	r1, r2
 80013aa:	4a3e      	ldr	r2, [pc, #248]	; (80014a4 <GPIO_Init+0x234>)
 80013ac:	430b      	orrs	r3, r1
 80013ae:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR |= (1 << i);
 80013b0:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <GPIO_Init+0x234>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80013b6:	2101      	movs	r1, #1
 80013b8:	fa01 f202 	lsl.w	r2, r1, r2
 80013bc:	4611      	mov	r1, r2
 80013be:	4a39      	ldr	r2, [pc, #228]	; (80014a4 <GPIO_Init+0x234>)
 80013c0:	430b      	orrs	r3, r1
 80013c2:	6093      	str	r3, [r2, #8]
				//Configure the GPIO port selection in SYSCFG_EXTICR
				//Rule: int quotient = n >> z
				//		int remainder = n & (~(~(int) 0) << z)
				//In this case, since we always want z = 2, as we divide by 4,
				//the term ~(~(int) 0) << z) = 0x03U
				SYSCFG->EXTICR[i >> 2U] |= GPIO_PORT_INDEX(GPIOx) << ((i & 0x03U) * 4U);
 80013c4:	4a38      	ldr	r2, [pc, #224]	; (80014a8 <GPIO_Init+0x238>)
 80013c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	3302      	adds	r3, #2
 80013ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	4935      	ldr	r1, [pc, #212]	; (80014ac <GPIO_Init+0x23c>)
 80013d6:	428b      	cmp	r3, r1
 80013d8:	d02b      	beq.n	8001432 <GPIO_Init+0x1c2>
 80013da:	6a3b      	ldr	r3, [r7, #32]
 80013dc:	4934      	ldr	r1, [pc, #208]	; (80014b0 <GPIO_Init+0x240>)
 80013de:	428b      	cmp	r3, r1
 80013e0:	d025      	beq.n	800142e <GPIO_Init+0x1be>
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	4933      	ldr	r1, [pc, #204]	; (80014b4 <GPIO_Init+0x244>)
 80013e6:	428b      	cmp	r3, r1
 80013e8:	d01f      	beq.n	800142a <GPIO_Init+0x1ba>
 80013ea:	6a3b      	ldr	r3, [r7, #32]
 80013ec:	4932      	ldr	r1, [pc, #200]	; (80014b8 <GPIO_Init+0x248>)
 80013ee:	428b      	cmp	r3, r1
 80013f0:	d019      	beq.n	8001426 <GPIO_Init+0x1b6>
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	4931      	ldr	r1, [pc, #196]	; (80014bc <GPIO_Init+0x24c>)
 80013f6:	428b      	cmp	r3, r1
 80013f8:	d013      	beq.n	8001422 <GPIO_Init+0x1b2>
 80013fa:	6a3b      	ldr	r3, [r7, #32]
 80013fc:	4930      	ldr	r1, [pc, #192]	; (80014c0 <GPIO_Init+0x250>)
 80013fe:	428b      	cmp	r3, r1
 8001400:	d00d      	beq.n	800141e <GPIO_Init+0x1ae>
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	492f      	ldr	r1, [pc, #188]	; (80014c4 <GPIO_Init+0x254>)
 8001406:	428b      	cmp	r3, r1
 8001408:	d007      	beq.n	800141a <GPIO_Init+0x1aa>
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	492e      	ldr	r1, [pc, #184]	; (80014c8 <GPIO_Init+0x258>)
 800140e:	428b      	cmp	r3, r1
 8001410:	d101      	bne.n	8001416 <GPIO_Init+0x1a6>
 8001412:	2307      	movs	r3, #7
 8001414:	e00e      	b.n	8001434 <GPIO_Init+0x1c4>
 8001416:	2308      	movs	r3, #8
 8001418:	e00c      	b.n	8001434 <GPIO_Init+0x1c4>
 800141a:	2306      	movs	r3, #6
 800141c:	e00a      	b.n	8001434 <GPIO_Init+0x1c4>
 800141e:	2305      	movs	r3, #5
 8001420:	e008      	b.n	8001434 <GPIO_Init+0x1c4>
 8001422:	2304      	movs	r3, #4
 8001424:	e006      	b.n	8001434 <GPIO_Init+0x1c4>
 8001426:	2303      	movs	r3, #3
 8001428:	e004      	b.n	8001434 <GPIO_Init+0x1c4>
 800142a:	2302      	movs	r3, #2
 800142c:	e002      	b.n	8001434 <GPIO_Init+0x1c4>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <GPIO_Init+0x1c4>
 8001432:	2300      	movs	r3, #0
 8001434:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001436:	f001 0103 	and.w	r1, r1, #3
 800143a:	0089      	lsls	r1, r1, #2
 800143c:	408b      	lsls	r3, r1
 800143e:	481a      	ldr	r0, [pc, #104]	; (80014a8 <GPIO_Init+0x238>)
 8001440:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001442:	0889      	lsrs	r1, r1, #2
 8001444:	b289      	uxth	r1, r1
 8001446:	431a      	orrs	r2, r3
 8001448:	1c8b      	adds	r3, r1, #2
 800144a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

				//Enable the EXTI interrupt delivery using IMR
				EXTI->IMR |= (1 << i);
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <GPIO_Init+0x234>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001454:	2101      	movs	r1, #1
 8001456:	fa01 f202 	lsl.w	r2, r1, r2
 800145a:	4611      	mov	r1, r2
 800145c:	4a11      	ldr	r2, [pc, #68]	; (80014a4 <GPIO_Init+0x234>)
 800145e:	430b      	orrs	r3, r1
 8001460:	6013      	str	r3, [r2, #0]
			}

			//Handle the MODER register
			GPIOx->MODER |= (GPIOx_PinConf.GPIO_PinMode << i * 2U);
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	68f9      	ldr	r1, [r7, #12]
 8001468:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	431a      	orrs	r2, r3
 8001472:	6a3b      	ldr	r3, [r7, #32]
 8001474:	601a      	str	r2, [r3, #0]

			//Handle the PuPdCtrl Register
			GPIOx->PUPDR |= (GPIOx_PinConf.GPIO_PinPuPdCtrl << i * 2U);
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	6979      	ldr	r1, [r7, #20]
 800147c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	431a      	orrs	r2, r3
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	60da      	str	r2, [r3, #12]
	for (uint16_t i = 0U; i < GPIO_PIN_NUMBER; i++) {
 800148a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800148c:	3301      	adds	r3, #1
 800148e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001490:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001492:	2b0f      	cmp	r3, #15
 8001494:	f67f af04 	bls.w	80012a0 <GPIO_Init+0x30>
		}
	}
}
 8001498:	bf00      	nop
 800149a:	3728      	adds	r7, #40	; 0x28
 800149c:	46bd      	mov	sp, r7
 800149e:	bdb0      	pop	{r4, r5, r7, pc}
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40013c00 	.word	0x40013c00
 80014a8:	40013800 	.word	0x40013800
 80014ac:	40020000 	.word	0x40020000
 80014b0:	40020400 	.word	0x40020400
 80014b4:	40020800 	.word	0x40020800
 80014b8:	40020c00 	.word	0x40020c00
 80014bc:	40020100 	.word	0x40020100
 80014c0:	40021400 	.word	0x40021400
 80014c4:	40021800 	.word	0x40021800
 80014c8:	40021c00 	.word	0x40021c00

080014cc <GPIO_DeInit>:
 *
 * @return				- none
 * @note				-  Consult the RCC Peripheral reset registers to reset
 * 					       all the registers of the peripherals
 */
void GPIO_DeInit(GPIO_Reg_t *pGPIOx) {
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

	//Reset all the registers of the respective GPIO peripherals
	if (pGPIOx == GPIOA) {
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a5f      	ldr	r2, [pc, #380]	; (8001654 <GPIO_DeInit+0x188>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d10c      	bne.n	80014f6 <GPIO_DeInit+0x2a>
		GPIOA_PCLK_RST();
 80014dc:	4b5e      	ldr	r3, [pc, #376]	; (8001658 <GPIO_DeInit+0x18c>)
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	4a5d      	ldr	r2, [pc, #372]	; (8001658 <GPIO_DeInit+0x18c>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6113      	str	r3, [r2, #16]
 80014e8:	4b5b      	ldr	r3, [pc, #364]	; (8001658 <GPIO_DeInit+0x18c>)
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	4a5a      	ldr	r2, [pc, #360]	; (8001658 <GPIO_DeInit+0x18c>)
 80014ee:	f023 0301 	bic.w	r3, r3, #1
 80014f2:	6113      	str	r3, [r2, #16]
	} else if (pGPIOx == GPIOJ) {
		GPIOJ_PCLK_RST();
	} else if (pGPIOx == GPIOK) {
		GPIOK_PCLK_RST();
	}
}
 80014f4:	e0a8      	b.n	8001648 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOB) {
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a58      	ldr	r2, [pc, #352]	; (800165c <GPIO_DeInit+0x190>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d10c      	bne.n	8001518 <GPIO_DeInit+0x4c>
		GPIOB_PCLK_RST();
 80014fe:	4b56      	ldr	r3, [pc, #344]	; (8001658 <GPIO_DeInit+0x18c>)
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	4a55      	ldr	r2, [pc, #340]	; (8001658 <GPIO_DeInit+0x18c>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	6113      	str	r3, [r2, #16]
 800150a:	4b53      	ldr	r3, [pc, #332]	; (8001658 <GPIO_DeInit+0x18c>)
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	4a52      	ldr	r2, [pc, #328]	; (8001658 <GPIO_DeInit+0x18c>)
 8001510:	f023 0302 	bic.w	r3, r3, #2
 8001514:	6113      	str	r3, [r2, #16]
}
 8001516:	e097      	b.n	8001648 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOC) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a51      	ldr	r2, [pc, #324]	; (8001660 <GPIO_DeInit+0x194>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d10c      	bne.n	800153a <GPIO_DeInit+0x6e>
		GPIOC_PCLK_RST();
 8001520:	4b4d      	ldr	r3, [pc, #308]	; (8001658 <GPIO_DeInit+0x18c>)
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	4a4c      	ldr	r2, [pc, #304]	; (8001658 <GPIO_DeInit+0x18c>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	6113      	str	r3, [r2, #16]
 800152c:	4b4a      	ldr	r3, [pc, #296]	; (8001658 <GPIO_DeInit+0x18c>)
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	4a49      	ldr	r2, [pc, #292]	; (8001658 <GPIO_DeInit+0x18c>)
 8001532:	f023 0304 	bic.w	r3, r3, #4
 8001536:	6113      	str	r3, [r2, #16]
}
 8001538:	e086      	b.n	8001648 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOD) {
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a49      	ldr	r2, [pc, #292]	; (8001664 <GPIO_DeInit+0x198>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d10c      	bne.n	800155c <GPIO_DeInit+0x90>
		GPIOD_PCLK_RST();
 8001542:	4b45      	ldr	r3, [pc, #276]	; (8001658 <GPIO_DeInit+0x18c>)
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	4a44      	ldr	r2, [pc, #272]	; (8001658 <GPIO_DeInit+0x18c>)
 8001548:	f043 0308 	orr.w	r3, r3, #8
 800154c:	6113      	str	r3, [r2, #16]
 800154e:	4b42      	ldr	r3, [pc, #264]	; (8001658 <GPIO_DeInit+0x18c>)
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	4a41      	ldr	r2, [pc, #260]	; (8001658 <GPIO_DeInit+0x18c>)
 8001554:	f023 0308 	bic.w	r3, r3, #8
 8001558:	6113      	str	r3, [r2, #16]
}
 800155a:	e075      	b.n	8001648 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOE) {
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a42      	ldr	r2, [pc, #264]	; (8001668 <GPIO_DeInit+0x19c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d10c      	bne.n	800157e <GPIO_DeInit+0xb2>
		GPIOE_PCLK_RST();
 8001564:	4b3c      	ldr	r3, [pc, #240]	; (8001658 <GPIO_DeInit+0x18c>)
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	4a3b      	ldr	r2, [pc, #236]	; (8001658 <GPIO_DeInit+0x18c>)
 800156a:	f043 0310 	orr.w	r3, r3, #16
 800156e:	6113      	str	r3, [r2, #16]
 8001570:	4b39      	ldr	r3, [pc, #228]	; (8001658 <GPIO_DeInit+0x18c>)
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	4a38      	ldr	r2, [pc, #224]	; (8001658 <GPIO_DeInit+0x18c>)
 8001576:	f023 0310 	bic.w	r3, r3, #16
 800157a:	6113      	str	r3, [r2, #16]
}
 800157c:	e064      	b.n	8001648 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOF) {
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a3a      	ldr	r2, [pc, #232]	; (800166c <GPIO_DeInit+0x1a0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d10c      	bne.n	80015a0 <GPIO_DeInit+0xd4>
		GPIOF_PCLK_RST();
 8001586:	4b34      	ldr	r3, [pc, #208]	; (8001658 <GPIO_DeInit+0x18c>)
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	4a33      	ldr	r2, [pc, #204]	; (8001658 <GPIO_DeInit+0x18c>)
 800158c:	f043 0320 	orr.w	r3, r3, #32
 8001590:	6113      	str	r3, [r2, #16]
 8001592:	4b31      	ldr	r3, [pc, #196]	; (8001658 <GPIO_DeInit+0x18c>)
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	4a30      	ldr	r2, [pc, #192]	; (8001658 <GPIO_DeInit+0x18c>)
 8001598:	f023 0320 	bic.w	r3, r3, #32
 800159c:	6113      	str	r3, [r2, #16]
}
 800159e:	e053      	b.n	8001648 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOG) {
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a33      	ldr	r2, [pc, #204]	; (8001670 <GPIO_DeInit+0x1a4>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d10c      	bne.n	80015c2 <GPIO_DeInit+0xf6>
		GPIOG_PCLK_RST();
 80015a8:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <GPIO_DeInit+0x18c>)
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	4a2a      	ldr	r2, [pc, #168]	; (8001658 <GPIO_DeInit+0x18c>)
 80015ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015b2:	6113      	str	r3, [r2, #16]
 80015b4:	4b28      	ldr	r3, [pc, #160]	; (8001658 <GPIO_DeInit+0x18c>)
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	4a27      	ldr	r2, [pc, #156]	; (8001658 <GPIO_DeInit+0x18c>)
 80015ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015be:	6113      	str	r3, [r2, #16]
}
 80015c0:	e042      	b.n	8001648 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOH) {
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a2b      	ldr	r2, [pc, #172]	; (8001674 <GPIO_DeInit+0x1a8>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d10c      	bne.n	80015e4 <GPIO_DeInit+0x118>
		GPIOH_PCLK_RST();
 80015ca:	4b23      	ldr	r3, [pc, #140]	; (8001658 <GPIO_DeInit+0x18c>)
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	4a22      	ldr	r2, [pc, #136]	; (8001658 <GPIO_DeInit+0x18c>)
 80015d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d4:	6113      	str	r3, [r2, #16]
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <GPIO_DeInit+0x18c>)
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	4a1f      	ldr	r2, [pc, #124]	; (8001658 <GPIO_DeInit+0x18c>)
 80015dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015e0:	6113      	str	r3, [r2, #16]
}
 80015e2:	e031      	b.n	8001648 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOI) {
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a24      	ldr	r2, [pc, #144]	; (8001678 <GPIO_DeInit+0x1ac>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d10c      	bne.n	8001606 <GPIO_DeInit+0x13a>
		GPIOI_PCLK_RST();
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <GPIO_DeInit+0x18c>)
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	4a19      	ldr	r2, [pc, #100]	; (8001658 <GPIO_DeInit+0x18c>)
 80015f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f6:	6113      	str	r3, [r2, #16]
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <GPIO_DeInit+0x18c>)
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	4a16      	ldr	r2, [pc, #88]	; (8001658 <GPIO_DeInit+0x18c>)
 80015fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001602:	6113      	str	r3, [r2, #16]
}
 8001604:	e020      	b.n	8001648 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOJ) {
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a1c      	ldr	r2, [pc, #112]	; (800167c <GPIO_DeInit+0x1b0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d10c      	bne.n	8001628 <GPIO_DeInit+0x15c>
		GPIOJ_PCLK_RST();
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <GPIO_DeInit+0x18c>)
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	4a11      	ldr	r2, [pc, #68]	; (8001658 <GPIO_DeInit+0x18c>)
 8001614:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001618:	6113      	str	r3, [r2, #16]
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <GPIO_DeInit+0x18c>)
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <GPIO_DeInit+0x18c>)
 8001620:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001624:	6113      	str	r3, [r2, #16]
}
 8001626:	e00f      	b.n	8001648 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOK) {
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a15      	ldr	r2, [pc, #84]	; (8001680 <GPIO_DeInit+0x1b4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d10b      	bne.n	8001648 <GPIO_DeInit+0x17c>
		GPIOK_PCLK_RST();
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <GPIO_DeInit+0x18c>)
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	4a08      	ldr	r2, [pc, #32]	; (8001658 <GPIO_DeInit+0x18c>)
 8001636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800163a:	6113      	str	r3, [r2, #16]
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <GPIO_DeInit+0x18c>)
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	4a05      	ldr	r2, [pc, #20]	; (8001658 <GPIO_DeInit+0x18c>)
 8001642:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001646:	6113      	str	r3, [r2, #16]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	40020000 	.word	0x40020000
 8001658:	40023800 	.word	0x40023800
 800165c:	40020400 	.word	0x40020400
 8001660:	40020800 	.word	0x40020800
 8001664:	40020c00 	.word	0x40020c00
 8001668:	40020100 	.word	0x40020100
 800166c:	40021400 	.word	0x40021400
 8001670:	40021800 	.word	0x40021800
 8001674:	40021c00 	.word	0x40021c00
 8001678:	40022000 	.word	0x40022000
 800167c:	40022400 	.word	0x40022400
 8001680:	40022800 	.word	0x40022800

08001684 <__libc_init_array>:
 8001684:	b570      	push	{r4, r5, r6, lr}
 8001686:	4e0d      	ldr	r6, [pc, #52]	; (80016bc <__libc_init_array+0x38>)
 8001688:	4c0d      	ldr	r4, [pc, #52]	; (80016c0 <__libc_init_array+0x3c>)
 800168a:	1ba4      	subs	r4, r4, r6
 800168c:	10a4      	asrs	r4, r4, #2
 800168e:	2500      	movs	r5, #0
 8001690:	42a5      	cmp	r5, r4
 8001692:	d109      	bne.n	80016a8 <__libc_init_array+0x24>
 8001694:	4e0b      	ldr	r6, [pc, #44]	; (80016c4 <__libc_init_array+0x40>)
 8001696:	4c0c      	ldr	r4, [pc, #48]	; (80016c8 <__libc_init_array+0x44>)
 8001698:	f000 f820 	bl	80016dc <_init>
 800169c:	1ba4      	subs	r4, r4, r6
 800169e:	10a4      	asrs	r4, r4, #2
 80016a0:	2500      	movs	r5, #0
 80016a2:	42a5      	cmp	r5, r4
 80016a4:	d105      	bne.n	80016b2 <__libc_init_array+0x2e>
 80016a6:	bd70      	pop	{r4, r5, r6, pc}
 80016a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016ac:	4798      	blx	r3
 80016ae:	3501      	adds	r5, #1
 80016b0:	e7ee      	b.n	8001690 <__libc_init_array+0xc>
 80016b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016b6:	4798      	blx	r3
 80016b8:	3501      	adds	r5, #1
 80016ba:	e7f2      	b.n	80016a2 <__libc_init_array+0x1e>
 80016bc:	08001714 	.word	0x08001714
 80016c0:	08001714 	.word	0x08001714
 80016c4:	08001714 	.word	0x08001714
 80016c8:	08001718 	.word	0x08001718

080016cc <memset>:
 80016cc:	4402      	add	r2, r0
 80016ce:	4603      	mov	r3, r0
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d100      	bne.n	80016d6 <memset+0xa>
 80016d4:	4770      	bx	lr
 80016d6:	f803 1b01 	strb.w	r1, [r3], #1
 80016da:	e7f9      	b.n	80016d0 <memset+0x4>

080016dc <_init>:
 80016dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016de:	bf00      	nop
 80016e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016e2:	bc08      	pop	{r3}
 80016e4:	469e      	mov	lr, r3
 80016e6:	4770      	bx	lr

080016e8 <_fini>:
 80016e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ea:	bf00      	nop
 80016ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ee:	bc08      	pop	{r3}
 80016f0:	469e      	mov	lr, r3
 80016f2:	4770      	bx	lr
