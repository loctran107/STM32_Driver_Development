
STM32F407xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025d4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08002784  08002784  00012784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002848  08002848  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002848  08002848  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002848  08002848  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002848  08002848  00012848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800284c  0800284c  0001284c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  20000064  080028b4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080028b4  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000488a  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b60  00000000  00000000  0002491e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002d0  00000000  00000000  00025480  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000278  00000000  00000000  00025750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003968  00000000  00000000  000259c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000279f  00000000  00000000  00029330  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000ce3b  00000000  00000000  0002bacf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003890a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011e8  00000000  00000000  00038988  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800276c 	.word	0x0800276c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	0800276c 	.word	0x0800276c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
I2C_Handle_t  I2C_Handler; //global data for I2C ISR
uint8_t TXE_CMPLT = RESET;
uint8_t RXNE_CMPLT = RESET;
uint8_t rxComplt = RESET;
uint8_t AF_FLAG = RESET;
int main() {
 8000290:	b580      	push	{r7, lr}
 8000292:	b09a      	sub	sp, #104	; 0x68
 8000294:	af02      	add	r7, sp, #8

	uint8_t dummy[30]; //dummy buffer
	uint8_t len, commandcode;
	//Define the handle structures
	GPIO_Handle_t GPIO_Button, I2C_GPIO;
	memset(&GPIO_Button, 0, sizeof(GPIO_Button));
 8000296:	f107 0320 	add.w	r3, r7, #32
 800029a:	221c      	movs	r2, #28
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 fb78 	bl	8001994 <memset>
	memset(&I2C_GPIO, 0, sizeof(GPIO_Button));
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	221c      	movs	r2, #28
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 fb72 	bl	8001994 <memset>
	memset(&I2C_Handler, 0, sizeof(GPIO_Button));
 80002b0:	221c      	movs	r2, #28
 80002b2:	2100      	movs	r1, #0
 80002b4:	483e      	ldr	r0, [pc, #248]	; (80003b0 <main+0x120>)
 80002b6:	f001 fb6d 	bl	8001994 <memset>

	GPIO_ButtonInit(&GPIO_Button);
 80002ba:	f107 0320 	add.w	r3, r7, #32
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 f8be 	bl	8000440 <GPIO_ButtonInit>
	GPIO_I2CInit(&I2C_GPIO);
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 f8dc 	bl	8000484 <GPIO_I2CInit>
	I2C_HandlerInit(&I2C_Handler);
 80002cc:	4838      	ldr	r0, [pc, #224]	; (80003b0 <main+0x120>)
 80002ce:	f000 f901 	bl	80004d4 <I2C_HandlerInit>


	//Enable the NVIC table for I2C Event an Error Interrupt
	I2C_IRQITConfig(I2C1_EV_IRQ_NO, ENABLE);
 80002d2:	2101      	movs	r1, #1
 80002d4:	201f      	movs	r0, #31
 80002d6:	f000 fb87 	bl	80009e8 <I2C_IRQITConfig>
	I2C_IRQITConfig(I2C1_ER_IRQ_NO, ENABLE);
 80002da:	2101      	movs	r1, #1
 80002dc:	2020      	movs	r0, #32
 80002de:	f000 fb83 	bl	80009e8 <I2C_IRQITConfig>

	//Enable the I2C Peripheral enable
	I2C_PeripheralEnable(I2C_Handler.pI2Cx, ENABLE);
 80002e2:	4b33      	ldr	r3, [pc, #204]	; (80003b0 <main+0x120>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2101      	movs	r1, #1
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 fb49 	bl	8000980 <I2C_PeripheralEnable>


	while (1) {
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_0) );
 80002ee:	bf00      	nop
 80002f0:	2101      	movs	r1, #1
 80002f2:	4830      	ldr	r0, [pc, #192]	; (80003b4 <main+0x124>)
 80002f4:	f001 fb0e 	bl	8001914 <GPIO_ReadFromInputPin>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d0f8      	beq.n	80002f0 <main+0x60>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80002fe:	f000 f90b 	bl	8000518 <delay>

		commandcode = COMMAND_REQUEST;
 8000302:	2351      	movs	r3, #81	; 0x51
 8000304:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e


		while(I2C_MasterSendDataIT(&I2C_Handler,&commandcode,1,SLAVE_ADDR,I2C_SR_SET) != I2C_READY);
 8000308:	bf00      	nop
 800030a:	f107 013e 	add.w	r1, r7, #62	; 0x3e
 800030e:	2301      	movs	r3, #1
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	2368      	movs	r3, #104	; 0x68
 8000314:	2201      	movs	r2, #1
 8000316:	4826      	ldr	r0, [pc, #152]	; (80003b0 <main+0x120>)
 8000318:	f000 fbaa 	bl	8000a70 <I2C_MasterSendDataIT>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d1f3      	bne.n	800030a <main+0x7a>

		while(I2C_MasterReceiveDataIT(&I2C_Handler,&len,1,SLAVE_ADDR,I2C_SR_SET)!= I2C_READY);
 8000322:	bf00      	nop
 8000324:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000328:	2301      	movs	r3, #1
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	2368      	movs	r3, #104	; 0x68
 800032e:	2201      	movs	r2, #1
 8000330:	481f      	ldr	r0, [pc, #124]	; (80003b0 <main+0x120>)
 8000332:	f000 fbdf 	bl	8000af4 <I2C_MasterReceiveDataIT>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d1f3      	bne.n	8000324 <main+0x94>



		commandcode = 0x52;
 800033c:	2352      	movs	r3, #82	; 0x52
 800033e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		while(I2C_MasterSendDataIT(&I2C_Handler,&commandcode,1,SLAVE_ADDR,I2C_SR_SET) != I2C_READY);
 8000342:	bf00      	nop
 8000344:	f107 013e 	add.w	r1, r7, #62	; 0x3e
 8000348:	2301      	movs	r3, #1
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	2368      	movs	r3, #104	; 0x68
 800034e:	2201      	movs	r2, #1
 8000350:	4817      	ldr	r0, [pc, #92]	; (80003b0 <main+0x120>)
 8000352:	f000 fb8d 	bl	8000a70 <I2C_MasterSendDataIT>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d1f3      	bne.n	8000344 <main+0xb4>


		while(I2C_MasterReceiveDataIT(&I2C_Handler,dummy,len,SLAVE_ADDR,I2C_SR_RESET)!= I2C_READY);
 800035c:	bf00      	nop
 800035e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000362:	461a      	mov	r2, r3
 8000364:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000368:	2300      	movs	r3, #0
 800036a:	9300      	str	r3, [sp, #0]
 800036c:	2368      	movs	r3, #104	; 0x68
 800036e:	4810      	ldr	r0, [pc, #64]	; (80003b0 <main+0x120>)
 8000370:	f000 fbc0 	bl	8000af4 <I2C_MasterReceiveDataIT>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d1f1      	bne.n	800035e <main+0xce>

		rxComplt = RESET;
 800037a:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <main+0x128>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]

		//wait till rx completes
		while(rxComplt != SET)
 8000380:	bf00      	nop
 8000382:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <main+0x128>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	2b01      	cmp	r3, #1
 8000388:	d1fb      	bne.n	8000382 <main+0xf2>
		{

		}

		dummy[len+1] = '\0';
 800038a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800038e:	3301      	adds	r3, #1
 8000390:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000394:	4413      	add	r3, r2
 8000396:	2200      	movs	r2, #0
 8000398:	f803 2c20 	strb.w	r2, [r3, #-32]

		printf("Data : %s",dummy);
 800039c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003a0:	4619      	mov	r1, r3
 80003a2:	4806      	ldr	r0, [pc, #24]	; (80003bc <main+0x12c>)
 80003a4:	f001 fafe 	bl	80019a4 <iprintf>

		rxComplt = RESET;
 80003a8:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <main+0x128>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	701a      	strb	r2, [r3, #0]
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_0) );
 80003ae:	e79e      	b.n	80002ee <main+0x5e>
 80003b0:	20000090 	.word	0x20000090
 80003b4:	40020000 	.word	0x40020000
 80003b8:	20000082 	.word	0x20000082
 80003bc:	08002784 	.word	0x08002784

080003c0 <I2C_ApplicationEventCallBack>:

	return EXIT_SUCCESS;
}

//Implement I2C Call back function to signal event completion
void I2C_ApplicationEventCallBack(I2C_Handle_t* pI2CHandler, uint8_t appEvt) {
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	460b      	mov	r3, r1
 80003ca:	70fb      	strb	r3, [r7, #3]

	//If possible, try implementing different application
	//events such as Acknowledgement Error and such
	switch (appEvt) {
 80003cc:	78fb      	ldrb	r3, [r7, #3]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d008      	beq.n	80003e4 <I2C_ApplicationEventCallBack+0x24>
 80003d2:	2b04      	cmp	r3, #4
 80003d4:	d00d      	beq.n	80003f2 <I2C_ApplicationEventCallBack+0x32>
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d000      	beq.n	80003dc <I2C_ApplicationEventCallBack+0x1c>
	case I2C_EVT_TX_CMPLT:	TXE_CMPLT = SET;  break;
	case I2C_EVT_RX_CMPLT: RXNE_CMPLT = SET; rxComplt = SET; break;
	case I2C_ERR_AF: AF_FLAG = SET; break;
	}
}
 80003da:	e00e      	b.n	80003fa <I2C_ApplicationEventCallBack+0x3a>
	case I2C_EVT_TX_CMPLT:	TXE_CMPLT = SET;  break;
 80003dc:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <I2C_ApplicationEventCallBack+0x48>)
 80003de:	2201      	movs	r2, #1
 80003e0:	701a      	strb	r2, [r3, #0]
 80003e2:	e00a      	b.n	80003fa <I2C_ApplicationEventCallBack+0x3a>
	case I2C_EVT_RX_CMPLT: RXNE_CMPLT = SET; rxComplt = SET; break;
 80003e4:	4b09      	ldr	r3, [pc, #36]	; (800040c <I2C_ApplicationEventCallBack+0x4c>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	701a      	strb	r2, [r3, #0]
 80003ea:	4b09      	ldr	r3, [pc, #36]	; (8000410 <I2C_ApplicationEventCallBack+0x50>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	701a      	strb	r2, [r3, #0]
 80003f0:	e003      	b.n	80003fa <I2C_ApplicationEventCallBack+0x3a>
	case I2C_ERR_AF: AF_FLAG = SET; break;
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <I2C_ApplicationEventCallBack+0x54>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	701a      	strb	r2, [r3, #0]
 80003f8:	bf00      	nop
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	20000080 	.word	0x20000080
 800040c:	20000081 	.word	0x20000081
 8000410:	20000082 	.word	0x20000082
 8000414:	20000083 	.word	0x20000083

08000418 <I2C1_EV_IRQHandler>:

//Interrupt Service Routine to handle I2C1 Event Interrupt
void I2C1_EV_IRQHandler(void) {
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C_Handler);
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <I2C1_EV_IRQHandler+0x10>)
 800041e:	f000 fbae 	bl	8000b7e <I2C_EV_IRQHandling>
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	20000090 	.word	0x20000090

0800042c <I2C1_ER_IRQHandler>:

//Interrupt Service Routine to handle I2C1 Error Interrupt
void I2C1_ER_IRQHandler(void) {
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C_Handler);
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <I2C1_ER_IRQHandler+0x10>)
 8000432:	f000 fd0c 	bl	8000e4e <I2C_ER_IRQHandling>
}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	20000090 	.word	0x20000090

08000440 <GPIO_ButtonInit>:

void GPIO_ButtonInit(GPIO_Handle_t* GPIO_Button) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	GPIO_Button->pGPIOx = GPIOA;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a0d      	ldr	r2, [pc, #52]	; (8000480 <GPIO_ButtonInit+0x40>)
 800044c:	601a      	str	r2, [r3, #0]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinMode = GPIO_INPUT_MODE;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	2201      	movs	r2, #1
 8000458:	605a      	str	r2, [r3, #4]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PU_PD;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	2200      	movs	r2, #0
 800045e:	611a      	str	r2, [r3, #16]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2202      	movs	r2, #2
 8000464:	60da      	str	r2, [r3, #12]

	GPIO_DeInit(GPIO_Button->pGPIOx);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4618      	mov	r0, r3
 800046c:	f001 f976 	bl	800175c <GPIO_DeInit>
	GPIO_Init(GPIO_Button);
 8000470:	6878      	ldr	r0, [r7, #4]
 8000472:	f001 f845 	bl	8001500 <GPIO_Init>
}
 8000476:	bf00      	nop
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40020000 	.word	0x40020000

08000484 <GPIO_I2CInit>:

void GPIO_I2CInit(GPIO_Handle_t* I2C_GPIO) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	I2C_GPIO->pGPIOx = GPIOB;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a10      	ldr	r2, [pc, #64]	; (80004d0 <GPIO_I2CInit+0x4c>)
 8000490:	601a      	str	r2, [r3, #0]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinMode = GPIO_ALT_FUNC_MODE;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2202      	movs	r2, #2
 8000496:	609a      	str	r2, [r3, #8]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinAltFuncMode = AF4;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2204      	movs	r2, #4
 800049c:	619a      	str	r2, [r3, #24]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinNumber = GPIO_PIN_6 | GPIO_PIN_7;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	22c0      	movs	r2, #192	; 0xc0
 80004a2:	605a      	str	r2, [r3, #4]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinOPType = GPIO_OPEN_DRAIN;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2201      	movs	r2, #1
 80004a8:	615a      	str	r2, [r3, #20]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinPuPdCtrl = GPIO_PU;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	2201      	movs	r2, #1
 80004ae:	611a      	str	r2, [r3, #16]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinSpeed = GPIO_MEDIUM_SPEED;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2201      	movs	r2, #1
 80004b4:	60da      	str	r2, [r3, #12]

	GPIO_DeInit(I2C_GPIO->pGPIOx);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f001 f94e 	bl	800175c <GPIO_DeInit>
	GPIO_Init(I2C_GPIO);
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f001 f81d 	bl	8001500 <GPIO_Init>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40020400 	.word	0x40020400

080004d4 <I2C_HandlerInit>:

void I2C_HandlerInit(I2C_Handle_t* I2C_Handler) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	I2C_Handler->pI2Cx = I2C1;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a0d      	ldr	r2, [pc, #52]	; (8000514 <I2C_HandlerInit+0x40>)
 80004e0:	601a      	str	r2, [r3, #0]
	I2C_Handler->I2C_Config.ACKControl = I2C_ACK_EN;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2201      	movs	r2, #1
 80004e6:	739a      	strb	r2, [r3, #14]
	I2C_Handler->I2C_Config.FMDutyCycle = I2C_FM_DUTY_2;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2200      	movs	r2, #0
 80004ec:	73da      	strb	r2, [r3, #15]
	I2C_Handler->I2C_Config.SCLSpeed = I2C_SCL_SPEED_SM;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2200      	movs	r2, #0
 80004f2:	731a      	strb	r2, [r3, #12]
	I2C_Handler->I2C_Config.DeviceAddress = MY_ADDR;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2261      	movs	r2, #97	; 0x61
 80004f8:	735a      	strb	r2, [r3, #13]

	I2C_DeInit(I2C_Handler->pI2Cx);
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fa00 	bl	8000904 <I2C_DeInit>
	I2C_Init(I2C_Handler);
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f000 f92d 	bl	8000764 <I2C_Init>
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40005400 	.word	0x40005400

08000518 <delay>:

void delay() {
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
	for (uint32_t i; i < 5000000; i++);
 800051e:	e002      	b.n	8000526 <delay+0xe>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	3301      	adds	r3, #1
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4a04      	ldr	r2, [pc, #16]	; (800053c <delay+0x24>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d9f8      	bls.n	8000520 <delay+0x8>
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	004c4b3f 	.word	0x004c4b3f

08000540 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]
 8000550:	e00a      	b.n	8000568 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000552:	f3af 8000 	nop.w
 8000556:	4601      	mov	r1, r0
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	1c5a      	adds	r2, r3, #1
 800055c:	60ba      	str	r2, [r7, #8]
 800055e:	b2ca      	uxtb	r2, r1
 8000560:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3301      	adds	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
 8000568:	697a      	ldr	r2, [r7, #20]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	dbf0      	blt.n	8000552 <_read+0x12>
	}

return len;
 8000570:	687b      	ldr	r3, [r7, #4]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	b086      	sub	sp, #24
 800057e:	af00      	add	r7, sp, #0
 8000580:	60f8      	str	r0, [r7, #12]
 8000582:	60b9      	str	r1, [r7, #8]
 8000584:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000586:	2300      	movs	r3, #0
 8000588:	617b      	str	r3, [r7, #20]
 800058a:	e009      	b.n	80005a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	1c5a      	adds	r2, r3, #1
 8000590:	60ba      	str	r2, [r7, #8]
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4618      	mov	r0, r3
 8000596:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800059a:	697b      	ldr	r3, [r7, #20]
 800059c:	3301      	adds	r3, #1
 800059e:	617b      	str	r3, [r7, #20]
 80005a0:	697a      	ldr	r2, [r7, #20]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	dbf1      	blt.n	800058c <_write+0x12>
	}
	return len;
 80005a8:	687b      	ldr	r3, [r7, #4]
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3718      	adds	r7, #24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <_close>:

int _close(int file)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
	return -1;
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005da:	605a      	str	r2, [r3, #4]
	return 0;
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <_isatty>:

int _isatty(int file)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
	return 1;
 80005f2:	2301      	movs	r3, #1
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	607a      	str	r2, [r7, #4]
	return 0;
 800060c:	2300      	movs	r3, #0
}
 800060e:	4618      	mov	r0, r3
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
	...

0800061c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <_sbrk+0x50>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d102      	bne.n	8000632 <_sbrk+0x16>
		heap_end = &end;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <_sbrk+0x50>)
 800062e:	4a10      	ldr	r2, [pc, #64]	; (8000670 <_sbrk+0x54>)
 8000630:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <_sbrk+0x50>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <_sbrk+0x50>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4413      	add	r3, r2
 8000640:	466a      	mov	r2, sp
 8000642:	4293      	cmp	r3, r2
 8000644:	d907      	bls.n	8000656 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000646:	f001 f97b 	bl	8001940 <__errno>
 800064a:	4602      	mov	r2, r0
 800064c:	230c      	movs	r3, #12
 800064e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000650:	f04f 33ff 	mov.w	r3, #4294967295
 8000654:	e006      	b.n	8000664 <_sbrk+0x48>
	}

	heap_end += incr;
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <_sbrk+0x50>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4413      	add	r3, r2
 800065e:	4a03      	ldr	r2, [pc, #12]	; (800066c <_sbrk+0x50>)
 8000660:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000662:	68fb      	ldr	r3, [r7, #12]
}
 8000664:	4618      	mov	r0, r3
 8000666:	3710      	adds	r7, #16
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000084 	.word	0x20000084
 8000670:	200000b8 	.word	0x200000b8

08000674 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000674:	480d      	ldr	r0, [pc, #52]	; (80006ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000676:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000678:	480d      	ldr	r0, [pc, #52]	; (80006b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800067a:	490e      	ldr	r1, [pc, #56]	; (80006b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800067c:	4a0e      	ldr	r2, [pc, #56]	; (80006b8 <LoopForever+0xe>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000680:	e002      	b.n	8000688 <LoopCopyDataInit>

08000682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000686:	3304      	adds	r3, #4

08000688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800068c:	d3f9      	bcc.n	8000682 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068e:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000690:	4c0b      	ldr	r4, [pc, #44]	; (80006c0 <LoopForever+0x16>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000694:	e001      	b.n	800069a <LoopFillZerobss>

08000696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000698:	3204      	adds	r2, #4

0800069a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800069c:	d3fb      	bcc.n	8000696 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800069e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80006a2:	f001 f953 	bl	800194c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006a6:	f7ff fdf3 	bl	8000290 <main>

080006aa <LoopForever>:

LoopForever:
    b LoopForever
 80006aa:	e7fe      	b.n	80006aa <LoopForever>
  ldr   r0, =_estack
 80006ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006b8:	08002850 	.word	0x08002850
  ldr r2, =_sbss
 80006bc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006c0:	200000b4 	.word	0x200000b4

080006c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c4:	e7fe      	b.n	80006c4 <ADC_IRQHandler>
	...

080006c8 <I2C_PeriClkCtrl>:
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void I2C_PeriClkCtrl(I2C_Reg_t* pI2Cx, uint8_t EnOrDi) {
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	460b      	mov	r3, r1
 80006d2:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 80006d4:	78fb      	ldrb	r3, [r7, #3]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d01c      	beq.n	8000714 <I2C_PeriClkCtrl+0x4c>
		I2Cx_PCLK_EN(pI2Cx); //Go to I2Cx_PCLK_EN macro for more details
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a1e      	ldr	r2, [pc, #120]	; (8000758 <I2C_PeriClkCtrl+0x90>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d106      	bne.n	80006f0 <I2C_PeriClkCtrl+0x28>
 80006e2:	4b1e      	ldr	r3, [pc, #120]	; (800075c <I2C_PeriClkCtrl+0x94>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	4a1d      	ldr	r2, [pc, #116]	; (800075c <I2C_PeriClkCtrl+0x94>)
 80006e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ec:	6413      	str	r3, [r2, #64]	; 0x40
	} else {
		I2Cx_PCLK_DI(pI2Cx); //Go to I2Cx_PCLK_DI macro for more details
	}
}
 80006ee:	e02d      	b.n	800074c <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_EN(pI2Cx); //Go to I2Cx_PCLK_EN macro for more details
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a1b      	ldr	r2, [pc, #108]	; (8000760 <I2C_PeriClkCtrl+0x98>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d106      	bne.n	8000706 <I2C_PeriClkCtrl+0x3e>
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <I2C_PeriClkCtrl+0x94>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	4a17      	ldr	r2, [pc, #92]	; (800075c <I2C_PeriClkCtrl+0x94>)
 80006fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000702:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000704:	e022      	b.n	800074c <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_EN(pI2Cx); //Go to I2Cx_PCLK_EN macro for more details
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <I2C_PeriClkCtrl+0x94>)
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	4a14      	ldr	r2, [pc, #80]	; (800075c <I2C_PeriClkCtrl+0x94>)
 800070c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000710:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000712:	e01b      	b.n	800074c <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_DI(pI2Cx); //Go to I2Cx_PCLK_DI macro for more details
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4a10      	ldr	r2, [pc, #64]	; (8000758 <I2C_PeriClkCtrl+0x90>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d106      	bne.n	800072a <I2C_PeriClkCtrl+0x62>
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <I2C_PeriClkCtrl+0x94>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a0e      	ldr	r2, [pc, #56]	; (800075c <I2C_PeriClkCtrl+0x94>)
 8000722:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000726:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000728:	e010      	b.n	800074c <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_DI(pI2Cx); //Go to I2Cx_PCLK_DI macro for more details
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <I2C_PeriClkCtrl+0x98>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d106      	bne.n	8000740 <I2C_PeriClkCtrl+0x78>
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <I2C_PeriClkCtrl+0x94>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	4a09      	ldr	r2, [pc, #36]	; (800075c <I2C_PeriClkCtrl+0x94>)
 8000738:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800073c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800073e:	e005      	b.n	800074c <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_DI(pI2Cx); //Go to I2Cx_PCLK_DI macro for more details
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <I2C_PeriClkCtrl+0x94>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	4a05      	ldr	r2, [pc, #20]	; (800075c <I2C_PeriClkCtrl+0x94>)
 8000746:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800074a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	40005400 	.word	0x40005400
 800075c:	40023800 	.word	0x40023800
 8000760:	40005800 	.word	0x40005800

08000764 <I2C_Init>:
 * 						  and port
 *
 * @return				- none
 * @note				- none
 */
void I2C_Init(I2C_Handle_t* pI2CHandler) {
 8000764:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000768:	b088      	sub	sp, #32
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]

	uint16_t ccr_value;
	uint32_t APB1ClkFreq;
	uint64_t temp;
	temp = 0;
 800076e:	f04f 0300 	mov.w	r3, #0
 8000772:	f04f 0400 	mov.w	r4, #0
 8000776:	e9c7 3404 	strd	r3, r4, [r7, #16]

	//Enable the peripheral clock
	I2C_PeriClkCtrl(pI2CHandler->pI2Cx, ENABLE);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2101      	movs	r1, #1
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffa1 	bl	80006c8 <I2C_PeriClkCtrl>
	//Clock stretching is enabled by default in slave mode. To disable it,
	//configure the I2C_CR1 register bit 7.

	//Select the peripheral clock frequency
	//The other bits are ignored and set to 0 by default
	APB1ClkFreq = getAPB1ClkFreq();
 8000786:	f000 fc3f 	bl	8001008 <getAPB1ClkFreq>
 800078a:	60f8      	str	r0, [r7, #12]
	pI2CHandler->pI2Cx->CR2 |= (APB1ClkFreq / 1000000U) & 0x3F;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	6859      	ldr	r1, [r3, #4]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	4a53      	ldr	r2, [pc, #332]	; (80008e4 <I2C_Init+0x180>)
 8000796:	fba2 2303 	umull	r2, r3, r2, r3
 800079a:	0c9b      	lsrs	r3, r3, #18
 800079c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	430a      	orrs	r2, r1
 80007a6:	605a      	str	r2, [r3, #4]
	//I2C1->CR2 |= (APB1ClkFreq / 1000000U) & 0x3F;
	//You may have option to configure the addressing mode in the I2C_OAR1
	//register. However, we don't implement that as part of the configuration
	//option in I2C. If you so wish to do it, implement that yourself!!!
	pI2CHandler->pI2Cx->OAR1 |= (pI2CHandler->I2C_Config.DeviceAddress << 1) & 0xFF;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	6899      	ldr	r1, [r3, #8]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	7b5b      	ldrb	r3, [r3, #13]
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	430a      	orrs	r2, r1
 80007bc:	609a      	str	r2, [r3, #8]

	//SPECIAL NOTE: Bit 14 of I2C_OAR1 register should be on kept at 1
	//by the software. Reason: I don't know, figure it out if you can.
	pI2CHandler->pI2Cx->OAR1 |= (1 << 14U);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	689a      	ldr	r2, [r3, #8]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80007cc:	609a      	str	r2, [r3, #8]

	//Configure the SCL clock frequencies depending on the mode
	//standard mode/Fast mode and duty cycle bit
	temp |= pI2CHandler->I2C_Config.SCLSpeed << I2C_CCR_F_S;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	7b1b      	ldrb	r3, [r3, #12]
 80007d2:	03db      	lsls	r3, r3, #15
 80007d4:	469b      	mov	fp, r3
 80007d6:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80007da:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80007de:	ea4b 0301 	orr.w	r3, fp, r1
 80007e2:	ea4c 0402 	orr.w	r4, ip, r2
 80007e6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	temp |= pI2CHandler->I2C_Config.FMDutyCycle << I2C_CCR_DUTY;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	7bdb      	ldrb	r3, [r3, #15]
 80007ee:	039b      	lsls	r3, r3, #14
 80007f0:	469b      	mov	fp, r3
 80007f2:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80007f6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80007fa:	ea4b 0301 	orr.w	r3, fp, r1
 80007fe:	ea4c 0402 	orr.w	r4, ip, r2
 8000802:	e9c7 3404 	strd	r3, r4, [r7, #16]

	//Given: T(High) + T(Low) = T(I2C_SCL_SPEED)
	//T_I2C_SCL_SPEED = (float) 1 / I2C_SCL_SPEED(pI2CHandler->I2C_Config.SCLSpeed);
	//T_APB1ClkFreq	= (float) 1 / APB1ClkFreq;
	if (pI2CHandler->pI2Cx->CCR & (1 << I2C_CCR_F_S)) { //Fast mode
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	69db      	ldr	r3, [r3, #28]
 800080c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000810:	2b00      	cmp	r3, #0
 8000812:	d01e      	beq.n	8000852 <I2C_Init+0xee>
		if (pI2CHandler->pI2Cx->CCR & (1 << I2C_CCR_DUTY)) { //To reach 400khz
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	69db      	ldr	r3, [r3, #28]
 800081a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081e:	2b00      	cmp	r3, #0
 8000820:	d00b      	beq.n	800083a <I2C_Init+0xd6>
			/*	Calculation: T(High) = 9 * CCR * T(PCLK1)
			 *		   		 T(Low) = 16 * CCR * T(PCLK1)
			 *			     T(High) + T(Low) = 25 * CCR * T(PCLK1)
			 *			     CCR = (T(High) + T(Low)) / (25 * T(PCLK1))
			 */
			ccr_value = APB1ClkFreq / (25 * (I2C_SCL_SPEED(pI2CHandler->I2C_Config.SCLSpeed)));
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	7b1b      	ldrb	r3, [r3, #12]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d101      	bne.n	800082e <I2C_Init+0xca>
 800082a:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <I2C_Init+0x184>)
 800082c:	e000      	b.n	8000830 <I2C_Init+0xcc>
 800082e:	4b2f      	ldr	r3, [pc, #188]	; (80008ec <I2C_Init+0x188>)
 8000830:	68fa      	ldr	r2, [r7, #12]
 8000832:	fbb2 f3f3 	udiv	r3, r2, r3
 8000836:	83fb      	strh	r3, [r7, #30]
 8000838:	e016      	b.n	8000868 <I2C_Init+0x104>
			/*	Calculation: T(High) = 1 * CCR * T(PCLK1)
			 *		   		 T(Low) = 2 * CCR * T(PCLK1)
			 *			     T(High) + T(Low) = 3 * CCR * T(PCLK1)
			 *			     CCR = (T(High) + T(Low)) / (3 * T(PCLK1))
			 */
			ccr_value = APB1ClkFreq / (3 * (I2C_SCL_SPEED(pI2CHandler->I2C_Config.SCLSpeed)));
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	7b1b      	ldrb	r3, [r3, #12]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d101      	bne.n	8000846 <I2C_Init+0xe2>
 8000842:	4b2b      	ldr	r3, [pc, #172]	; (80008f0 <I2C_Init+0x18c>)
 8000844:	e000      	b.n	8000848 <I2C_Init+0xe4>
 8000846:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <I2C_Init+0x190>)
 8000848:	68fa      	ldr	r2, [r7, #12]
 800084a:	fbb2 f3f3 	udiv	r3, r2, r3
 800084e:	83fb      	strh	r3, [r7, #30]
 8000850:	e00a      	b.n	8000868 <I2C_Init+0x104>
		/*	Calculation: T(High) = CCR * T(PCLK1)
		 *		   		 T(Low) =   CCR * T(PCLK1)
		 *			     T(High) + T(Low) = 2 * CCR * T(PCLK1)
		 *			     CCR = (T(High) + T(Low)) / (2 * T(PCLK1))
		 */
		ccr_value = APB1ClkFreq / (2 * (I2C_SCL_SPEED(pI2CHandler->I2C_Config.SCLSpeed)));
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	7b1b      	ldrb	r3, [r3, #12]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d101      	bne.n	800085e <I2C_Init+0xfa>
 800085a:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <I2C_Init+0x194>)
 800085c:	e000      	b.n	8000860 <I2C_Init+0xfc>
 800085e:	4b27      	ldr	r3, [pc, #156]	; (80008fc <I2C_Init+0x198>)
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	fbb2 f3f3 	udiv	r3, r2, r3
 8000866:	83fb      	strh	r3, [r7, #30]
	}
	temp |= (ccr_value & 0xFFF);
 8000868:	8bfb      	ldrh	r3, [r7, #30]
 800086a:	f04f 0400 	mov.w	r4, #0
 800086e:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000872:	f04f 0200 	mov.w	r2, #0
 8000876:	ea03 0b01 	and.w	fp, r3, r1
 800087a:	ea04 0c02 	and.w	ip, r4, r2
 800087e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000882:	ea4b 0301 	orr.w	r3, fp, r1
 8000886:	ea4c 0402 	orr.w	r4, ip, r2
 800088a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	pI2CHandler->pI2Cx->CCR = temp;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	61da      	str	r2, [r3, #28]

	//Clear the TRISE reg
	pI2CHandler->pI2Cx->TRISE &= ~((int) 1);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	6a1a      	ldr	r2, [r3, #32]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f022 0201 	bic.w	r2, r2, #1
 80008a4:	621a      	str	r2, [r3, #32]

	//Configure the Rise Time (TRISE)
	temp = APB1ClkFreq * (I2C_T_RISE(pI2CHandler->I2C_Config.SCLSpeed)) / (10000000U);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	7b1b      	ldrb	r3, [r3, #12]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d101      	bne.n	80008b2 <I2C_Init+0x14e>
 80008ae:	2303      	movs	r3, #3
 80008b0:	e000      	b.n	80008b4 <I2C_Init+0x150>
 80008b2:	230a      	movs	r3, #10
 80008b4:	68fa      	ldr	r2, [r7, #12]
 80008b6:	fb02 f303 	mul.w	r3, r2, r3
 80008ba:	4a11      	ldr	r2, [pc, #68]	; (8000900 <I2C_Init+0x19c>)
 80008bc:	fba2 2303 	umull	r2, r3, r2, r3
 80008c0:	0d9b      	lsrs	r3, r3, #22
 80008c2:	f04f 0400 	mov.w	r4, #0
 80008c6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	pI2CHandler->pI2Cx->TRISE = (temp + 1) & 0x3F;
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	1c5a      	adds	r2, r3, #1
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008d6:	621a      	str	r2, [r3, #32]

}
 80008d8:	bf00      	nop
 80008da:	3720      	adds	r7, #32
 80008dc:	46bd      	mov	sp, r7
 80008de:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80008e2:	bf00      	nop
 80008e4:	431bde83 	.word	0x431bde83
 80008e8:	00989680 	.word	0x00989680
 80008ec:	002625a0 	.word	0x002625a0
 80008f0:	00124f80 	.word	0x00124f80
 80008f4:	000493e0 	.word	0x000493e0
 80008f8:	000c3500 	.word	0x000c3500
 80008fc:	00030d40 	.word	0x00030d40
 8000900:	6b5fca6b 	.word	0x6b5fca6b

08000904 <I2C_DeInit>:
 * @param[in]			- Base address of the specific SPI peripherals (SPI_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- The implementation so far only covers only 3 I2C ports
 */
void I2C_DeInit(I2C_Reg_t* pI2Cx) {
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	if (pI2Cx == I2C1) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a19      	ldr	r2, [pc, #100]	; (8000974 <I2C_DeInit+0x70>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d10c      	bne.n	800092e <I2C_DeInit+0x2a>
		I2C1_PCLK_RST();
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <I2C_DeInit+0x74>)
 8000916:	6a1b      	ldr	r3, [r3, #32]
 8000918:	4a17      	ldr	r2, [pc, #92]	; (8000978 <I2C_DeInit+0x74>)
 800091a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800091e:	6213      	str	r3, [r2, #32]
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <I2C_DeInit+0x74>)
 8000922:	6a1b      	ldr	r3, [r3, #32]
 8000924:	4a14      	ldr	r2, [pc, #80]	; (8000978 <I2C_DeInit+0x74>)
 8000926:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800092a:	6213      	str	r3, [r2, #32]
	} else if (pI2Cx == I2C2) {
		I2C2_PCLK_RST();
	} else {
		I2C3_PCLK_RST();
	}
}
 800092c:	e01c      	b.n	8000968 <I2C_DeInit+0x64>
	} else if (pI2Cx == I2C2) {
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a12      	ldr	r2, [pc, #72]	; (800097c <I2C_DeInit+0x78>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d10c      	bne.n	8000950 <I2C_DeInit+0x4c>
		I2C2_PCLK_RST();
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <I2C_DeInit+0x74>)
 8000938:	6a1b      	ldr	r3, [r3, #32]
 800093a:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <I2C_DeInit+0x74>)
 800093c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000940:	6213      	str	r3, [r2, #32]
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <I2C_DeInit+0x74>)
 8000944:	6a1b      	ldr	r3, [r3, #32]
 8000946:	4a0c      	ldr	r2, [pc, #48]	; (8000978 <I2C_DeInit+0x74>)
 8000948:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800094c:	6213      	str	r3, [r2, #32]
}
 800094e:	e00b      	b.n	8000968 <I2C_DeInit+0x64>
		I2C3_PCLK_RST();
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <I2C_DeInit+0x74>)
 8000952:	6a1b      	ldr	r3, [r3, #32]
 8000954:	4a08      	ldr	r2, [pc, #32]	; (8000978 <I2C_DeInit+0x74>)
 8000956:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800095a:	6213      	str	r3, [r2, #32]
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <I2C_DeInit+0x74>)
 800095e:	6a1b      	ldr	r3, [r3, #32]
 8000960:	4a05      	ldr	r2, [pc, #20]	; (8000978 <I2C_DeInit+0x74>)
 8000962:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000966:	6213      	str	r3, [r2, #32]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	40005400 	.word	0x40005400
 8000978:	40023800 	.word	0x40023800
 800097c:	40005800 	.word	0x40005800

08000980 <I2C_PeripheralEnable>:
 * @param[in]			= ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void I2C_PeripheralEnable(I2C_Reg_t* pI2Cx, uint8_t EnOrDi) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 800098c:	78fb      	ldrb	r3, [r7, #3]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d00a      	beq.n	80009a8 <I2C_PeripheralEnable+0x28>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f043 0201 	orr.w	r2, r3, #1
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	601a      	str	r2, [r3, #0]

		//Enable the Acknowledge bit
		ctrlBitACK(pI2Cx, ENABLE);
 800099e:	2101      	movs	r1, #1
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 fbf1 	bl	8001188 <ctrlBitACK>
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE); //clearing PE also clears ACK
	}
}
 80009a6:	e005      	b.n	80009b4 <I2C_PeripheralEnable+0x34>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE); //clearing PE also clears ACK
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f023 0201 	bic.w	r2, r3, #1
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	601a      	str	r2, [r3, #0]
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <I2C_CheckStatusFlag>:
 * @param[in]			- the status flag
 *
 * @return				- none
 * @note				- none
 */
uint8_t I2C_CheckStatusFlag(__vo uint32_t* statusReg, uint16_t flag) {
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	807b      	strh	r3, [r7, #2]
	if ((*statusReg) & flag) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	887b      	ldrh	r3, [r7, #2]
 80009ce:	4013      	ands	r3, r2
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <I2C_CheckStatusFlag+0x1c>
		return FLAG_SET;
 80009d4:	2301      	movs	r3, #1
 80009d6:	e000      	b.n	80009da <I2C_CheckStatusFlag+0x1e>
	}
	return FLAG_RESET;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <I2C_IRQITConfig>:
 * @param[in]			= ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- Refer to the Cortex M4 Generic User Guide the NVIC register table
 */
void I2C_IRQITConfig(uint8_t IRQNumber, uint8_t EnOrDi) {
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	460a      	mov	r2, r1
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	4613      	mov	r3, r2
 80009f6:	71bb      	strb	r3, [r7, #6]
	//In order to trigger the interrupt on the processor side,
	//configuration enable on the ISER of the NVIC is needed
	//Note: There are 7 different NVIC_ISER and NVIC_ICER register
	//at certain range
	uint32_t indx, remainder;
	indx = IRQNumber >> 5U; //Index to configure the correct NVIC_ISER
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	095b      	lsrs	r3, r3, #5
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	60fb      	str	r3, [r7, #12]
	if (indx >= 0U  && indx <= 7U) {
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2b07      	cmp	r3, #7
 8000a04:	d82b      	bhi.n	8000a5e <I2C_IRQITConfig+0x76>
		remainder = IRQNumber & (~(~(int)0 << 5U)); //find the remainder
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	f003 031f 	and.w	r3, r3, #31
 8000a0c:	60bb      	str	r3, [r7, #8]
		if (EnOrDi) {
 8000a0e:	79bb      	ldrb	r3, [r7, #6]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d014      	beq.n	8000a3e <I2C_IRQITConfig+0x56>
			NVIC_ISER(indx) |= 1 << remainder; //See NVIC_ISER(__INDEX__) declaration for more implementation details
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000a1c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	2101      	movs	r1, #1
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000a34:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	601a      	str	r2, [r3, #0]
		} else {
			NVIC_ICER(indx) |= 1 << remainder; //See NVIC_ICER(__INDEX__) declaration for more implementation details
		}
	}
}
 8000a3c:	e00f      	b.n	8000a5e <I2C_IRQITConfig+0x76>
			NVIC_ICER(indx) |= 1 << remainder; //See NVIC_ICER(__INDEX__) declaration for more implementation details
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	009a      	lsls	r2, r3, #2
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <I2C_IRQITConfig+0x84>)
 8000a44:	4413      	add	r3, r2
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	2101      	movs	r1, #1
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a50:	4618      	mov	r0, r3
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	0099      	lsls	r1, r3, #2
 8000a56:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <I2C_IRQITConfig+0x84>)
 8000a58:	440b      	add	r3, r1
 8000a5a:	4302      	orrs	r2, r0
 8000a5c:	601a      	str	r2, [r3, #0]
}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000e180 	.word	0xe000e180

08000a70 <I2C_MasterSendDataIT>:
 *
 * @return				- I2C current state
 * @note				- This is the non-blocking API
 */
uint8_t I2C_MasterSendDataIT(I2C_Handle_t* pI2CHandler, uint8_t* pTxBuffer, uint32_t len,
						uint8_t pSlaveAddress, uint8_t repeatedStart) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	70fb      	strb	r3, [r7, #3]
	uint8_t state;
	state = pI2CHandler->TxRxState;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	7f1b      	ldrb	r3, [r3, #28]
 8000a82:	75fb      	strb	r3, [r7, #23]

	//Since I2C bus is bidirectional, only transmit when the bus is in ready state
	if (state != I2C_BUSY_IN_TX && state != I2C_BUSY_IN_RX) {
 8000a84:	7dfb      	ldrb	r3, [r7, #23]
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d02f      	beq.n	8000aea <I2C_MasterSendDataIT+0x7a>
 8000a8a:	7dfb      	ldrb	r3, [r7, #23]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d02c      	beq.n	8000aea <I2C_MasterSendDataIT+0x7a>

		//Storing the arguments globally in the I2C Handle structure
		pI2CHandler->TxLen = len;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	611a      	str	r2, [r3, #16]
		pI2CHandler->pTxBuffer = pTxBuffer;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	68ba      	ldr	r2, [r7, #8]
 8000a9a:	605a      	str	r2, [r3, #4]
		pI2CHandler->DeviceAddr = pSlaveAddress;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	78fa      	ldrb	r2, [r7, #3]
 8000aa0:	779a      	strb	r2, [r3, #30]
		pI2CHandler->RepeatedStart = repeatedStart;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000aa8:	775a      	strb	r2, [r3, #29]

		//Mark the I2C bus as busy in transmitting so that other master
		//cannot take over the same bus (avoid arbitration error)
		pI2CHandler->TxRxState = I2C_BUSY_IN_TX;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	2202      	movs	r2, #2
 8000aae:	771a      	strb	r2, [r3, #28]

		//Generate the Start condition
		generateStartCondition(pI2CHandler->pI2Cx);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 fb19 	bl	80010ec <generateStartCondition>

		//Enable the event interrupt control bit for transmitting
		pI2CHandler->pI2Cx->CR2 |= 1 << I2C_CR2_ITBUFEN;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	685a      	ldr	r2, [r3, #4]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ac8:	605a      	str	r2, [r3, #4]

		//Enable the event interrupt control bit
		pI2CHandler->pI2Cx->CR2 |= 1 << I2C_CR2_ITEVTEN;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	685a      	ldr	r2, [r3, #4]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ad8:	605a      	str	r2, [r3, #4]

		//Enable the error interrupt control bit to inform
		//the error back the user application, which is one of the main responsibily
		//for writing the driver
		pI2CHandler->pI2Cx->CR2 |= 1 << I2C_CR2_ITERREN;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	685a      	ldr	r2, [r3, #4]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ae8:	605a      	str	r2, [r3, #4]
	}

	return state;
 8000aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <I2C_MasterReceiveDataIT>:
 *
 * @return				- I2C current state
 * @note				- This is the non-blocking API
 */
uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t* pI2CHandler, uint8_t* pRxBuffer, uint32_t len,
		 	 	 	 	     uint8_t pSlaveAddress, uint8_t repeatedStart) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
 8000b00:	70fb      	strb	r3, [r7, #3]
	uint8_t state;
	state = pI2CHandler->TxRxState;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	7f1b      	ldrb	r3, [r3, #28]
 8000b06:	75fb      	strb	r3, [r7, #23]

	//check to see whether device is in ready state
	if (state != I2C_BUSY_IN_RX && state != I2C_BUSY_IN_TX) {
 8000b08:	7dfb      	ldrb	r3, [r7, #23]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d032      	beq.n	8000b74 <I2C_MasterReceiveDataIT+0x80>
 8000b0e:	7dfb      	ldrb	r3, [r7, #23]
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d02f      	beq.n	8000b74 <I2C_MasterReceiveDataIT+0x80>

		//Transfer device information to the I2C Handle structure
		pI2CHandler->RxLen = len;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	615a      	str	r2, [r3, #20]
		pI2CHandler->pRxBuffer = pRxBuffer;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	68ba      	ldr	r2, [r7, #8]
 8000b1e:	609a      	str	r2, [r3, #8]
		pI2CHandler->RxSize	   = len;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	619a      	str	r2, [r3, #24]
		pI2CHandler->DeviceAddr = pSlaveAddress;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	78fa      	ldrb	r2, [r7, #3]
 8000b2a:	779a      	strb	r2, [r3, #30]
		pI2CHandler->RepeatedStart = repeatedStart;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000b32:	775a      	strb	r2, [r3, #29]

		//Mark the current state as busy in transmitting
		//Note: in I2C, the BUSY bit is set and clear by hardware
		//automaticallly. Thus, to keep track of the current state,
		//it's best to define the state macros
		pI2CHandler->TxRxState = I2C_BUSY_IN_RX;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	2201      	movs	r2, #1
 8000b38:	771a      	strb	r2, [r3, #28]

		//Generate the start condition
		generateStartCondition(pI2CHandler->pI2Cx);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 fad4 	bl	80010ec <generateStartCondition>

		//Enable the event interrupt control bit for receiving data
		pI2CHandler->pI2Cx->CR2 |= 1 << I2C_CR2_ITBUFEN;
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b52:	605a      	str	r2, [r3, #4]

		//Enable the event interrupt control bit
		pI2CHandler->pI2Cx->CR2 |= 1 << I2C_CR2_ITEVTEN;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	685a      	ldr	r2, [r3, #4]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b62:	605a      	str	r2, [r3, #4]

		//Enable the error interrupt control bit in the event
		//that error such as overrrun occurs in data reception
		pI2CHandler->pI2Cx->CR2 |= 1 << I2C_CR2_ITERREN;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	685a      	ldr	r2, [r3, #4]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b72:	605a      	str	r2, [r3, #4]
	}
	return state;
 8000b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <I2C_EV_IRQHandling>:
 *
 * @return				- none
 * @note				- In this function, you need to cover the case for both master AND slave
 *						  since I2C is half-duplex in STM32
 */
void I2C_EV_IRQHandling(I2C_Handle_t* pI2CHandler) {
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b086      	sub	sp, #24
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
	//Interrupt handling for both master and slave mode of a device

		uint32_t temp, temp1, temp2;
		I2C_Reg_t* pI2Cx = pI2CHandler->pI2Cx;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	617b      	str	r3, [r7, #20]

		//Check status of the event interrupt control bit
		temp1 = (pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN)) >> I2C_CR2_ITBUFEN;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	0a9b      	lsrs	r3, r3, #10
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	613b      	str	r3, [r7, #16]
		temp2 = (pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN)) >> I2C_CR2_ITEVTEN;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	0a5b      	lsrs	r3, r3, #9
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]

/****************************************SB_EVENT_INTERRUPT*****************************************/
		temp  = pI2CHandler->pI2Cx->SR1 & ( 1 << I2C_SR1_SB);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	60bb      	str	r3, [r7, #8]
		//1. Handle For interrupt generated by SB event
		//	Note : SB flag is only applicable in Master mode
		//Handle for interrupt generated by SB event
		//Note: SB flag is only applicable in master mode
		//temp  = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_SB);
		if (temp && temp2) {
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d023      	beq.n	8000bfe <I2C_EV_IRQHandling+0x80>
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d020      	beq.n	8000bfe <I2C_EV_IRQHandling+0x80>
			if (I2C_CheckStatusFlag(&pI2Cx->SR2, I2C_FLAG_SR2_SML)) { //master mode
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	3318      	adds	r3, #24
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fefa 	bl	80009bc <I2C_CheckStatusFlag>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d017      	beq.n	8000bfe <I2C_EV_IRQHandling+0x80>
				clearFlagSB(pI2Cx);
 8000bce:	6978      	ldr	r0, [r7, #20]
 8000bd0:	f000 faac 	bl	800112c <clearFlagSB>
				if (pI2CHandler->TxRxState == I2C_BUSY_IN_TX) { //busy in transmission
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	7f1b      	ldrb	r3, [r3, #28]
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d106      	bne.n	8000bea <I2C_EV_IRQHandling+0x6c>
					//clear the SB bit by reading the SR1 register
					//AND writing slave address to the DR with r/w bit low
					sendAddressToSlaveWrite(pI2Cx, pI2CHandler->DeviceAddr);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	7f9b      	ldrb	r3, [r3, #30]
 8000be0:	4619      	mov	r1, r3
 8000be2:	6978      	ldr	r0, [r7, #20]
 8000be4:	f000 fb08 	bl	80011f8 <sendAddressToSlaveWrite>
 8000be8:	e009      	b.n	8000bfe <I2C_EV_IRQHandling+0x80>

				} else if (pI2CHandler->TxRxState == I2C_BUSY_IN_RX) { //busy in reception
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	7f1b      	ldrb	r3, [r3, #28]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d105      	bne.n	8000bfe <I2C_EV_IRQHandling+0x80>
					//Write slave address to DR with r/w bit high
					sendAddressToSlaveRead(pI2Cx, pI2CHandler->DeviceAddr);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	7f9b      	ldrb	r3, [r3, #30]
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	6978      	ldr	r0, [r7, #20]
 8000bfa:	f000 fb0e 	bl	800121a <sendAddressToSlaveRead>

/***************************************ADDR_EVENT_INTERRUPT******************************************/
		//Handle interrupt generated by ADDR event
		//Note: When device is in master mode, the Address is sent
		//		When device is in slave mode, address matched with its own address
		temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_ADDR);
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	3314      	adds	r3, #20
 8000c02:	2102      	movs	r1, #2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fed9 	bl	80009bc <I2C_CheckStatusFlag>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	60bb      	str	r3, [r7, #8]
		//temp = (pI2Cx->SR1 & ( 1 << I2C_SR1_ADDR)) >> I2C_SR1_ADDR;
		if (temp && temp2) {
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d02b      	beq.n	8000c6c <I2C_EV_IRQHandling+0xee>
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d028      	beq.n	8000c6c <I2C_EV_IRQHandling+0xee>
			if (I2C_CheckStatusFlag(&pI2Cx->SR2, I2C_FLAG_SR2_SML)) { //master mode
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3318      	adds	r3, #24
 8000c1e:	2101      	movs	r1, #1
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fecb 	bl	80009bc <I2C_CheckStatusFlag>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d01f      	beq.n	8000c6c <I2C_EV_IRQHandling+0xee>
				if (pI2CHandler->TxRxState == I2C_BUSY_IN_TX) { //busy in transmission
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	7f1b      	ldrb	r3, [r3, #28]
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d103      	bne.n	8000c3c <I2C_EV_IRQHandling+0xbe>

					//As soon as the slave address is sent, the ADDR bit is set by HARDWARE
					//and an interrupt is generated if the ITEVFEN bit is set (which we don't cover in
					//this case). Clear this by reading SR1 register followed by reading SR2
					clearFlagADDR(pI2Cx);
 8000c34:	6978      	ldr	r0, [r7, #20]
 8000c36:	f000 fa86 	bl	8001146 <clearFlagADDR>
 8000c3a:	e017      	b.n	8000c6c <I2C_EV_IRQHandling+0xee>
				} else if (pI2CHandler->TxRxState == I2C_BUSY_IN_RX) {
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	7f1b      	ldrb	r3, [r3, #28]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d113      	bne.n	8000c6c <I2C_EV_IRQHandling+0xee>

					//In the even of having 1 byte reception, the Acknowledge bit must be disabled
					//in the EV6 before clearing the ADDR flag
					if (pI2CHandler->RxSize == 1) {
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d104      	bne.n	8000c56 <I2C_EV_IRQHandling+0xd8>
						ctrlBitACK(pI2Cx, DISABLE); //Disable ACK bit before clearing ADDR
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	6978      	ldr	r0, [r7, #20]
 8000c50:	f000 fa9a 	bl	8001188 <ctrlBitACK>
 8000c54:	e007      	b.n	8000c66 <I2C_EV_IRQHandling+0xe8>
					} else if (pI2CHandler->RxSize == 2) {
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d103      	bne.n	8000c66 <I2C_EV_IRQHandling+0xe8>
						ctrlBitPOS(pI2Cx, ENABLE); //enable POS bit before clearing ADDR
 8000c5e:	2101      	movs	r1, #1
 8000c60:	6978      	ldr	r0, [r7, #20]
 8000c62:	f000 faad 	bl	80011c0 <ctrlBitPOS>
					}

					//As soon as the slave address is sent, the ADDR bit is set by HARDWARE
					//and an interrupt is generated if the ITEVFEN bit is set (which we don't cover in
					//this case). Clear this by reading SR1 register followed by reading SR2
					clearFlagADDR(pI2Cx);
 8000c66:	6978      	ldr	r0, [r7, #20]
 8000c68:	f000 fa6d 	bl	8001146 <clearFlagADDR>
			}
		}

/***************************************BTF_EVENT_INTERRUPT*******************************************/
		//Handle for interrupt generate by BTF (Byte Transfer Finished) event
		temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_BTF);
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	3314      	adds	r3, #20
 8000c70:	2104      	movs	r1, #4
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fea2 	bl	80009bc <I2C_CheckStatusFlag>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	60bb      	str	r3, [r7, #8]
		if (temp && temp2) {
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d03f      	beq.n	8000d02 <I2C_EV_IRQHandling+0x184>
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d03c      	beq.n	8000d02 <I2C_EV_IRQHandling+0x184>
			if (I2C_CheckStatusFlag(&pI2Cx->SR2, I2C_FLAG_SR2_SML)) { //master mode
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	3318      	adds	r3, #24
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fe94 	bl	80009bc <I2C_CheckStatusFlag>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d033      	beq.n	8000d02 <I2C_EV_IRQHandling+0x184>
				if (I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_TXE)) { //the end of transmission
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	3314      	adds	r3, #20
 8000c9e:	2180      	movs	r1, #128	; 0x80
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fe8b 	bl	80009bc <I2C_CheckStatusFlag>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d012      	beq.n	8000cd2 <I2C_EV_IRQHandling+0x154>

					if (pI2CHandler->TxLen == 0) {
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	691b      	ldr	r3, [r3, #16]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d126      	bne.n	8000d02 <I2C_EV_IRQHandling+0x184>
						//Generate the stop condition
						if (!pI2CHandler->RepeatedStart) {
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	7f5b      	ldrb	r3, [r3, #29]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d102      	bne.n	8000cc2 <I2C_EV_IRQHandling+0x144>
							generateStopCondition(pI2Cx);
 8000cbc:	6978      	ldr	r0, [r7, #20]
 8000cbe:	f000 fa25 	bl	800110c <generateStopCondition>
						}

						//Close the transmission
						closeMasterTx(pI2CHandler);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f000 fabc 	bl	8001240 <closeMasterTx>

						//Application Call back
						I2C_ApplicationEventCallBack(pI2CHandler, I2C_EVT_TX_CMPLT);
 8000cc8:	2100      	movs	r1, #0
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff fb78 	bl	80003c0 <I2C_ApplicationEventCallBack>
 8000cd0:	e017      	b.n	8000d02 <I2C_EV_IRQHandling+0x184>
					}
				}
				else if (I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_RXNE)) { //the end of reception
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3314      	adds	r3, #20
 8000cd6:	2140      	movs	r1, #64	; 0x40
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff fe6f 	bl	80009bc <I2C_CheckStatusFlag>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d00e      	beq.n	8000d02 <I2C_EV_IRQHandling+0x184>
					if (pI2CHandler->RxLen == 2) {
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d10a      	bne.n	8000d02 <I2C_EV_IRQHandling+0x184>
						ctrlBitACK(pI2Cx, DISABLE);
 8000cec:	2100      	movs	r1, #0
 8000cee:	6978      	ldr	r0, [r7, #20]
 8000cf0:	f000 fa4a 	bl	8001188 <ctrlBitACK>
						//Generate the stop condition
						if (!pI2CHandler->RepeatedStart) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	7f5b      	ldrb	r3, [r3, #29]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <I2C_EV_IRQHandling+0x184>
							generateStopCondition(pI2Cx);
 8000cfc:	6978      	ldr	r0, [r7, #20]
 8000cfe:	f000 fa05 	bl	800110c <generateStopCondition>
		}
/***************************************STOPF_EVENT_INTERRUPT*****************************************/
		//Handle for interrupt generated by STOPF event
		//Note: Stop detection flag is applicable only in slave receiver mode.
		//		See datasheet for more details. For master, this flag will never be set
		temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_STOPF);
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	3314      	adds	r3, #20
 8000d06:	2110      	movs	r1, #16
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fe57 	bl	80009bc <I2C_CheckStatusFlag>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	60bb      	str	r3, [r7, #8]
		if (temp && temp2) {
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d012      	beq.n	8000d3e <I2C_EV_IRQHandling+0x1c0>
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d00f      	beq.n	8000d3e <I2C_EV_IRQHandling+0x1c0>

			if (!I2C_CheckStatusFlag(&pI2Cx->SR2, I2C_FLAG_SR2_SML)) { //slave mode
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	3318      	adds	r3, #24
 8000d22:	2101      	movs	r1, #1
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fe49 	bl	80009bc <I2C_CheckStatusFlag>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d106      	bne.n	8000d3e <I2C_EV_IRQHandling+0x1c0>
				clearFlagSTOPF(pI2Cx);
 8000d30:	6978      	ldr	r0, [r7, #20]
 8000d32:	f000 fa18 	bl	8001166 <clearFlagSTOPF>
				I2C_ApplicationEventCallBack(pI2CHandler, I2C_EVT_STOPF_CMPLT);
 8000d36:	2102      	movs	r1, #2
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff fb41 	bl	80003c0 <I2C_ApplicationEventCallBack>
			}
		}

/***************************************TXE_EVENT_INTERRUPT*******************************************/
		//Handle for interrupt generated by TXE event
		temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_TXE);
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3314      	adds	r3, #20
 8000d42:	2180      	movs	r1, #128	; 0x80
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fe39 	bl	80009bc <I2C_CheckStatusFlag>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	60bb      	str	r3, [r7, #8]
		if ((temp && temp1) && temp2) {
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d030      	beq.n	8000db6 <I2C_EV_IRQHandling+0x238>
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d02d      	beq.n	8000db6 <I2C_EV_IRQHandling+0x238>
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d02a      	beq.n	8000db6 <I2C_EV_IRQHandling+0x238>
			if (I2C_CheckStatusFlag(&pI2Cx->SR2, I2C_FLAG_SR2_SML)) { //Master mode
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	3318      	adds	r3, #24
 8000d64:	2101      	movs	r1, #1
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fe28 	bl	80009bc <I2C_CheckStatusFlag>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d014      	beq.n	8000d9c <I2C_EV_IRQHandling+0x21e>
				//Handle for transmission
				if (pI2CHandler->TxLen > 0) {
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d01d      	beq.n	8000db6 <I2C_EV_IRQHandling+0x238>
					pI2CHandler->pI2Cx->DR = *(pI2CHandler->pTxBuffer);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	781a      	ldrb	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	611a      	str	r2, [r3, #16]
					pI2CHandler->TxLen--;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	691b      	ldr	r3, [r3, #16]
 8000d8a:	1e5a      	subs	r2, r3, #1
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	611a      	str	r2, [r3, #16]
					pI2CHandler->pTxBuffer++;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	1c5a      	adds	r2, r3, #1
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	e00c      	b.n	8000db6 <I2C_EV_IRQHandling+0x238>
				}
			} else { //Slave mode
				if (I2C_CheckStatusFlag(&pI2Cx->SR2, I2C_FLAG_SR2_TRA)) { //transmitter mode
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	3318      	adds	r3, #24
 8000da0:	2104      	movs	r1, #4
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fe0a 	bl	80009bc <I2C_CheckStatusFlag>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <I2C_EV_IRQHandling+0x238>
					I2C_ApplicationEventCallBack(pI2CHandler, I2C_EVT_DATA_REQ);
 8000dae:	210a      	movs	r1, #10
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff fb05 	bl	80003c0 <I2C_ApplicationEventCallBack>
			}
		}
/***************************************RXNE_EVENT_INTERRUPT*******************************************/
		//Handle for interrupt generated by RXNE event
		//Handle for interrupt generated by TXE event
		temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_RXNE);
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3314      	adds	r3, #20
 8000dba:	2140      	movs	r1, #64	; 0x40
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fdfd 	bl	80009bc <I2C_CheckStatusFlag>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	60bb      	str	r3, [r7, #8]
		if ((temp && temp1) && temp2) {
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d03c      	beq.n	8000e46 <I2C_EV_IRQHandling+0x2c8>
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d039      	beq.n	8000e46 <I2C_EV_IRQHandling+0x2c8>
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d036      	beq.n	8000e46 <I2C_EV_IRQHandling+0x2c8>
			if (I2C_CheckStatusFlag(&pI2Cx->SR2, I2C_FLAG_SR2_SML)) { //Master mode
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	3318      	adds	r3, #24
 8000ddc:	2101      	movs	r1, #1
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fdec 	bl	80009bc <I2C_CheckStatusFlag>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d020      	beq.n	8000e2c <I2C_EV_IRQHandling+0x2ae>

				//Handle for multiple reception
				*(pI2CHandler->pRxBuffer) = pI2CHandler->pI2Cx->DR;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	691a      	ldr	r2, [r3, #16]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	701a      	strb	r2, [r3, #0]
				pI2CHandler->RxLen--;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	1e5a      	subs	r2, r3, #1
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	615a      	str	r2, [r3, #20]
				if (pI2CHandler->RxLen > 1) {
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d904      	bls.n	8000e14 <I2C_EV_IRQHandling+0x296>
					pI2CHandler->pRxBuffer++;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	1c5a      	adds	r2, r3, #1
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	609a      	str	r2, [r3, #8]
				//Note: To me sometime later when I got the job as firmware engineer.
				//C is procedural programming, so after decrementing the Rx len, you MUST
				//remember to check for 0 to close the communication ASAP to avoid going to
				//another ISR. If you do so, RXNE will be set to 0 and the condition for
				//this interrupt will never be fulfilled.
				if (pI2CHandler->RxLen == 0) {
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d114      	bne.n	8000e46 <I2C_EV_IRQHandling+0x2c8>
					//Close the transmission
					closeMasterRx(pI2CHandler);
 8000e1c:	6878      	ldr	r0, [r7, #4]
 8000e1e:	f000 fa32 	bl	8001286 <closeMasterRx>

					//Application Call back
					I2C_ApplicationEventCallBack(pI2CHandler, I2C_EVT_RX_CMPLT);
 8000e22:	2101      	movs	r1, #1
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff facb 	bl	80003c0 <I2C_ApplicationEventCallBack>
				if (!I2C_CheckStatusFlag(&pI2Cx->SR2, I2C_FLAG_SR2_TRA)) { //receiver mode
					I2C_ApplicationEventCallBack(pI2CHandler, I2C_EVT_DATA_RCV);
				}
			}
		}
}
 8000e2a:	e00c      	b.n	8000e46 <I2C_EV_IRQHandling+0x2c8>
				if (!I2C_CheckStatusFlag(&pI2Cx->SR2, I2C_FLAG_SR2_TRA)) { //receiver mode
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	3318      	adds	r3, #24
 8000e30:	2104      	movs	r1, #4
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fdc2 	bl	80009bc <I2C_CheckStatusFlag>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d103      	bne.n	8000e46 <I2C_EV_IRQHandling+0x2c8>
					I2C_ApplicationEventCallBack(pI2CHandler, I2C_EVT_DATA_RCV);
 8000e3e:	210b      	movs	r1, #11
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff fabd 	bl	80003c0 <I2C_ApplicationEventCallBack>
}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <I2C_ER_IRQHandling>:
 * @param[in]			- I2C handle structure
 *
 * @return				- none
 * @note				- none
 */
void I2C_ER_IRQHandling(I2C_Handle_t* pI2CHandler) {
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
	uint32_t temp, temp1;
	I2C_Reg_t* pI2Cx = pI2CHandler->pI2Cx;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	617b      	str	r3, [r7, #20]

	//Check the status of the error interrupt flag
	temp1 = pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e64:	613b      	str	r3, [r7, #16]

/**************************************BERR_ERROR_INTERRUPT*********************************************/
	//This error occurs when the I2C interface detects an external Stop
	//Start condition during an address or a data transfer.
	temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_BERR);
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3314      	adds	r3, #20
 8000e6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fda4 	bl	80009bc <I2C_CheckStatusFlag>
 8000e74:	4603      	mov	r3, r0
 8000e76:	60fb      	str	r3, [r7, #12]
	if (temp && temp1) {
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d01b      	beq.n	8000eb6 <I2C_ER_IRQHandling+0x68>
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d018      	beq.n	8000eb6 <I2C_ER_IRQHandling+0x68>

		//Clear the BERR flag
		pI2Cx->SR1 &= ~I2C_FLAG_SR1_BERR;
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	695b      	ldr	r3, [r3, #20]
 8000e88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	615a      	str	r2, [r3, #20]

		//In master mode: the lines are not released, and the state of the
		//current transmission is not affected. It is up to software to abort
		//or not the current transmission. In this implemenetation, I decided
		//to close the transmission instead.
		if (I2C_CheckStatusFlag(&pI2Cx->SR2, I2C_FLAG_SR2_SML)) { //Master mode
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	3318      	adds	r3, #24
 8000e94:	2101      	movs	r1, #1
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fd90 	bl	80009bc <I2C_CheckStatusFlag>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d005      	beq.n	8000eae <I2C_ER_IRQHandling+0x60>

			//Close the master transmission
			generateStopCondition(pI2Cx);
 8000ea2:	6978      	ldr	r0, [r7, #20]
 8000ea4:	f000 f932 	bl	800110c <generateStopCondition>
			closeMasterTx(pI2CHandler);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f000 f9c9 	bl	8001240 <closeMasterTx>

		//In slave mode, data are discarded and the lines are released by hardware
		else {
			//Implement later
		}
		I2C_ApplicationEventCallBack(pI2CHandler, I2C_ERR_BERR);
 8000eae:	2103      	movs	r1, #3
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff fa85 	bl	80003c0 <I2C_ApplicationEventCallBack>


/**************************************AF_ERROR_INTERRUPT*********************************************/
	//This error occurs when the interface detects a nonacknowledge bit.
	//Note: A transmitter that receives NACK should reset the transmission
	temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_AF);
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3314      	adds	r3, #20
 8000eba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fd7c 	bl	80009bc <I2C_CheckStatusFlag>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	60fb      	str	r3, [r7, #12]
	if (temp && temp1) {
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d01b      	beq.n	8000f06 <I2C_ER_IRQHandling+0xb8>
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d018      	beq.n	8000f06 <I2C_ER_IRQHandling+0xb8>

		//Clear the AF flag
		pI2Cx->SR1 &= ~I2C_FLAG_SR1_AF;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	615a      	str	r2, [r3, #20]

		//In master mode, a stop or repeated start condition must
		//be generated by software
		if (I2C_CheckStatusFlag(&pI2Cx->SR2, I2C_FLAG_SR2_SML)) { //Master mode
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3318      	adds	r3, #24
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fd68 	bl	80009bc <I2C_CheckStatusFlag>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d005      	beq.n	8000efe <I2C_ER_IRQHandling+0xb0>

			//Close the master transmission by
			//generating the stop condition
			generateStopCondition(pI2Cx);
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	f000 f90a 	bl	800110c <generateStopCondition>
			closeMasterTx(pI2CHandler);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f000 f9a1 	bl	8001240 <closeMasterTx>
		}

		//In slave mode, data are discarded and the lines are released by hardware
		//Note: In slave transmitter mode, the AF bit signals the end of slave transmission,
		//		as master sends NACK which results in AF bit HIGH to close the communication
		I2C_ApplicationEventCallBack(pI2CHandler, I2C_ERR_AF);
 8000efe:	2104      	movs	r1, #4
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff fa5d 	bl	80003c0 <I2C_ApplicationEventCallBack>
	}

/**************************************ARLO_ERROR_INTERRUPT*********************************************/
	//This error occurs when the I2C interface detects an arbitration lost condition
	//This happens all the more often in the multi-master communication
	temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_ARLO);
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	3314      	adds	r3, #20
 8000f0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fd54 	bl	80009bc <I2C_CheckStatusFlag>
 8000f14:	4603      	mov	r3, r0
 8000f16:	60fb      	str	r3, [r7, #12]
	if (temp && temp1) {
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d00c      	beq.n	8000f38 <I2C_ER_IRQHandling+0xea>
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d009      	beq.n	8000f38 <I2C_ER_IRQHandling+0xea>

		//Clear the ARLO flag
		pI2Cx->SR1 &= ~I2C_FLAG_SR1_ARLO;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	615a      	str	r2, [r3, #20]

		//Note: When this flag is set, the I2C interface goes automatically back to
		//slave mode (the MSL bit is cleared). Whe the I2C loses the arbitration, it
		//is not able to acknowledge its slave address in the same transfer
		//Lines are released by hardware
		I2C_ApplicationEventCallBack(pI2CHandler, I2C_ERR_ARLO);
 8000f30:	2105      	movs	r1, #5
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff fa44 	bl	80003c0 <I2C_ApplicationEventCallBack>
	//An overrun error can occur in slave mode while underrun can occur in
	//master mode. This is when clock stretching is disabled and the I2C interface
	//is receiving data. The interface has received a byte (RXNE = 1) and the data in
	//DR has not been read, before the next byte is received by the interface, which
	//results in the loss of the newly received byte.
	temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_OVR);
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	3314      	adds	r3, #20
 8000f3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fd3b 	bl	80009bc <I2C_CheckStatusFlag>
 8000f46:	4603      	mov	r3, r0
 8000f48:	60fb      	str	r3, [r7, #12]
	if (temp && temp1) {
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00c      	beq.n	8000f6a <I2C_ER_IRQHandling+0x11c>
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d009      	beq.n	8000f6a <I2C_ER_IRQHandling+0x11c>

		//Clear the OVR flag
		pI2Cx->SR1 &= ~I2C_FLAG_SR1_OVR;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	615a      	str	r2, [r3, #20]

		//Report to the user application
		I2C_ApplicationEventCallBack(pI2CHandler, I2C_ERR_OVR);
 8000f62:	2106      	movs	r1, #6
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff fa2b 	bl	80003c0 <I2C_ApplicationEventCallBack>
	}

/***************************************OVR_ERROR_INTERRUPT********************************************/
	//Handle for PECERR error interrupt. For more details, see STM32F407xx Reference Manual
	temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_PECERR);
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3314      	adds	r3, #20
 8000f6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fd22 	bl	80009bc <I2C_CheckStatusFlag>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60fb      	str	r3, [r7, #12]
	if (temp && temp1) {
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00c      	beq.n	8000f9c <I2C_ER_IRQHandling+0x14e>
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d009      	beq.n	8000f9c <I2C_ER_IRQHandling+0x14e>

		//Clear the PECERR flag
		pI2Cx->SR1 &= ~I2C_FLAG_SR1_PECERR;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	615a      	str	r2, [r3, #20]

		//Report to the user application
		I2C_ApplicationEventCallBack(pI2CHandler, I2C_ERR_PECERR);
 8000f94:	2107      	movs	r1, #7
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff fa12 	bl	80003c0 <I2C_ApplicationEventCallBack>
	}

/***************************************OVR_ERROR_INTERRUPT********************************************/
	//Handle for TIMEOUT error interrupt. For more details, see STM32F407xx Reference Manual
	temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_TIMEOUT);
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	3314      	adds	r3, #20
 8000fa0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fd09 	bl	80009bc <I2C_CheckStatusFlag>
 8000faa:	4603      	mov	r3, r0
 8000fac:	60fb      	str	r3, [r7, #12]
	if (temp && temp1) {
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d00c      	beq.n	8000fce <I2C_ER_IRQHandling+0x180>
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d009      	beq.n	8000fce <I2C_ER_IRQHandling+0x180>

		//Clear the TIMEOUT flag
		pI2Cx->SR1 &= ~I2C_FLAG_SR1_TIMEOUT;
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	615a      	str	r2, [r3, #20]

		//Report to the user application
		I2C_ApplicationEventCallBack(pI2CHandler, I2C_ERR_TIMEOUT);
 8000fc6:	2108      	movs	r1, #8
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff f9f9 	bl	80003c0 <I2C_ApplicationEventCallBack>
	}

/***************************************SMBALERT_ERROR_INTERRUPT***************************************/
	//Handle for SMBALERT error interrupt. For more details, see STM32F407xx Reference Manual
	temp = I2C_CheckStatusFlag(&pI2Cx->SR1, I2C_FLAG_SR1_SMBALERT);
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3314      	adds	r3, #20
 8000fd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fcf0 	bl	80009bc <I2C_CheckStatusFlag>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60fb      	str	r3, [r7, #12]
	if (temp && temp1) {
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00c      	beq.n	8001000 <I2C_ER_IRQHandling+0x1b2>
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d009      	beq.n	8001000 <I2C_ER_IRQHandling+0x1b2>

		//Clear the SMBALERT flag
		pI2Cx->SR1 &= ~I2C_FLAG_SR1_SMBALERT;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	615a      	str	r2, [r3, #20]

		//Report to the user application
		I2C_ApplicationEventCallBack(pI2CHandler, I2C_ERR_SMBALERT);
 8000ff8:	2109      	movs	r1, #9
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff f9e0 	bl	80003c0 <I2C_ApplicationEventCallBack>
	}
}
 8001000:	bf00      	nop
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <getAPB1ClkFreq>:
 * @param[in]			-
 *
 * @return				- none
 * @note				- See the Clock Tree diagram in STM32F4xx Reference Manual for details
 */
static uint32_t getAPB1ClkFreq() {
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0

	uint16_t temp, AHB1Prescalar,  APB1Prescalar;
	uint16_t AHB1PreSclr[9] = {1, 2, 4, 6, 16, 64, 128, 256, 512};
 800100e:	4b2e      	ldr	r3, [pc, #184]	; (80010c8 <getAPB1ClkFreq+0xc0>)
 8001010:	f107 040c 	add.w	r4, r7, #12
 8001014:	461d      	mov	r5, r3
 8001016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001018:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800101a:	682b      	ldr	r3, [r5, #0]
 800101c:	8023      	strh	r3, [r4, #0]
	uint16_t APB1PreSclr[5] = {1, 2, 4, 8, 16};
 800101e:	4a2b      	ldr	r2, [pc, #172]	; (80010cc <getAPB1ClkFreq+0xc4>)
 8001020:	463b      	mov	r3, r7
 8001022:	ca07      	ldmia	r2, {r0, r1, r2}
 8001024:	c303      	stmia	r3!, {r0, r1}
 8001026:	801a      	strh	r2, [r3, #0]
	uint32_t sysClk;

	//Determine what system clock the MCU is running
	switch ((RCC->CFGR >> 2U) & 0x3) {
 8001028:	4b29      	ldr	r3, [pc, #164]	; (80010d0 <getAPB1ClkFreq+0xc8>)
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	2b01      	cmp	r3, #1
 8001034:	d004      	beq.n	8001040 <getAPB1ClkFreq+0x38>
 8001036:	2b01      	cmp	r3, #1
 8001038:	d305      	bcc.n	8001046 <getAPB1ClkFreq+0x3e>
 800103a:	2b02      	cmp	r3, #2
 800103c:	d006      	beq.n	800104c <getAPB1ClkFreq+0x44>
 800103e:	e009      	b.n	8001054 <getAPB1ClkFreq+0x4c>
	case RCC_HSE:	sysClk = HSE_CLK_FREQ; break; //8MHz
 8001040:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <getAPB1ClkFreq+0xcc>)
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
 8001044:	e006      	b.n	8001054 <getAPB1ClkFreq+0x4c>
	case RCC_HSI:	sysClk = HSI_CLK_FREQ; break; //16MHz
 8001046:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <getAPB1ClkFreq+0xd0>)
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
 800104a:	e003      	b.n	8001054 <getAPB1ClkFreq+0x4c>
	case RCC_PLL:	sysClk = getPLLClkFreq(); break; //See this function implementation for details
 800104c:	f000 f846 	bl	80010dc <getPLLClkFreq>
 8001050:	6278      	str	r0, [r7, #36]	; 0x24
 8001052:	bf00      	nop
	}

	//Determine the prescalar factor AHB1 is using
	temp = (RCC->CFGR >> 4U) & 0xF;
 8001054:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <getAPB1ClkFreq+0xc8>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	091b      	lsrs	r3, r3, #4
 800105a:	b29b      	uxth	r3, r3
 800105c:	f003 030f 	and.w	r3, r3, #15
 8001060:	847b      	strh	r3, [r7, #34]	; 0x22
	AHB1Prescalar = (temp < 8U) ? AHB1PreSclr[0] : AHB1PreSclr[temp % 8 + 1];
 8001062:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001064:	2b07      	cmp	r3, #7
 8001066:	d801      	bhi.n	800106c <getAPB1ClkFreq+0x64>
 8001068:	89bb      	ldrh	r3, [r7, #12]
 800106a:	e009      	b.n	8001080 <getAPB1ClkFreq+0x78>
 800106c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	3301      	adds	r3, #1
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800107a:	4413      	add	r3, r2
 800107c:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8001080:	843b      	strh	r3, [r7, #32]

	//Determine the prescalar factor APB1 is using
	temp = (RCC->CFGR >> 10U) & 0x7;
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <getAPB1ClkFreq+0xc8>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	0a9b      	lsrs	r3, r3, #10
 8001088:	b29b      	uxth	r3, r3
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	847b      	strh	r3, [r7, #34]	; 0x22
	APB1Prescalar = (temp < 4U) ? APB1PreSclr[0] : APB1PreSclr[temp % 8 + 1];
 8001090:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001092:	2b03      	cmp	r3, #3
 8001094:	d801      	bhi.n	800109a <getAPB1ClkFreq+0x92>
 8001096:	883b      	ldrh	r3, [r7, #0]
 8001098:	e009      	b.n	80010ae <getAPB1ClkFreq+0xa6>
 800109a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800109c:	f003 0307 	and.w	r3, r3, #7
 80010a0:	3301      	adds	r3, #1
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010a8:	4413      	add	r3, r2
 80010aa:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 80010ae:	83fb      	strh	r3, [r7, #30]

	//Return the APB1 clock freq
	return (sysClk / AHB1Prescalar) / APB1Prescalar;
 80010b0:	8c3b      	ldrh	r3, [r7, #32]
 80010b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80010b8:	8bfb      	ldrh	r3, [r7, #30]
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3728      	adds	r7, #40	; 0x28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bdb0      	pop	{r4, r5, r7, pc}
 80010c6:	bf00      	nop
 80010c8:	08002790 	.word	0x08002790
 80010cc:	080027a4 	.word	0x080027a4
 80010d0:	40023800 	.word	0x40023800
 80010d4:	007a1200 	.word	0x007a1200
 80010d8:	00f42400 	.word	0x00f42400

080010dc <getPLLClkFreq>:
 * @param[in]			-
 *
 * @return				- none
 * @note				- See the Clock Tree diagram in STM32F4xx Reference Manual for details
 */
static uint32_t getPLLClkFreq() {
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

	//Implemented later
	return 1;
 80010e0:	2301      	movs	r3, #1
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <generateStartCondition>:
 * @param[in]			- Base address of the specific I2C peripherals (I2C_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- none
 */
static void generateStartCondition(I2C_Reg_t* pI2Cx) {
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= 1 << I2C_CR1_START;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	601a      	str	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <generateStopCondition>:
 * @param[in]			- Base address of the specific I2C peripherals (I2C_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- none
 */
static void generateStopCondition(I2C_Reg_t* pI2Cx) {
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= 1 << I2C_CR1_STOP;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <clearFlagSB>:
 * @param[in]			- Base address of the specific I2C peripherals (I2C_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- none
 */
static void clearFlagSB(I2C_Reg_t* pI2Cx) {
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	temp = pI2Cx->SR1;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	60fb      	str	r3, [r7, #12]
	(void) temp; //resolve unused variable warning
}
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <clearFlagADDR>:
 * @param[in]			- Base address of the specific I2C peripherals (I2C_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- none
 */
static void clearFlagADDR(I2C_Reg_t* pI2Cx) {
 8001146:	b480      	push	{r7}
 8001148:	b085      	sub	sp, #20
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	temp = pI2Cx->SR1;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	60fb      	str	r3, [r7, #12]
	temp = pI2Cx->SR2;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	60fb      	str	r3, [r7, #12]
	(void) temp; //resolve unused variable warning
}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <clearFlagSTOPF>:
 * @param[in]			- base address of the I2C peripheral
 *
 * @return				- none
 * @note				- none
 */
static void clearFlagSTOPF(I2C_Reg_t* pI2Cx) {
 8001166:	b480      	push	{r7}
 8001168:	b085      	sub	sp, #20
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
	uint16_t temp;
	temp = pI2Cx->SR1; //reading the SR1 register
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	81fb      	strh	r3, [r7, #14]
	pI2Cx->CR1 |= 0x0000; //write to CR1 register
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	601a      	str	r2, [r3, #0]
	(void) temp;
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <ctrlBitACK>:
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
static void ctrlBitACK(I2C_Reg_t* pI2Cx, uint8_t EnOrDi) {
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 8001194:	78fb      	ldrb	r3, [r7, #3]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d006      	beq.n	80011a8 <ctrlBitACK+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	601a      	str	r2, [r3, #0]
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 80011a6:	e005      	b.n	80011b4 <ctrlBitACK+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	601a      	str	r2, [r3, #0]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <ctrlBitPOS>:
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
static void ctrlBitPOS(I2C_Reg_t* pI2Cx, uint8_t EnOrDi) {
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d006      	beq.n	80011e0 <ctrlBitPOS+0x20>
		pI2Cx->CR1 |= (1 << I2C_CR1_POS);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	601a      	str	r2, [r3, #0]
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_POS);
	}
}
 80011de:	e005      	b.n	80011ec <ctrlBitPOS+0x2c>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_POS);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	601a      	str	r2, [r3, #0]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <sendAddressToSlaveWrite>:
 * @param[in]			- slave address
 *
 * @return				- none
 * @note				- none
 */
static void sendAddressToSlaveWrite(I2C_Reg_t* pI2Cx, uint8_t pSlaveAddress) {
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	70fb      	strb	r3, [r7, #3]
	 //Write the slave address to DR register
	pI2Cx->DR = (pSlaveAddress << 1);
 8001204:	78fb      	ldrb	r3, [r7, #3]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	461a      	mov	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	611a      	str	r2, [r3, #16]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <sendAddressToSlaveRead>:
 * @param[in]			- slave address
 *
 * @return				- none
 * @note				- none
 */
static void sendAddressToSlaveRead(I2C_Reg_t* pI2Cx, uint8_t pSlaveAddress) {
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	460b      	mov	r3, r1
 8001224:	70fb      	strb	r3, [r7, #3]

	//Write the slave address to DR register
	//with the r/w bit high at the end
	pI2Cx->DR = (pSlaveAddress << 1) | 0x1;
 8001226:	78fb      	ldrb	r3, [r7, #3]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	461a      	mov	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	611a      	str	r2, [r3, #16]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <closeMasterTx>:
 * @param[in]			- I2C handle structure
 *
 * @return				- none
 * @note				- none
 */
static void closeMasterTx(I2C_Handle_t* pI2CHandler) {
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]

	//Reset the interrupt buffer and event
	pI2CHandler->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001256:	605a      	str	r2, [r3, #4]
	pI2CHandler->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001266:	605a      	str	r2, [r3, #4]

	//Reset all the global fields
	pI2CHandler->TxRxState = I2C_READY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	771a      	strb	r2, [r3, #28]
	pI2CHandler->pTxBuffer = NULL;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	605a      	str	r2, [r3, #4]
	pI2CHandler->TxLen = 0;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <closeMasterRx>:
 * @param[in]			- I2C handle structure
 *
 * @return				- none
 * @note				- none
 */
static void closeMasterRx(I2C_Handle_t* pI2CHandler) {
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]

	//Reset the interrupt buffer and event
	pI2CHandler->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800129c:	605a      	str	r2, [r3, #4]
	pI2CHandler->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012ac:	605a      	str	r2, [r3, #4]

	//Reset all the global fields
	pI2CHandler->TxRxState = I2C_READY;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	771a      	strb	r2, [r3, #28]
	pI2CHandler->pRxBuffer = NULL;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
	pI2CHandler->RxSize = 0;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
	pI2CHandler->RxLen = 0;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]



	//Re-enable the ACKking
	if (pI2CHandler->I2C_Config.ACKControl == ENABLE) {
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7b9b      	ldrb	r3, [r3, #14]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d105      	bne.n	80012da <closeMasterRx+0x54>
		ctrlBitACK(pI2CHandler->pI2Cx, ENABLE);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2101      	movs	r1, #1
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff57 	bl	8001188 <ctrlBitACK>
	}
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <GPIO_PeriClkCtrl>:
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void GPIO_PeriClkCtrl(GPIO_Reg_t* pGPIOx, uint8_t EnOrDi) {
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	70fb      	strb	r3, [r7, #3]

	//Enable or disable the GPIO clock peripherals
	if (EnOrDi) {
 80012f0:	78fb      	ldrb	r3, [r7, #3]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d074      	beq.n	80013e0 <GPIO_PeriClkCtrl+0xfc>
		//Special note: switch cannot be used for pointer, only integer
		GPIO_PCLK_EN(pGPIOx);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a76      	ldr	r2, [pc, #472]	; (80014d4 <GPIO_PeriClkCtrl+0x1f0>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d106      	bne.n	800130c <GPIO_PeriClkCtrl+0x28>
 80012fe:	4b76      	ldr	r3, [pc, #472]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a75      	ldr	r2, [pc, #468]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
	} else {
		GPIO_PCLK_DI(pGPIOx);
	}
}
 800130a:	e0dd      	b.n	80014c8 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a73      	ldr	r2, [pc, #460]	; (80014dc <GPIO_PeriClkCtrl+0x1f8>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d106      	bne.n	8001322 <GPIO_PeriClkCtrl+0x3e>
 8001314:	4b70      	ldr	r3, [pc, #448]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	4a6f      	ldr	r2, [pc, #444]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001320:	e0d2      	b.n	80014c8 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a6e      	ldr	r2, [pc, #440]	; (80014e0 <GPIO_PeriClkCtrl+0x1fc>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d106      	bne.n	8001338 <GPIO_PeriClkCtrl+0x54>
 800132a:	4b6b      	ldr	r3, [pc, #428]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a6a      	ldr	r2, [pc, #424]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001336:	e0c7      	b.n	80014c8 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a6a      	ldr	r2, [pc, #424]	; (80014e4 <GPIO_PeriClkCtrl+0x200>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d106      	bne.n	800134e <GPIO_PeriClkCtrl+0x6a>
 8001340:	4b65      	ldr	r3, [pc, #404]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	4a64      	ldr	r2, [pc, #400]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800134c:	e0bc      	b.n	80014c8 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a65      	ldr	r2, [pc, #404]	; (80014e8 <GPIO_PeriClkCtrl+0x204>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d106      	bne.n	8001364 <GPIO_PeriClkCtrl+0x80>
 8001356:	4b60      	ldr	r3, [pc, #384]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a5f      	ldr	r2, [pc, #380]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 800135c:	f043 0310 	orr.w	r3, r3, #16
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001362:	e0b1      	b.n	80014c8 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a61      	ldr	r2, [pc, #388]	; (80014ec <GPIO_PeriClkCtrl+0x208>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d106      	bne.n	800137a <GPIO_PeriClkCtrl+0x96>
 800136c:	4b5a      	ldr	r3, [pc, #360]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 800136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001370:	4a59      	ldr	r2, [pc, #356]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 8001372:	f043 0320 	orr.w	r3, r3, #32
 8001376:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001378:	e0a6      	b.n	80014c8 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a5c      	ldr	r2, [pc, #368]	; (80014f0 <GPIO_PeriClkCtrl+0x20c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d106      	bne.n	8001390 <GPIO_PeriClkCtrl+0xac>
 8001382:	4b55      	ldr	r3, [pc, #340]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a54      	ldr	r2, [pc, #336]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 8001388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800138e:	e09b      	b.n	80014c8 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a58      	ldr	r2, [pc, #352]	; (80014f4 <GPIO_PeriClkCtrl+0x210>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d106      	bne.n	80013a6 <GPIO_PeriClkCtrl+0xc2>
 8001398:	4b4f      	ldr	r3, [pc, #316]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139c:	4a4e      	ldr	r2, [pc, #312]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 800139e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80013a4:	e090      	b.n	80014c8 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a53      	ldr	r2, [pc, #332]	; (80014f8 <GPIO_PeriClkCtrl+0x214>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d106      	bne.n	80013bc <GPIO_PeriClkCtrl+0xd8>
 80013ae:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a49      	ldr	r2, [pc, #292]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 80013b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80013ba:	e085      	b.n	80014c8 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a4f      	ldr	r2, [pc, #316]	; (80014fc <GPIO_PeriClkCtrl+0x218>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d106      	bne.n	80013d2 <GPIO_PeriClkCtrl+0xee>
 80013c4:	4b44      	ldr	r3, [pc, #272]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c8:	4a43      	ldr	r2, [pc, #268]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 80013ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80013d0:	e07a      	b.n	80014c8 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80013d2:	4b41      	ldr	r3, [pc, #260]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a40      	ldr	r2, [pc, #256]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 80013d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80013de:	e073      	b.n	80014c8 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a3c      	ldr	r2, [pc, #240]	; (80014d4 <GPIO_PeriClkCtrl+0x1f0>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d106      	bne.n	80013f6 <GPIO_PeriClkCtrl+0x112>
 80013e8:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	4a3a      	ldr	r2, [pc, #232]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 80013ee:	f023 0301 	bic.w	r3, r3, #1
 80013f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80013f4:	e068      	b.n	80014c8 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a38      	ldr	r2, [pc, #224]	; (80014dc <GPIO_PeriClkCtrl+0x1f8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d106      	bne.n	800140c <GPIO_PeriClkCtrl+0x128>
 80013fe:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a35      	ldr	r2, [pc, #212]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 8001404:	f023 0302 	bic.w	r3, r3, #2
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
}
 800140a:	e05d      	b.n	80014c8 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a34      	ldr	r2, [pc, #208]	; (80014e0 <GPIO_PeriClkCtrl+0x1fc>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d106      	bne.n	8001422 <GPIO_PeriClkCtrl+0x13e>
 8001414:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	4a2f      	ldr	r2, [pc, #188]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 800141a:	f023 0304 	bic.w	r3, r3, #4
 800141e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001420:	e052      	b.n	80014c8 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a2f      	ldr	r2, [pc, #188]	; (80014e4 <GPIO_PeriClkCtrl+0x200>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d106      	bne.n	8001438 <GPIO_PeriClkCtrl+0x154>
 800142a:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a2a      	ldr	r2, [pc, #168]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 8001430:	f023 0308 	bic.w	r3, r3, #8
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001436:	e047      	b.n	80014c8 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a2b      	ldr	r2, [pc, #172]	; (80014e8 <GPIO_PeriClkCtrl+0x204>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d106      	bne.n	800144e <GPIO_PeriClkCtrl+0x16a>
 8001440:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	4a24      	ldr	r2, [pc, #144]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 8001446:	f023 0310 	bic.w	r3, r3, #16
 800144a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800144c:	e03c      	b.n	80014c8 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a26      	ldr	r2, [pc, #152]	; (80014ec <GPIO_PeriClkCtrl+0x208>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d106      	bne.n	8001464 <GPIO_PeriClkCtrl+0x180>
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a1f      	ldr	r2, [pc, #124]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 800145c:	f023 0320 	bic.w	r3, r3, #32
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001462:	e031      	b.n	80014c8 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a22      	ldr	r2, [pc, #136]	; (80014f0 <GPIO_PeriClkCtrl+0x20c>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d106      	bne.n	800147a <GPIO_PeriClkCtrl+0x196>
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	4a19      	ldr	r2, [pc, #100]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 8001472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001476:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001478:	e026      	b.n	80014c8 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a1d      	ldr	r2, [pc, #116]	; (80014f4 <GPIO_PeriClkCtrl+0x210>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d106      	bne.n	8001490 <GPIO_PeriClkCtrl+0x1ac>
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 8001488:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800148e:	e01b      	b.n	80014c8 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a19      	ldr	r2, [pc, #100]	; (80014f8 <GPIO_PeriClkCtrl+0x214>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d106      	bne.n	80014a6 <GPIO_PeriClkCtrl+0x1c2>
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 800149e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80014a4:	e010      	b.n	80014c8 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a14      	ldr	r2, [pc, #80]	; (80014fc <GPIO_PeriClkCtrl+0x218>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d106      	bne.n	80014bc <GPIO_PeriClkCtrl+0x1d8>
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a09      	ldr	r2, [pc, #36]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 80014b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80014ba:	e005      	b.n	80014c8 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <GPIO_PeriClkCtrl+0x1f4>)
 80014c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	40020000 	.word	0x40020000
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020400 	.word	0x40020400
 80014e0:	40020800 	.word	0x40020800
 80014e4:	40020c00 	.word	0x40020c00
 80014e8:	40020100 	.word	0x40020100
 80014ec:	40021400 	.word	0x40021400
 80014f0:	40021800 	.word	0x40021800
 80014f4:	40021c00 	.word	0x40021c00
 80014f8:	40022000 	.word	0x40022000
 80014fc:	40022400 	.word	0x40022400

08001500 <GPIO_Init>:
 * @param[in]			-
 *
 * @return				- none
 * @note				- none
 */
void GPIO_Init(GPIO_Handle_t* pGPIOHandler) {
 8001500:	b5b0      	push	{r4, r5, r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

	//uint32_t temp;
	GPIO_Reg_t* GPIOx = pGPIOHandler->pGPIOx;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	623b      	str	r3, [r7, #32]
	GPIO_PinConfig_t GPIOx_PinConf = pGPIOHandler->GPIOx_PinConfig;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f107 0408 	add.w	r4, r7, #8
 8001514:	1d1d      	adds	r5, r3, #4
 8001516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800151a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800151e:	e884 0003 	stmia.w	r4, {r0, r1}

	//Enable the GPIO Clock
	GPIO_PeriClkCtrl(GPIOx, ENABLE);
 8001522:	2101      	movs	r1, #1
 8001524:	6a38      	ldr	r0, [r7, #32]
 8001526:	f7ff fedd 	bl	80012e4 <GPIO_PeriClkCtrl>

	/*Note: before setting the bits: make sure those registers are clear */
	//Clearing the registers
	//Setting the bits register
	for (uint16_t i = 0U; i < GPIO_PIN_NUMBER; i++) {
 800152a:	2300      	movs	r3, #0
 800152c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800152e:	e0f7      	b.n	8001720 <GPIO_Init+0x220>

		//Check if the ith bit is set
		if (GPIOx_PinConf.GPIO_PinNumber & (1 << i)) {
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001534:	2101      	movs	r1, #1
 8001536:	fa01 f202 	lsl.w	r2, r1, r2
 800153a:	4013      	ands	r3, r2
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 80ec 	beq.w	800171a <GPIO_Init+0x21a>

			//Handle the GPIO pin alternate function mode and GPIO output mode
			if (GPIOx_PinConf.GPIO_PinMode == GPIO_ALT_FUNC_MODE || GPIOx_PinConf.GPIO_PinMode == GPIO_OUTPUT_MODE) {
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d002      	beq.n	800154e <GPIO_Init+0x4e>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d12c      	bne.n	80015a8 <GPIO_Init+0xa8>
				if (i < (GPIO_PIN_NUMBER / 2)) {
 800154e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001550:	2b07      	cmp	r3, #7
 8001552:	d80a      	bhi.n	800156a <GPIO_Init+0x6a>
					GPIOx->AFR[0] |= (GPIOx_PinConf.GPIO_PinAltFuncMode << i * 4U);
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	6a1a      	ldr	r2, [r3, #32]
 8001558:	69f9      	ldr	r1, [r7, #28]
 800155a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	431a      	orrs	r2, r3
 8001564:	6a3b      	ldr	r3, [r7, #32]
 8001566:	621a      	str	r2, [r3, #32]
 8001568:	e00b      	b.n	8001582 <GPIO_Init+0x82>
				} else {
					GPIOx->AFR[1] |= (GPIOx_PinConf.GPIO_PinAltFuncMode << (i % (GPIO_PIN_NUMBER / 2)) * 4U);
 800156a:	6a3b      	ldr	r3, [r7, #32]
 800156c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800156e:	69f9      	ldr	r1, [r7, #28]
 8001570:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	431a      	orrs	r2, r3
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
				}

				//Configure the OTYPER register
				GPIOx->OTYPER |= (GPIOx_PinConf.GPIO_PinOPType << i);
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	69b9      	ldr	r1, [r7, #24]
 8001588:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	431a      	orrs	r2, r3
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	605a      	str	r2, [r3, #4]

				//Configure the OSPEED register
				GPIOx->OSPEEDR |= (GPIOx_PinConf.GPIO_PinSpeed << i * 2U);
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	6939      	ldr	r1, [r7, #16]
 800159a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	431a      	orrs	r2, r3
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	609a      	str	r2, [r3, #8]
			}

			//Handle the GPIO pin interrupt mode
			if ((GPIOx_PinConf.GPIO_PinMode == GPIO_IT_FT_MODE) || (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RT_MODE)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d006      	beq.n	80015bc <GPIO_Init+0xbc>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2b05      	cmp	r3, #5
 80015b2:	d003      	beq.n	80015bc <GPIO_Init+0xbc>
				|| (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RFT_MODE)) {
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	f040 809b 	bne.w	80016f2 <GPIO_Init+0x1f2>

				//Enable the clock for SYSCFG registers
				SYSCFG_PCLK_EN();
 80015bc:	4b5c      	ldr	r3, [pc, #368]	; (8001730 <GPIO_Init+0x230>)
 80015be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c0:	4a5b      	ldr	r2, [pc, #364]	; (8001730 <GPIO_Init+0x230>)
 80015c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c6:	6453      	str	r3, [r2, #68]	; 0x44

				//Handling the falling edge cases
				if (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_FT_MODE) {
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d115      	bne.n	80015fa <GPIO_Init+0xfa>
					//Configure the FTSR
					EXTI->FTSR |= (1 << i);
 80015ce:	4b59      	ldr	r3, [pc, #356]	; (8001734 <GPIO_Init+0x234>)
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015d4:	2101      	movs	r1, #1
 80015d6:	fa01 f202 	lsl.w	r2, r1, r2
 80015da:	4611      	mov	r1, r2
 80015dc:	4a55      	ldr	r2, [pc, #340]	; (8001734 <GPIO_Init+0x234>)
 80015de:	430b      	orrs	r3, r1
 80015e0:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~(1 << i); //Clear the corresponding RTSR bit
 80015e2:	4b54      	ldr	r3, [pc, #336]	; (8001734 <GPIO_Init+0x234>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015e8:	2101      	movs	r1, #1
 80015ea:	fa01 f202 	lsl.w	r2, r1, r2
 80015ee:	43d2      	mvns	r2, r2
 80015f0:	4611      	mov	r1, r2
 80015f2:	4a50      	ldr	r2, [pc, #320]	; (8001734 <GPIO_Init+0x234>)
 80015f4:	400b      	ands	r3, r1
 80015f6:	6093      	str	r3, [r2, #8]
 80015f8:	e02c      	b.n	8001654 <GPIO_Init+0x154>
				} else if (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RT_MODE) {
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	d115      	bne.n	800162c <GPIO_Init+0x12c>
					//Configure the RTSR
					EXTI->RTSR |= (1 << i);
 8001600:	4b4c      	ldr	r3, [pc, #304]	; (8001734 <GPIO_Init+0x234>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001606:	2101      	movs	r1, #1
 8001608:	fa01 f202 	lsl.w	r2, r1, r2
 800160c:	4611      	mov	r1, r2
 800160e:	4a49      	ldr	r2, [pc, #292]	; (8001734 <GPIO_Init+0x234>)
 8001610:	430b      	orrs	r3, r1
 8001612:	6093      	str	r3, [r2, #8]
					EXTI->FTSR &= ~(1 << i); //Clear the corresponding FTSR bit
 8001614:	4b47      	ldr	r3, [pc, #284]	; (8001734 <GPIO_Init+0x234>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800161a:	2101      	movs	r1, #1
 800161c:	fa01 f202 	lsl.w	r2, r1, r2
 8001620:	43d2      	mvns	r2, r2
 8001622:	4611      	mov	r1, r2
 8001624:	4a43      	ldr	r2, [pc, #268]	; (8001734 <GPIO_Init+0x234>)
 8001626:	400b      	ands	r3, r1
 8001628:	60d3      	str	r3, [r2, #12]
 800162a:	e013      	b.n	8001654 <GPIO_Init+0x154>
				}  else {
					//Configure both the FTSR and RTSR
					EXTI->FTSR |= (1 << i);
 800162c:	4b41      	ldr	r3, [pc, #260]	; (8001734 <GPIO_Init+0x234>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001632:	2101      	movs	r1, #1
 8001634:	fa01 f202 	lsl.w	r2, r1, r2
 8001638:	4611      	mov	r1, r2
 800163a:	4a3e      	ldr	r2, [pc, #248]	; (8001734 <GPIO_Init+0x234>)
 800163c:	430b      	orrs	r3, r1
 800163e:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR |= (1 << i);
 8001640:	4b3c      	ldr	r3, [pc, #240]	; (8001734 <GPIO_Init+0x234>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001646:	2101      	movs	r1, #1
 8001648:	fa01 f202 	lsl.w	r2, r1, r2
 800164c:	4611      	mov	r1, r2
 800164e:	4a39      	ldr	r2, [pc, #228]	; (8001734 <GPIO_Init+0x234>)
 8001650:	430b      	orrs	r3, r1
 8001652:	6093      	str	r3, [r2, #8]
				//Configure the GPIO port selection in SYSCFG_EXTICR
				//Rule: int quotient = n >> z
				//		int remainder = n & (~(~(int) 0) << z)
				//In this case, since we always want z = 2, as we divide by 4,
				//the term ~(~(int) 0) << z) = 0x03U
				SYSCFG->EXTICR[i >> 2U] |= GPIO_PORT_INDEX(GPIOx) << ((i & 0x03U) * 4U);
 8001654:	4a38      	ldr	r2, [pc, #224]	; (8001738 <GPIO_Init+0x238>)
 8001656:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001658:	089b      	lsrs	r3, r3, #2
 800165a:	b29b      	uxth	r3, r3
 800165c:	3302      	adds	r3, #2
 800165e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	4935      	ldr	r1, [pc, #212]	; (800173c <GPIO_Init+0x23c>)
 8001666:	428b      	cmp	r3, r1
 8001668:	d02b      	beq.n	80016c2 <GPIO_Init+0x1c2>
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	4934      	ldr	r1, [pc, #208]	; (8001740 <GPIO_Init+0x240>)
 800166e:	428b      	cmp	r3, r1
 8001670:	d025      	beq.n	80016be <GPIO_Init+0x1be>
 8001672:	6a3b      	ldr	r3, [r7, #32]
 8001674:	4933      	ldr	r1, [pc, #204]	; (8001744 <GPIO_Init+0x244>)
 8001676:	428b      	cmp	r3, r1
 8001678:	d01f      	beq.n	80016ba <GPIO_Init+0x1ba>
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	4932      	ldr	r1, [pc, #200]	; (8001748 <GPIO_Init+0x248>)
 800167e:	428b      	cmp	r3, r1
 8001680:	d019      	beq.n	80016b6 <GPIO_Init+0x1b6>
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	4931      	ldr	r1, [pc, #196]	; (800174c <GPIO_Init+0x24c>)
 8001686:	428b      	cmp	r3, r1
 8001688:	d013      	beq.n	80016b2 <GPIO_Init+0x1b2>
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	4930      	ldr	r1, [pc, #192]	; (8001750 <GPIO_Init+0x250>)
 800168e:	428b      	cmp	r3, r1
 8001690:	d00d      	beq.n	80016ae <GPIO_Init+0x1ae>
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	492f      	ldr	r1, [pc, #188]	; (8001754 <GPIO_Init+0x254>)
 8001696:	428b      	cmp	r3, r1
 8001698:	d007      	beq.n	80016aa <GPIO_Init+0x1aa>
 800169a:	6a3b      	ldr	r3, [r7, #32]
 800169c:	492e      	ldr	r1, [pc, #184]	; (8001758 <GPIO_Init+0x258>)
 800169e:	428b      	cmp	r3, r1
 80016a0:	d101      	bne.n	80016a6 <GPIO_Init+0x1a6>
 80016a2:	2307      	movs	r3, #7
 80016a4:	e00e      	b.n	80016c4 <GPIO_Init+0x1c4>
 80016a6:	2308      	movs	r3, #8
 80016a8:	e00c      	b.n	80016c4 <GPIO_Init+0x1c4>
 80016aa:	2306      	movs	r3, #6
 80016ac:	e00a      	b.n	80016c4 <GPIO_Init+0x1c4>
 80016ae:	2305      	movs	r3, #5
 80016b0:	e008      	b.n	80016c4 <GPIO_Init+0x1c4>
 80016b2:	2304      	movs	r3, #4
 80016b4:	e006      	b.n	80016c4 <GPIO_Init+0x1c4>
 80016b6:	2303      	movs	r3, #3
 80016b8:	e004      	b.n	80016c4 <GPIO_Init+0x1c4>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e002      	b.n	80016c4 <GPIO_Init+0x1c4>
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <GPIO_Init+0x1c4>
 80016c2:	2300      	movs	r3, #0
 80016c4:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80016c6:	f001 0103 	and.w	r1, r1, #3
 80016ca:	0089      	lsls	r1, r1, #2
 80016cc:	408b      	lsls	r3, r1
 80016ce:	481a      	ldr	r0, [pc, #104]	; (8001738 <GPIO_Init+0x238>)
 80016d0:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80016d2:	0889      	lsrs	r1, r1, #2
 80016d4:	b289      	uxth	r1, r1
 80016d6:	431a      	orrs	r2, r3
 80016d8:	1c8b      	adds	r3, r1, #2
 80016da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

				//Enable the EXTI interrupt delivery using IMR
				EXTI->IMR |= (1 << i);
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <GPIO_Init+0x234>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80016e4:	2101      	movs	r1, #1
 80016e6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ea:	4611      	mov	r1, r2
 80016ec:	4a11      	ldr	r2, [pc, #68]	; (8001734 <GPIO_Init+0x234>)
 80016ee:	430b      	orrs	r3, r1
 80016f0:	6013      	str	r3, [r2, #0]
			}

			//Handle the MODER register
			GPIOx->MODER |= (GPIOx_PinConf.GPIO_PinMode << i * 2U);
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	68f9      	ldr	r1, [r7, #12]
 80016f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	431a      	orrs	r2, r3
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	601a      	str	r2, [r3, #0]

			//Handle the PuPdCtrl Register
			GPIOx->PUPDR |= (GPIOx_PinConf.GPIO_PinPuPdCtrl << i * 2U);
 8001706:	6a3b      	ldr	r3, [r7, #32]
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	6979      	ldr	r1, [r7, #20]
 800170c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa01 f303 	lsl.w	r3, r1, r3
 8001714:	431a      	orrs	r2, r3
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	60da      	str	r2, [r3, #12]
	for (uint16_t i = 0U; i < GPIO_PIN_NUMBER; i++) {
 800171a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800171c:	3301      	adds	r3, #1
 800171e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001720:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001722:	2b0f      	cmp	r3, #15
 8001724:	f67f af04 	bls.w	8001530 <GPIO_Init+0x30>
		}
	}
}
 8001728:	bf00      	nop
 800172a:	3728      	adds	r7, #40	; 0x28
 800172c:	46bd      	mov	sp, r7
 800172e:	bdb0      	pop	{r4, r5, r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	40013c00 	.word	0x40013c00
 8001738:	40013800 	.word	0x40013800
 800173c:	40020000 	.word	0x40020000
 8001740:	40020400 	.word	0x40020400
 8001744:	40020800 	.word	0x40020800
 8001748:	40020c00 	.word	0x40020c00
 800174c:	40020100 	.word	0x40020100
 8001750:	40021400 	.word	0x40021400
 8001754:	40021800 	.word	0x40021800
 8001758:	40021c00 	.word	0x40021c00

0800175c <GPIO_DeInit>:
 *
 * @return				- none
 * @note				-  Consult the RCC Peripheral reset registers to reset
 * 					       all the registers of the peripherals
 */
void GPIO_DeInit(GPIO_Reg_t *pGPIOx) {
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

	//Reset all the registers of the respective GPIO peripherals
	if (pGPIOx == GPIOA) {
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a5f      	ldr	r2, [pc, #380]	; (80018e4 <GPIO_DeInit+0x188>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d10c      	bne.n	8001786 <GPIO_DeInit+0x2a>
		GPIOA_PCLK_RST();
 800176c:	4b5e      	ldr	r3, [pc, #376]	; (80018e8 <GPIO_DeInit+0x18c>)
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	4a5d      	ldr	r2, [pc, #372]	; (80018e8 <GPIO_DeInit+0x18c>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6113      	str	r3, [r2, #16]
 8001778:	4b5b      	ldr	r3, [pc, #364]	; (80018e8 <GPIO_DeInit+0x18c>)
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	4a5a      	ldr	r2, [pc, #360]	; (80018e8 <GPIO_DeInit+0x18c>)
 800177e:	f023 0301 	bic.w	r3, r3, #1
 8001782:	6113      	str	r3, [r2, #16]
	} else if (pGPIOx == GPIOJ) {
		GPIOJ_PCLK_RST();
	} else if (pGPIOx == GPIOK) {
		GPIOK_PCLK_RST();
	}
}
 8001784:	e0a8      	b.n	80018d8 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOB) {
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a58      	ldr	r2, [pc, #352]	; (80018ec <GPIO_DeInit+0x190>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d10c      	bne.n	80017a8 <GPIO_DeInit+0x4c>
		GPIOB_PCLK_RST();
 800178e:	4b56      	ldr	r3, [pc, #344]	; (80018e8 <GPIO_DeInit+0x18c>)
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	4a55      	ldr	r2, [pc, #340]	; (80018e8 <GPIO_DeInit+0x18c>)
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	6113      	str	r3, [r2, #16]
 800179a:	4b53      	ldr	r3, [pc, #332]	; (80018e8 <GPIO_DeInit+0x18c>)
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	4a52      	ldr	r2, [pc, #328]	; (80018e8 <GPIO_DeInit+0x18c>)
 80017a0:	f023 0302 	bic.w	r3, r3, #2
 80017a4:	6113      	str	r3, [r2, #16]
}
 80017a6:	e097      	b.n	80018d8 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOC) {
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a51      	ldr	r2, [pc, #324]	; (80018f0 <GPIO_DeInit+0x194>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d10c      	bne.n	80017ca <GPIO_DeInit+0x6e>
		GPIOC_PCLK_RST();
 80017b0:	4b4d      	ldr	r3, [pc, #308]	; (80018e8 <GPIO_DeInit+0x18c>)
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	4a4c      	ldr	r2, [pc, #304]	; (80018e8 <GPIO_DeInit+0x18c>)
 80017b6:	f043 0304 	orr.w	r3, r3, #4
 80017ba:	6113      	str	r3, [r2, #16]
 80017bc:	4b4a      	ldr	r3, [pc, #296]	; (80018e8 <GPIO_DeInit+0x18c>)
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	4a49      	ldr	r2, [pc, #292]	; (80018e8 <GPIO_DeInit+0x18c>)
 80017c2:	f023 0304 	bic.w	r3, r3, #4
 80017c6:	6113      	str	r3, [r2, #16]
}
 80017c8:	e086      	b.n	80018d8 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOD) {
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a49      	ldr	r2, [pc, #292]	; (80018f4 <GPIO_DeInit+0x198>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d10c      	bne.n	80017ec <GPIO_DeInit+0x90>
		GPIOD_PCLK_RST();
 80017d2:	4b45      	ldr	r3, [pc, #276]	; (80018e8 <GPIO_DeInit+0x18c>)
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	4a44      	ldr	r2, [pc, #272]	; (80018e8 <GPIO_DeInit+0x18c>)
 80017d8:	f043 0308 	orr.w	r3, r3, #8
 80017dc:	6113      	str	r3, [r2, #16]
 80017de:	4b42      	ldr	r3, [pc, #264]	; (80018e8 <GPIO_DeInit+0x18c>)
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	4a41      	ldr	r2, [pc, #260]	; (80018e8 <GPIO_DeInit+0x18c>)
 80017e4:	f023 0308 	bic.w	r3, r3, #8
 80017e8:	6113      	str	r3, [r2, #16]
}
 80017ea:	e075      	b.n	80018d8 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOE) {
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a42      	ldr	r2, [pc, #264]	; (80018f8 <GPIO_DeInit+0x19c>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d10c      	bne.n	800180e <GPIO_DeInit+0xb2>
		GPIOE_PCLK_RST();
 80017f4:	4b3c      	ldr	r3, [pc, #240]	; (80018e8 <GPIO_DeInit+0x18c>)
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	4a3b      	ldr	r2, [pc, #236]	; (80018e8 <GPIO_DeInit+0x18c>)
 80017fa:	f043 0310 	orr.w	r3, r3, #16
 80017fe:	6113      	str	r3, [r2, #16]
 8001800:	4b39      	ldr	r3, [pc, #228]	; (80018e8 <GPIO_DeInit+0x18c>)
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	4a38      	ldr	r2, [pc, #224]	; (80018e8 <GPIO_DeInit+0x18c>)
 8001806:	f023 0310 	bic.w	r3, r3, #16
 800180a:	6113      	str	r3, [r2, #16]
}
 800180c:	e064      	b.n	80018d8 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOF) {
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a3a      	ldr	r2, [pc, #232]	; (80018fc <GPIO_DeInit+0x1a0>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d10c      	bne.n	8001830 <GPIO_DeInit+0xd4>
		GPIOF_PCLK_RST();
 8001816:	4b34      	ldr	r3, [pc, #208]	; (80018e8 <GPIO_DeInit+0x18c>)
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	4a33      	ldr	r2, [pc, #204]	; (80018e8 <GPIO_DeInit+0x18c>)
 800181c:	f043 0320 	orr.w	r3, r3, #32
 8001820:	6113      	str	r3, [r2, #16]
 8001822:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <GPIO_DeInit+0x18c>)
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	4a30      	ldr	r2, [pc, #192]	; (80018e8 <GPIO_DeInit+0x18c>)
 8001828:	f023 0320 	bic.w	r3, r3, #32
 800182c:	6113      	str	r3, [r2, #16]
}
 800182e:	e053      	b.n	80018d8 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOG) {
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a33      	ldr	r2, [pc, #204]	; (8001900 <GPIO_DeInit+0x1a4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d10c      	bne.n	8001852 <GPIO_DeInit+0xf6>
		GPIOG_PCLK_RST();
 8001838:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <GPIO_DeInit+0x18c>)
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	4a2a      	ldr	r2, [pc, #168]	; (80018e8 <GPIO_DeInit+0x18c>)
 800183e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001842:	6113      	str	r3, [r2, #16]
 8001844:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <GPIO_DeInit+0x18c>)
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	4a27      	ldr	r2, [pc, #156]	; (80018e8 <GPIO_DeInit+0x18c>)
 800184a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800184e:	6113      	str	r3, [r2, #16]
}
 8001850:	e042      	b.n	80018d8 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOH) {
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a2b      	ldr	r2, [pc, #172]	; (8001904 <GPIO_DeInit+0x1a8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d10c      	bne.n	8001874 <GPIO_DeInit+0x118>
		GPIOH_PCLK_RST();
 800185a:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <GPIO_DeInit+0x18c>)
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	4a22      	ldr	r2, [pc, #136]	; (80018e8 <GPIO_DeInit+0x18c>)
 8001860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001864:	6113      	str	r3, [r2, #16]
 8001866:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <GPIO_DeInit+0x18c>)
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	4a1f      	ldr	r2, [pc, #124]	; (80018e8 <GPIO_DeInit+0x18c>)
 800186c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001870:	6113      	str	r3, [r2, #16]
}
 8001872:	e031      	b.n	80018d8 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOI) {
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a24      	ldr	r2, [pc, #144]	; (8001908 <GPIO_DeInit+0x1ac>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d10c      	bne.n	8001896 <GPIO_DeInit+0x13a>
		GPIOI_PCLK_RST();
 800187c:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <GPIO_DeInit+0x18c>)
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	4a19      	ldr	r2, [pc, #100]	; (80018e8 <GPIO_DeInit+0x18c>)
 8001882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001886:	6113      	str	r3, [r2, #16]
 8001888:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <GPIO_DeInit+0x18c>)
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	4a16      	ldr	r2, [pc, #88]	; (80018e8 <GPIO_DeInit+0x18c>)
 800188e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001892:	6113      	str	r3, [r2, #16]
}
 8001894:	e020      	b.n	80018d8 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOJ) {
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a1c      	ldr	r2, [pc, #112]	; (800190c <GPIO_DeInit+0x1b0>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d10c      	bne.n	80018b8 <GPIO_DeInit+0x15c>
		GPIOJ_PCLK_RST();
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <GPIO_DeInit+0x18c>)
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <GPIO_DeInit+0x18c>)
 80018a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a8:	6113      	str	r3, [r2, #16]
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <GPIO_DeInit+0x18c>)
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	4a0e      	ldr	r2, [pc, #56]	; (80018e8 <GPIO_DeInit+0x18c>)
 80018b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018b4:	6113      	str	r3, [r2, #16]
}
 80018b6:	e00f      	b.n	80018d8 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOK) {
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a15      	ldr	r2, [pc, #84]	; (8001910 <GPIO_DeInit+0x1b4>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d10b      	bne.n	80018d8 <GPIO_DeInit+0x17c>
		GPIOK_PCLK_RST();
 80018c0:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <GPIO_DeInit+0x18c>)
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	4a08      	ldr	r2, [pc, #32]	; (80018e8 <GPIO_DeInit+0x18c>)
 80018c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ca:	6113      	str	r3, [r2, #16]
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <GPIO_DeInit+0x18c>)
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <GPIO_DeInit+0x18c>)
 80018d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018d6:	6113      	str	r3, [r2, #16]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	40020000 	.word	0x40020000
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40020400 	.word	0x40020400
 80018f0:	40020800 	.word	0x40020800
 80018f4:	40020c00 	.word	0x40020c00
 80018f8:	40020100 	.word	0x40020100
 80018fc:	40021400 	.word	0x40021400
 8001900:	40021800 	.word	0x40021800
 8001904:	40021c00 	.word	0x40021c00
 8001908:	40022000 	.word	0x40022000
 800190c:	40022400 	.word	0x40022400
 8001910:	40022800 	.word	0x40022800

08001914 <GPIO_ReadFromInputPin>:
 * @param[in]			- The pin number
 *
 * @return				- unsigned 8 bit integer
 * @note				- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_Reg_t* pGPIOx, uint16_t pinNumber) {
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]
	//value = (uint8_t) ((pGPIOx->IDR & (1 << pinNumber)) >> pinNumber);
	/*or value = (uint8_t) ((pGPIOx->IDR >> pinNumber) & 0x1);*/
	return ((pGPIOx->IDR & pinNumber) == pinNumber) ? 1 : 0;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691a      	ldr	r2, [r3, #16]
 8001924:	887b      	ldrh	r3, [r7, #2]
 8001926:	401a      	ands	r2, r3
 8001928:	887b      	ldrh	r3, [r7, #2]
 800192a:	429a      	cmp	r2, r3
 800192c:	bf0c      	ite	eq
 800192e:	2301      	moveq	r3, #1
 8001930:	2300      	movne	r3, #0
 8001932:	b2db      	uxtb	r3, r3
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <__errno>:
 8001940:	4b01      	ldr	r3, [pc, #4]	; (8001948 <__errno+0x8>)
 8001942:	6818      	ldr	r0, [r3, #0]
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000000 	.word	0x20000000

0800194c <__libc_init_array>:
 800194c:	b570      	push	{r4, r5, r6, lr}
 800194e:	4e0d      	ldr	r6, [pc, #52]	; (8001984 <__libc_init_array+0x38>)
 8001950:	4c0d      	ldr	r4, [pc, #52]	; (8001988 <__libc_init_array+0x3c>)
 8001952:	1ba4      	subs	r4, r4, r6
 8001954:	10a4      	asrs	r4, r4, #2
 8001956:	2500      	movs	r5, #0
 8001958:	42a5      	cmp	r5, r4
 800195a:	d109      	bne.n	8001970 <__libc_init_array+0x24>
 800195c:	4e0b      	ldr	r6, [pc, #44]	; (800198c <__libc_init_array+0x40>)
 800195e:	4c0c      	ldr	r4, [pc, #48]	; (8001990 <__libc_init_array+0x44>)
 8001960:	f000 ff04 	bl	800276c <_init>
 8001964:	1ba4      	subs	r4, r4, r6
 8001966:	10a4      	asrs	r4, r4, #2
 8001968:	2500      	movs	r5, #0
 800196a:	42a5      	cmp	r5, r4
 800196c:	d105      	bne.n	800197a <__libc_init_array+0x2e>
 800196e:	bd70      	pop	{r4, r5, r6, pc}
 8001970:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001974:	4798      	blx	r3
 8001976:	3501      	adds	r5, #1
 8001978:	e7ee      	b.n	8001958 <__libc_init_array+0xc>
 800197a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800197e:	4798      	blx	r3
 8001980:	3501      	adds	r5, #1
 8001982:	e7f2      	b.n	800196a <__libc_init_array+0x1e>
 8001984:	08002848 	.word	0x08002848
 8001988:	08002848 	.word	0x08002848
 800198c:	08002848 	.word	0x08002848
 8001990:	0800284c 	.word	0x0800284c

08001994 <memset>:
 8001994:	4402      	add	r2, r0
 8001996:	4603      	mov	r3, r0
 8001998:	4293      	cmp	r3, r2
 800199a:	d100      	bne.n	800199e <memset+0xa>
 800199c:	4770      	bx	lr
 800199e:	f803 1b01 	strb.w	r1, [r3], #1
 80019a2:	e7f9      	b.n	8001998 <memset+0x4>

080019a4 <iprintf>:
 80019a4:	b40f      	push	{r0, r1, r2, r3}
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <iprintf+0x2c>)
 80019a8:	b513      	push	{r0, r1, r4, lr}
 80019aa:	681c      	ldr	r4, [r3, #0]
 80019ac:	b124      	cbz	r4, 80019b8 <iprintf+0x14>
 80019ae:	69a3      	ldr	r3, [r4, #24]
 80019b0:	b913      	cbnz	r3, 80019b8 <iprintf+0x14>
 80019b2:	4620      	mov	r0, r4
 80019b4:	f000 f84e 	bl	8001a54 <__sinit>
 80019b8:	ab05      	add	r3, sp, #20
 80019ba:	9a04      	ldr	r2, [sp, #16]
 80019bc:	68a1      	ldr	r1, [r4, #8]
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	4620      	mov	r0, r4
 80019c2:	f000 f955 	bl	8001c70 <_vfiprintf_r>
 80019c6:	b002      	add	sp, #8
 80019c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019cc:	b004      	add	sp, #16
 80019ce:	4770      	bx	lr
 80019d0:	20000000 	.word	0x20000000

080019d4 <std>:
 80019d4:	2300      	movs	r3, #0
 80019d6:	b510      	push	{r4, lr}
 80019d8:	4604      	mov	r4, r0
 80019da:	e9c0 3300 	strd	r3, r3, [r0]
 80019de:	6083      	str	r3, [r0, #8]
 80019e0:	8181      	strh	r1, [r0, #12]
 80019e2:	6643      	str	r3, [r0, #100]	; 0x64
 80019e4:	81c2      	strh	r2, [r0, #14]
 80019e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80019ea:	6183      	str	r3, [r0, #24]
 80019ec:	4619      	mov	r1, r3
 80019ee:	2208      	movs	r2, #8
 80019f0:	305c      	adds	r0, #92	; 0x5c
 80019f2:	f7ff ffcf 	bl	8001994 <memset>
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <std+0x38>)
 80019f8:	6263      	str	r3, [r4, #36]	; 0x24
 80019fa:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <std+0x3c>)
 80019fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <std+0x40>)
 8001a00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <std+0x44>)
 8001a04:	6224      	str	r4, [r4, #32]
 8001a06:	6323      	str	r3, [r4, #48]	; 0x30
 8001a08:	bd10      	pop	{r4, pc}
 8001a0a:	bf00      	nop
 8001a0c:	080021cd 	.word	0x080021cd
 8001a10:	080021ef 	.word	0x080021ef
 8001a14:	08002227 	.word	0x08002227
 8001a18:	0800224b 	.word	0x0800224b

08001a1c <_cleanup_r>:
 8001a1c:	4901      	ldr	r1, [pc, #4]	; (8001a24 <_cleanup_r+0x8>)
 8001a1e:	f000 b885 	b.w	8001b2c <_fwalk_reent>
 8001a22:	bf00      	nop
 8001a24:	08002525 	.word	0x08002525

08001a28 <__sfmoreglue>:
 8001a28:	b570      	push	{r4, r5, r6, lr}
 8001a2a:	1e4a      	subs	r2, r1, #1
 8001a2c:	2568      	movs	r5, #104	; 0x68
 8001a2e:	4355      	muls	r5, r2
 8001a30:	460e      	mov	r6, r1
 8001a32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001a36:	f000 f897 	bl	8001b68 <_malloc_r>
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	b140      	cbz	r0, 8001a50 <__sfmoreglue+0x28>
 8001a3e:	2100      	movs	r1, #0
 8001a40:	e9c0 1600 	strd	r1, r6, [r0]
 8001a44:	300c      	adds	r0, #12
 8001a46:	60a0      	str	r0, [r4, #8]
 8001a48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001a4c:	f7ff ffa2 	bl	8001994 <memset>
 8001a50:	4620      	mov	r0, r4
 8001a52:	bd70      	pop	{r4, r5, r6, pc}

08001a54 <__sinit>:
 8001a54:	6983      	ldr	r3, [r0, #24]
 8001a56:	b510      	push	{r4, lr}
 8001a58:	4604      	mov	r4, r0
 8001a5a:	bb33      	cbnz	r3, 8001aaa <__sinit+0x56>
 8001a5c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001a60:	6503      	str	r3, [r0, #80]	; 0x50
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <__sinit+0x58>)
 8001a64:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <__sinit+0x5c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6282      	str	r2, [r0, #40]	; 0x28
 8001a6a:	4298      	cmp	r0, r3
 8001a6c:	bf04      	itt	eq
 8001a6e:	2301      	moveq	r3, #1
 8001a70:	6183      	streq	r3, [r0, #24]
 8001a72:	f000 f81f 	bl	8001ab4 <__sfp>
 8001a76:	6060      	str	r0, [r4, #4]
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f000 f81b 	bl	8001ab4 <__sfp>
 8001a7e:	60a0      	str	r0, [r4, #8]
 8001a80:	4620      	mov	r0, r4
 8001a82:	f000 f817 	bl	8001ab4 <__sfp>
 8001a86:	2200      	movs	r2, #0
 8001a88:	60e0      	str	r0, [r4, #12]
 8001a8a:	2104      	movs	r1, #4
 8001a8c:	6860      	ldr	r0, [r4, #4]
 8001a8e:	f7ff ffa1 	bl	80019d4 <std>
 8001a92:	2201      	movs	r2, #1
 8001a94:	2109      	movs	r1, #9
 8001a96:	68a0      	ldr	r0, [r4, #8]
 8001a98:	f7ff ff9c 	bl	80019d4 <std>
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	2112      	movs	r1, #18
 8001aa0:	68e0      	ldr	r0, [r4, #12]
 8001aa2:	f7ff ff97 	bl	80019d4 <std>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	61a3      	str	r3, [r4, #24]
 8001aaa:	bd10      	pop	{r4, pc}
 8001aac:	080027b0 	.word	0x080027b0
 8001ab0:	08001a1d 	.word	0x08001a1d

08001ab4 <__sfp>:
 8001ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <__sfp+0x70>)
 8001ab8:	681e      	ldr	r6, [r3, #0]
 8001aba:	69b3      	ldr	r3, [r6, #24]
 8001abc:	4607      	mov	r7, r0
 8001abe:	b913      	cbnz	r3, 8001ac6 <__sfp+0x12>
 8001ac0:	4630      	mov	r0, r6
 8001ac2:	f7ff ffc7 	bl	8001a54 <__sinit>
 8001ac6:	3648      	adds	r6, #72	; 0x48
 8001ac8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	d503      	bpl.n	8001ad8 <__sfp+0x24>
 8001ad0:	6833      	ldr	r3, [r6, #0]
 8001ad2:	b133      	cbz	r3, 8001ae2 <__sfp+0x2e>
 8001ad4:	6836      	ldr	r6, [r6, #0]
 8001ad6:	e7f7      	b.n	8001ac8 <__sfp+0x14>
 8001ad8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001adc:	b16d      	cbz	r5, 8001afa <__sfp+0x46>
 8001ade:	3468      	adds	r4, #104	; 0x68
 8001ae0:	e7f4      	b.n	8001acc <__sfp+0x18>
 8001ae2:	2104      	movs	r1, #4
 8001ae4:	4638      	mov	r0, r7
 8001ae6:	f7ff ff9f 	bl	8001a28 <__sfmoreglue>
 8001aea:	6030      	str	r0, [r6, #0]
 8001aec:	2800      	cmp	r0, #0
 8001aee:	d1f1      	bne.n	8001ad4 <__sfp+0x20>
 8001af0:	230c      	movs	r3, #12
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	4604      	mov	r4, r0
 8001af6:	4620      	mov	r0, r4
 8001af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <__sfp+0x74>)
 8001afc:	6665      	str	r5, [r4, #100]	; 0x64
 8001afe:	e9c4 5500 	strd	r5, r5, [r4]
 8001b02:	60a5      	str	r5, [r4, #8]
 8001b04:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001b08:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	4629      	mov	r1, r5
 8001b10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001b14:	f7ff ff3e 	bl	8001994 <memset>
 8001b18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001b1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001b20:	e7e9      	b.n	8001af6 <__sfp+0x42>
 8001b22:	bf00      	nop
 8001b24:	080027b0 	.word	0x080027b0
 8001b28:	ffff0001 	.word	0xffff0001

08001b2c <_fwalk_reent>:
 8001b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b30:	4680      	mov	r8, r0
 8001b32:	4689      	mov	r9, r1
 8001b34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001b38:	2600      	movs	r6, #0
 8001b3a:	b914      	cbnz	r4, 8001b42 <_fwalk_reent+0x16>
 8001b3c:	4630      	mov	r0, r6
 8001b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b42:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001b46:	3f01      	subs	r7, #1
 8001b48:	d501      	bpl.n	8001b4e <_fwalk_reent+0x22>
 8001b4a:	6824      	ldr	r4, [r4, #0]
 8001b4c:	e7f5      	b.n	8001b3a <_fwalk_reent+0xe>
 8001b4e:	89ab      	ldrh	r3, [r5, #12]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d907      	bls.n	8001b64 <_fwalk_reent+0x38>
 8001b54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	d003      	beq.n	8001b64 <_fwalk_reent+0x38>
 8001b5c:	4629      	mov	r1, r5
 8001b5e:	4640      	mov	r0, r8
 8001b60:	47c8      	blx	r9
 8001b62:	4306      	orrs	r6, r0
 8001b64:	3568      	adds	r5, #104	; 0x68
 8001b66:	e7ee      	b.n	8001b46 <_fwalk_reent+0x1a>

08001b68 <_malloc_r>:
 8001b68:	b570      	push	{r4, r5, r6, lr}
 8001b6a:	1ccd      	adds	r5, r1, #3
 8001b6c:	f025 0503 	bic.w	r5, r5, #3
 8001b70:	3508      	adds	r5, #8
 8001b72:	2d0c      	cmp	r5, #12
 8001b74:	bf38      	it	cc
 8001b76:	250c      	movcc	r5, #12
 8001b78:	2d00      	cmp	r5, #0
 8001b7a:	4606      	mov	r6, r0
 8001b7c:	db01      	blt.n	8001b82 <_malloc_r+0x1a>
 8001b7e:	42a9      	cmp	r1, r5
 8001b80:	d903      	bls.n	8001b8a <_malloc_r+0x22>
 8001b82:	230c      	movs	r3, #12
 8001b84:	6033      	str	r3, [r6, #0]
 8001b86:	2000      	movs	r0, #0
 8001b88:	bd70      	pop	{r4, r5, r6, pc}
 8001b8a:	f000 fd6b 	bl	8002664 <__malloc_lock>
 8001b8e:	4a21      	ldr	r2, [pc, #132]	; (8001c14 <_malloc_r+0xac>)
 8001b90:	6814      	ldr	r4, [r2, #0]
 8001b92:	4621      	mov	r1, r4
 8001b94:	b991      	cbnz	r1, 8001bbc <_malloc_r+0x54>
 8001b96:	4c20      	ldr	r4, [pc, #128]	; (8001c18 <_malloc_r+0xb0>)
 8001b98:	6823      	ldr	r3, [r4, #0]
 8001b9a:	b91b      	cbnz	r3, 8001ba4 <_malloc_r+0x3c>
 8001b9c:	4630      	mov	r0, r6
 8001b9e:	f000 fb05 	bl	80021ac <_sbrk_r>
 8001ba2:	6020      	str	r0, [r4, #0]
 8001ba4:	4629      	mov	r1, r5
 8001ba6:	4630      	mov	r0, r6
 8001ba8:	f000 fb00 	bl	80021ac <_sbrk_r>
 8001bac:	1c43      	adds	r3, r0, #1
 8001bae:	d124      	bne.n	8001bfa <_malloc_r+0x92>
 8001bb0:	230c      	movs	r3, #12
 8001bb2:	6033      	str	r3, [r6, #0]
 8001bb4:	4630      	mov	r0, r6
 8001bb6:	f000 fd56 	bl	8002666 <__malloc_unlock>
 8001bba:	e7e4      	b.n	8001b86 <_malloc_r+0x1e>
 8001bbc:	680b      	ldr	r3, [r1, #0]
 8001bbe:	1b5b      	subs	r3, r3, r5
 8001bc0:	d418      	bmi.n	8001bf4 <_malloc_r+0x8c>
 8001bc2:	2b0b      	cmp	r3, #11
 8001bc4:	d90f      	bls.n	8001be6 <_malloc_r+0x7e>
 8001bc6:	600b      	str	r3, [r1, #0]
 8001bc8:	50cd      	str	r5, [r1, r3]
 8001bca:	18cc      	adds	r4, r1, r3
 8001bcc:	4630      	mov	r0, r6
 8001bce:	f000 fd4a 	bl	8002666 <__malloc_unlock>
 8001bd2:	f104 000b 	add.w	r0, r4, #11
 8001bd6:	1d23      	adds	r3, r4, #4
 8001bd8:	f020 0007 	bic.w	r0, r0, #7
 8001bdc:	1ac3      	subs	r3, r0, r3
 8001bde:	d0d3      	beq.n	8001b88 <_malloc_r+0x20>
 8001be0:	425a      	negs	r2, r3
 8001be2:	50e2      	str	r2, [r4, r3]
 8001be4:	e7d0      	b.n	8001b88 <_malloc_r+0x20>
 8001be6:	428c      	cmp	r4, r1
 8001be8:	684b      	ldr	r3, [r1, #4]
 8001bea:	bf16      	itet	ne
 8001bec:	6063      	strne	r3, [r4, #4]
 8001bee:	6013      	streq	r3, [r2, #0]
 8001bf0:	460c      	movne	r4, r1
 8001bf2:	e7eb      	b.n	8001bcc <_malloc_r+0x64>
 8001bf4:	460c      	mov	r4, r1
 8001bf6:	6849      	ldr	r1, [r1, #4]
 8001bf8:	e7cc      	b.n	8001b94 <_malloc_r+0x2c>
 8001bfa:	1cc4      	adds	r4, r0, #3
 8001bfc:	f024 0403 	bic.w	r4, r4, #3
 8001c00:	42a0      	cmp	r0, r4
 8001c02:	d005      	beq.n	8001c10 <_malloc_r+0xa8>
 8001c04:	1a21      	subs	r1, r4, r0
 8001c06:	4630      	mov	r0, r6
 8001c08:	f000 fad0 	bl	80021ac <_sbrk_r>
 8001c0c:	3001      	adds	r0, #1
 8001c0e:	d0cf      	beq.n	8001bb0 <_malloc_r+0x48>
 8001c10:	6025      	str	r5, [r4, #0]
 8001c12:	e7db      	b.n	8001bcc <_malloc_r+0x64>
 8001c14:	20000088 	.word	0x20000088
 8001c18:	2000008c 	.word	0x2000008c

08001c1c <__sfputc_r>:
 8001c1c:	6893      	ldr	r3, [r2, #8]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	b410      	push	{r4}
 8001c24:	6093      	str	r3, [r2, #8]
 8001c26:	da08      	bge.n	8001c3a <__sfputc_r+0x1e>
 8001c28:	6994      	ldr	r4, [r2, #24]
 8001c2a:	42a3      	cmp	r3, r4
 8001c2c:	db01      	blt.n	8001c32 <__sfputc_r+0x16>
 8001c2e:	290a      	cmp	r1, #10
 8001c30:	d103      	bne.n	8001c3a <__sfputc_r+0x1e>
 8001c32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c36:	f000 bb0d 	b.w	8002254 <__swbuf_r>
 8001c3a:	6813      	ldr	r3, [r2, #0]
 8001c3c:	1c58      	adds	r0, r3, #1
 8001c3e:	6010      	str	r0, [r2, #0]
 8001c40:	7019      	strb	r1, [r3, #0]
 8001c42:	4608      	mov	r0, r1
 8001c44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <__sfputs_r>:
 8001c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c4c:	4606      	mov	r6, r0
 8001c4e:	460f      	mov	r7, r1
 8001c50:	4614      	mov	r4, r2
 8001c52:	18d5      	adds	r5, r2, r3
 8001c54:	42ac      	cmp	r4, r5
 8001c56:	d101      	bne.n	8001c5c <__sfputs_r+0x12>
 8001c58:	2000      	movs	r0, #0
 8001c5a:	e007      	b.n	8001c6c <__sfputs_r+0x22>
 8001c5c:	463a      	mov	r2, r7
 8001c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c62:	4630      	mov	r0, r6
 8001c64:	f7ff ffda 	bl	8001c1c <__sfputc_r>
 8001c68:	1c43      	adds	r3, r0, #1
 8001c6a:	d1f3      	bne.n	8001c54 <__sfputs_r+0xa>
 8001c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001c70 <_vfiprintf_r>:
 8001c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c74:	460c      	mov	r4, r1
 8001c76:	b09d      	sub	sp, #116	; 0x74
 8001c78:	4617      	mov	r7, r2
 8001c7a:	461d      	mov	r5, r3
 8001c7c:	4606      	mov	r6, r0
 8001c7e:	b118      	cbz	r0, 8001c88 <_vfiprintf_r+0x18>
 8001c80:	6983      	ldr	r3, [r0, #24]
 8001c82:	b90b      	cbnz	r3, 8001c88 <_vfiprintf_r+0x18>
 8001c84:	f7ff fee6 	bl	8001a54 <__sinit>
 8001c88:	4b7c      	ldr	r3, [pc, #496]	; (8001e7c <_vfiprintf_r+0x20c>)
 8001c8a:	429c      	cmp	r4, r3
 8001c8c:	d158      	bne.n	8001d40 <_vfiprintf_r+0xd0>
 8001c8e:	6874      	ldr	r4, [r6, #4]
 8001c90:	89a3      	ldrh	r3, [r4, #12]
 8001c92:	0718      	lsls	r0, r3, #28
 8001c94:	d55e      	bpl.n	8001d54 <_vfiprintf_r+0xe4>
 8001c96:	6923      	ldr	r3, [r4, #16]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d05b      	beq.n	8001d54 <_vfiprintf_r+0xe4>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8001ca0:	2320      	movs	r3, #32
 8001ca2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ca6:	2330      	movs	r3, #48	; 0x30
 8001ca8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001cac:	9503      	str	r5, [sp, #12]
 8001cae:	f04f 0b01 	mov.w	fp, #1
 8001cb2:	46b8      	mov	r8, r7
 8001cb4:	4645      	mov	r5, r8
 8001cb6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001cba:	b10b      	cbz	r3, 8001cc0 <_vfiprintf_r+0x50>
 8001cbc:	2b25      	cmp	r3, #37	; 0x25
 8001cbe:	d154      	bne.n	8001d6a <_vfiprintf_r+0xfa>
 8001cc0:	ebb8 0a07 	subs.w	sl, r8, r7
 8001cc4:	d00b      	beq.n	8001cde <_vfiprintf_r+0x6e>
 8001cc6:	4653      	mov	r3, sl
 8001cc8:	463a      	mov	r2, r7
 8001cca:	4621      	mov	r1, r4
 8001ccc:	4630      	mov	r0, r6
 8001cce:	f7ff ffbc 	bl	8001c4a <__sfputs_r>
 8001cd2:	3001      	adds	r0, #1
 8001cd4:	f000 80c2 	beq.w	8001e5c <_vfiprintf_r+0x1ec>
 8001cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cda:	4453      	add	r3, sl
 8001cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8001cde:	f898 3000 	ldrb.w	r3, [r8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 80ba 	beq.w	8001e5c <_vfiprintf_r+0x1ec>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f04f 32ff 	mov.w	r2, #4294967295
 8001cee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001cf2:	9304      	str	r3, [sp, #16]
 8001cf4:	9307      	str	r3, [sp, #28]
 8001cf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001cfa:	931a      	str	r3, [sp, #104]	; 0x68
 8001cfc:	46a8      	mov	r8, r5
 8001cfe:	2205      	movs	r2, #5
 8001d00:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001d04:	485e      	ldr	r0, [pc, #376]	; (8001e80 <_vfiprintf_r+0x210>)
 8001d06:	f7fe fa73 	bl	80001f0 <memchr>
 8001d0a:	9b04      	ldr	r3, [sp, #16]
 8001d0c:	bb78      	cbnz	r0, 8001d6e <_vfiprintf_r+0xfe>
 8001d0e:	06d9      	lsls	r1, r3, #27
 8001d10:	bf44      	itt	mi
 8001d12:	2220      	movmi	r2, #32
 8001d14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d18:	071a      	lsls	r2, r3, #28
 8001d1a:	bf44      	itt	mi
 8001d1c:	222b      	movmi	r2, #43	; 0x2b
 8001d1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d22:	782a      	ldrb	r2, [r5, #0]
 8001d24:	2a2a      	cmp	r2, #42	; 0x2a
 8001d26:	d02a      	beq.n	8001d7e <_vfiprintf_r+0x10e>
 8001d28:	9a07      	ldr	r2, [sp, #28]
 8001d2a:	46a8      	mov	r8, r5
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	250a      	movs	r5, #10
 8001d30:	4641      	mov	r1, r8
 8001d32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001d36:	3b30      	subs	r3, #48	; 0x30
 8001d38:	2b09      	cmp	r3, #9
 8001d3a:	d969      	bls.n	8001e10 <_vfiprintf_r+0x1a0>
 8001d3c:	b360      	cbz	r0, 8001d98 <_vfiprintf_r+0x128>
 8001d3e:	e024      	b.n	8001d8a <_vfiprintf_r+0x11a>
 8001d40:	4b50      	ldr	r3, [pc, #320]	; (8001e84 <_vfiprintf_r+0x214>)
 8001d42:	429c      	cmp	r4, r3
 8001d44:	d101      	bne.n	8001d4a <_vfiprintf_r+0xda>
 8001d46:	68b4      	ldr	r4, [r6, #8]
 8001d48:	e7a2      	b.n	8001c90 <_vfiprintf_r+0x20>
 8001d4a:	4b4f      	ldr	r3, [pc, #316]	; (8001e88 <_vfiprintf_r+0x218>)
 8001d4c:	429c      	cmp	r4, r3
 8001d4e:	bf08      	it	eq
 8001d50:	68f4      	ldreq	r4, [r6, #12]
 8001d52:	e79d      	b.n	8001c90 <_vfiprintf_r+0x20>
 8001d54:	4621      	mov	r1, r4
 8001d56:	4630      	mov	r0, r6
 8001d58:	f000 fae0 	bl	800231c <__swsetup_r>
 8001d5c:	2800      	cmp	r0, #0
 8001d5e:	d09d      	beq.n	8001c9c <_vfiprintf_r+0x2c>
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295
 8001d64:	b01d      	add	sp, #116	; 0x74
 8001d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d6a:	46a8      	mov	r8, r5
 8001d6c:	e7a2      	b.n	8001cb4 <_vfiprintf_r+0x44>
 8001d6e:	4a44      	ldr	r2, [pc, #272]	; (8001e80 <_vfiprintf_r+0x210>)
 8001d70:	1a80      	subs	r0, r0, r2
 8001d72:	fa0b f000 	lsl.w	r0, fp, r0
 8001d76:	4318      	orrs	r0, r3
 8001d78:	9004      	str	r0, [sp, #16]
 8001d7a:	4645      	mov	r5, r8
 8001d7c:	e7be      	b.n	8001cfc <_vfiprintf_r+0x8c>
 8001d7e:	9a03      	ldr	r2, [sp, #12]
 8001d80:	1d11      	adds	r1, r2, #4
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	9103      	str	r1, [sp, #12]
 8001d86:	2a00      	cmp	r2, #0
 8001d88:	db01      	blt.n	8001d8e <_vfiprintf_r+0x11e>
 8001d8a:	9207      	str	r2, [sp, #28]
 8001d8c:	e004      	b.n	8001d98 <_vfiprintf_r+0x128>
 8001d8e:	4252      	negs	r2, r2
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	9207      	str	r2, [sp, #28]
 8001d96:	9304      	str	r3, [sp, #16]
 8001d98:	f898 3000 	ldrb.w	r3, [r8]
 8001d9c:	2b2e      	cmp	r3, #46	; 0x2e
 8001d9e:	d10e      	bne.n	8001dbe <_vfiprintf_r+0x14e>
 8001da0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001da4:	2b2a      	cmp	r3, #42	; 0x2a
 8001da6:	d138      	bne.n	8001e1a <_vfiprintf_r+0x1aa>
 8001da8:	9b03      	ldr	r3, [sp, #12]
 8001daa:	1d1a      	adds	r2, r3, #4
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	9203      	str	r2, [sp, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	bfb8      	it	lt
 8001db4:	f04f 33ff 	movlt.w	r3, #4294967295
 8001db8:	f108 0802 	add.w	r8, r8, #2
 8001dbc:	9305      	str	r3, [sp, #20]
 8001dbe:	4d33      	ldr	r5, [pc, #204]	; (8001e8c <_vfiprintf_r+0x21c>)
 8001dc0:	f898 1000 	ldrb.w	r1, [r8]
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	4628      	mov	r0, r5
 8001dc8:	f7fe fa12 	bl	80001f0 <memchr>
 8001dcc:	b140      	cbz	r0, 8001de0 <_vfiprintf_r+0x170>
 8001dce:	2340      	movs	r3, #64	; 0x40
 8001dd0:	1b40      	subs	r0, r0, r5
 8001dd2:	fa03 f000 	lsl.w	r0, r3, r0
 8001dd6:	9b04      	ldr	r3, [sp, #16]
 8001dd8:	4303      	orrs	r3, r0
 8001dda:	f108 0801 	add.w	r8, r8, #1
 8001dde:	9304      	str	r3, [sp, #16]
 8001de0:	f898 1000 	ldrb.w	r1, [r8]
 8001de4:	482a      	ldr	r0, [pc, #168]	; (8001e90 <_vfiprintf_r+0x220>)
 8001de6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001dea:	2206      	movs	r2, #6
 8001dec:	f108 0701 	add.w	r7, r8, #1
 8001df0:	f7fe f9fe 	bl	80001f0 <memchr>
 8001df4:	2800      	cmp	r0, #0
 8001df6:	d037      	beq.n	8001e68 <_vfiprintf_r+0x1f8>
 8001df8:	4b26      	ldr	r3, [pc, #152]	; (8001e94 <_vfiprintf_r+0x224>)
 8001dfa:	bb1b      	cbnz	r3, 8001e44 <_vfiprintf_r+0x1d4>
 8001dfc:	9b03      	ldr	r3, [sp, #12]
 8001dfe:	3307      	adds	r3, #7
 8001e00:	f023 0307 	bic.w	r3, r3, #7
 8001e04:	3308      	adds	r3, #8
 8001e06:	9303      	str	r3, [sp, #12]
 8001e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e0a:	444b      	add	r3, r9
 8001e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8001e0e:	e750      	b.n	8001cb2 <_vfiprintf_r+0x42>
 8001e10:	fb05 3202 	mla	r2, r5, r2, r3
 8001e14:	2001      	movs	r0, #1
 8001e16:	4688      	mov	r8, r1
 8001e18:	e78a      	b.n	8001d30 <_vfiprintf_r+0xc0>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f108 0801 	add.w	r8, r8, #1
 8001e20:	9305      	str	r3, [sp, #20]
 8001e22:	4619      	mov	r1, r3
 8001e24:	250a      	movs	r5, #10
 8001e26:	4640      	mov	r0, r8
 8001e28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001e2c:	3a30      	subs	r2, #48	; 0x30
 8001e2e:	2a09      	cmp	r2, #9
 8001e30:	d903      	bls.n	8001e3a <_vfiprintf_r+0x1ca>
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0c3      	beq.n	8001dbe <_vfiprintf_r+0x14e>
 8001e36:	9105      	str	r1, [sp, #20]
 8001e38:	e7c1      	b.n	8001dbe <_vfiprintf_r+0x14e>
 8001e3a:	fb05 2101 	mla	r1, r5, r1, r2
 8001e3e:	2301      	movs	r3, #1
 8001e40:	4680      	mov	r8, r0
 8001e42:	e7f0      	b.n	8001e26 <_vfiprintf_r+0x1b6>
 8001e44:	ab03      	add	r3, sp, #12
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	4622      	mov	r2, r4
 8001e4a:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <_vfiprintf_r+0x228>)
 8001e4c:	a904      	add	r1, sp, #16
 8001e4e:	4630      	mov	r0, r6
 8001e50:	f3af 8000 	nop.w
 8001e54:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001e58:	4681      	mov	r9, r0
 8001e5a:	d1d5      	bne.n	8001e08 <_vfiprintf_r+0x198>
 8001e5c:	89a3      	ldrh	r3, [r4, #12]
 8001e5e:	065b      	lsls	r3, r3, #25
 8001e60:	f53f af7e 	bmi.w	8001d60 <_vfiprintf_r+0xf0>
 8001e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e66:	e77d      	b.n	8001d64 <_vfiprintf_r+0xf4>
 8001e68:	ab03      	add	r3, sp, #12
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	4622      	mov	r2, r4
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <_vfiprintf_r+0x228>)
 8001e70:	a904      	add	r1, sp, #16
 8001e72:	4630      	mov	r0, r6
 8001e74:	f000 f888 	bl	8001f88 <_printf_i>
 8001e78:	e7ec      	b.n	8001e54 <_vfiprintf_r+0x1e4>
 8001e7a:	bf00      	nop
 8001e7c:	080027d4 	.word	0x080027d4
 8001e80:	08002814 	.word	0x08002814
 8001e84:	080027f4 	.word	0x080027f4
 8001e88:	080027b4 	.word	0x080027b4
 8001e8c:	0800281a 	.word	0x0800281a
 8001e90:	0800281e 	.word	0x0800281e
 8001e94:	00000000 	.word	0x00000000
 8001e98:	08001c4b 	.word	0x08001c4b

08001e9c <_printf_common>:
 8001e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ea0:	4691      	mov	r9, r2
 8001ea2:	461f      	mov	r7, r3
 8001ea4:	688a      	ldr	r2, [r1, #8]
 8001ea6:	690b      	ldr	r3, [r1, #16]
 8001ea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001eac:	4293      	cmp	r3, r2
 8001eae:	bfb8      	it	lt
 8001eb0:	4613      	movlt	r3, r2
 8001eb2:	f8c9 3000 	str.w	r3, [r9]
 8001eb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001eba:	4606      	mov	r6, r0
 8001ebc:	460c      	mov	r4, r1
 8001ebe:	b112      	cbz	r2, 8001ec6 <_printf_common+0x2a>
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	f8c9 3000 	str.w	r3, [r9]
 8001ec6:	6823      	ldr	r3, [r4, #0]
 8001ec8:	0699      	lsls	r1, r3, #26
 8001eca:	bf42      	ittt	mi
 8001ecc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001ed0:	3302      	addmi	r3, #2
 8001ed2:	f8c9 3000 	strmi.w	r3, [r9]
 8001ed6:	6825      	ldr	r5, [r4, #0]
 8001ed8:	f015 0506 	ands.w	r5, r5, #6
 8001edc:	d107      	bne.n	8001eee <_printf_common+0x52>
 8001ede:	f104 0a19 	add.w	sl, r4, #25
 8001ee2:	68e3      	ldr	r3, [r4, #12]
 8001ee4:	f8d9 2000 	ldr.w	r2, [r9]
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	42ab      	cmp	r3, r5
 8001eec:	dc28      	bgt.n	8001f40 <_printf_common+0xa4>
 8001eee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001ef2:	6822      	ldr	r2, [r4, #0]
 8001ef4:	3300      	adds	r3, #0
 8001ef6:	bf18      	it	ne
 8001ef8:	2301      	movne	r3, #1
 8001efa:	0692      	lsls	r2, r2, #26
 8001efc:	d42d      	bmi.n	8001f5a <_printf_common+0xbe>
 8001efe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f02:	4639      	mov	r1, r7
 8001f04:	4630      	mov	r0, r6
 8001f06:	47c0      	blx	r8
 8001f08:	3001      	adds	r0, #1
 8001f0a:	d020      	beq.n	8001f4e <_printf_common+0xb2>
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	68e5      	ldr	r5, [r4, #12]
 8001f10:	f8d9 2000 	ldr.w	r2, [r9]
 8001f14:	f003 0306 	and.w	r3, r3, #6
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	bf08      	it	eq
 8001f1c:	1aad      	subeq	r5, r5, r2
 8001f1e:	68a3      	ldr	r3, [r4, #8]
 8001f20:	6922      	ldr	r2, [r4, #16]
 8001f22:	bf0c      	ite	eq
 8001f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001f28:	2500      	movne	r5, #0
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	bfc4      	itt	gt
 8001f2e:	1a9b      	subgt	r3, r3, r2
 8001f30:	18ed      	addgt	r5, r5, r3
 8001f32:	f04f 0900 	mov.w	r9, #0
 8001f36:	341a      	adds	r4, #26
 8001f38:	454d      	cmp	r5, r9
 8001f3a:	d11a      	bne.n	8001f72 <_printf_common+0xd6>
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	e008      	b.n	8001f52 <_printf_common+0xb6>
 8001f40:	2301      	movs	r3, #1
 8001f42:	4652      	mov	r2, sl
 8001f44:	4639      	mov	r1, r7
 8001f46:	4630      	mov	r0, r6
 8001f48:	47c0      	blx	r8
 8001f4a:	3001      	adds	r0, #1
 8001f4c:	d103      	bne.n	8001f56 <_printf_common+0xba>
 8001f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f56:	3501      	adds	r5, #1
 8001f58:	e7c3      	b.n	8001ee2 <_printf_common+0x46>
 8001f5a:	18e1      	adds	r1, r4, r3
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	2030      	movs	r0, #48	; 0x30
 8001f60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f64:	4422      	add	r2, r4
 8001f66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f6e:	3302      	adds	r3, #2
 8001f70:	e7c5      	b.n	8001efe <_printf_common+0x62>
 8001f72:	2301      	movs	r3, #1
 8001f74:	4622      	mov	r2, r4
 8001f76:	4639      	mov	r1, r7
 8001f78:	4630      	mov	r0, r6
 8001f7a:	47c0      	blx	r8
 8001f7c:	3001      	adds	r0, #1
 8001f7e:	d0e6      	beq.n	8001f4e <_printf_common+0xb2>
 8001f80:	f109 0901 	add.w	r9, r9, #1
 8001f84:	e7d8      	b.n	8001f38 <_printf_common+0x9c>
	...

08001f88 <_printf_i>:
 8001f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001f90:	460c      	mov	r4, r1
 8001f92:	7e09      	ldrb	r1, [r1, #24]
 8001f94:	b085      	sub	sp, #20
 8001f96:	296e      	cmp	r1, #110	; 0x6e
 8001f98:	4617      	mov	r7, r2
 8001f9a:	4606      	mov	r6, r0
 8001f9c:	4698      	mov	r8, r3
 8001f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001fa0:	f000 80b3 	beq.w	800210a <_printf_i+0x182>
 8001fa4:	d822      	bhi.n	8001fec <_printf_i+0x64>
 8001fa6:	2963      	cmp	r1, #99	; 0x63
 8001fa8:	d036      	beq.n	8002018 <_printf_i+0x90>
 8001faa:	d80a      	bhi.n	8001fc2 <_printf_i+0x3a>
 8001fac:	2900      	cmp	r1, #0
 8001fae:	f000 80b9 	beq.w	8002124 <_printf_i+0x19c>
 8001fb2:	2958      	cmp	r1, #88	; 0x58
 8001fb4:	f000 8083 	beq.w	80020be <_printf_i+0x136>
 8001fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001fbc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001fc0:	e032      	b.n	8002028 <_printf_i+0xa0>
 8001fc2:	2964      	cmp	r1, #100	; 0x64
 8001fc4:	d001      	beq.n	8001fca <_printf_i+0x42>
 8001fc6:	2969      	cmp	r1, #105	; 0x69
 8001fc8:	d1f6      	bne.n	8001fb8 <_printf_i+0x30>
 8001fca:	6820      	ldr	r0, [r4, #0]
 8001fcc:	6813      	ldr	r3, [r2, #0]
 8001fce:	0605      	lsls	r5, r0, #24
 8001fd0:	f103 0104 	add.w	r1, r3, #4
 8001fd4:	d52a      	bpl.n	800202c <_printf_i+0xa4>
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6011      	str	r1, [r2, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	da03      	bge.n	8001fe6 <_printf_i+0x5e>
 8001fde:	222d      	movs	r2, #45	; 0x2d
 8001fe0:	425b      	negs	r3, r3
 8001fe2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001fe6:	486f      	ldr	r0, [pc, #444]	; (80021a4 <_printf_i+0x21c>)
 8001fe8:	220a      	movs	r2, #10
 8001fea:	e039      	b.n	8002060 <_printf_i+0xd8>
 8001fec:	2973      	cmp	r1, #115	; 0x73
 8001fee:	f000 809d 	beq.w	800212c <_printf_i+0x1a4>
 8001ff2:	d808      	bhi.n	8002006 <_printf_i+0x7e>
 8001ff4:	296f      	cmp	r1, #111	; 0x6f
 8001ff6:	d020      	beq.n	800203a <_printf_i+0xb2>
 8001ff8:	2970      	cmp	r1, #112	; 0x70
 8001ffa:	d1dd      	bne.n	8001fb8 <_printf_i+0x30>
 8001ffc:	6823      	ldr	r3, [r4, #0]
 8001ffe:	f043 0320 	orr.w	r3, r3, #32
 8002002:	6023      	str	r3, [r4, #0]
 8002004:	e003      	b.n	800200e <_printf_i+0x86>
 8002006:	2975      	cmp	r1, #117	; 0x75
 8002008:	d017      	beq.n	800203a <_printf_i+0xb2>
 800200a:	2978      	cmp	r1, #120	; 0x78
 800200c:	d1d4      	bne.n	8001fb8 <_printf_i+0x30>
 800200e:	2378      	movs	r3, #120	; 0x78
 8002010:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002014:	4864      	ldr	r0, [pc, #400]	; (80021a8 <_printf_i+0x220>)
 8002016:	e055      	b.n	80020c4 <_printf_i+0x13c>
 8002018:	6813      	ldr	r3, [r2, #0]
 800201a:	1d19      	adds	r1, r3, #4
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6011      	str	r1, [r2, #0]
 8002020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002024:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002028:	2301      	movs	r3, #1
 800202a:	e08c      	b.n	8002146 <_printf_i+0x1be>
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6011      	str	r1, [r2, #0]
 8002030:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002034:	bf18      	it	ne
 8002036:	b21b      	sxthne	r3, r3
 8002038:	e7cf      	b.n	8001fda <_printf_i+0x52>
 800203a:	6813      	ldr	r3, [r2, #0]
 800203c:	6825      	ldr	r5, [r4, #0]
 800203e:	1d18      	adds	r0, r3, #4
 8002040:	6010      	str	r0, [r2, #0]
 8002042:	0628      	lsls	r0, r5, #24
 8002044:	d501      	bpl.n	800204a <_printf_i+0xc2>
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	e002      	b.n	8002050 <_printf_i+0xc8>
 800204a:	0668      	lsls	r0, r5, #25
 800204c:	d5fb      	bpl.n	8002046 <_printf_i+0xbe>
 800204e:	881b      	ldrh	r3, [r3, #0]
 8002050:	4854      	ldr	r0, [pc, #336]	; (80021a4 <_printf_i+0x21c>)
 8002052:	296f      	cmp	r1, #111	; 0x6f
 8002054:	bf14      	ite	ne
 8002056:	220a      	movne	r2, #10
 8002058:	2208      	moveq	r2, #8
 800205a:	2100      	movs	r1, #0
 800205c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002060:	6865      	ldr	r5, [r4, #4]
 8002062:	60a5      	str	r5, [r4, #8]
 8002064:	2d00      	cmp	r5, #0
 8002066:	f2c0 8095 	blt.w	8002194 <_printf_i+0x20c>
 800206a:	6821      	ldr	r1, [r4, #0]
 800206c:	f021 0104 	bic.w	r1, r1, #4
 8002070:	6021      	str	r1, [r4, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d13d      	bne.n	80020f2 <_printf_i+0x16a>
 8002076:	2d00      	cmp	r5, #0
 8002078:	f040 808e 	bne.w	8002198 <_printf_i+0x210>
 800207c:	4665      	mov	r5, ip
 800207e:	2a08      	cmp	r2, #8
 8002080:	d10b      	bne.n	800209a <_printf_i+0x112>
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	07db      	lsls	r3, r3, #31
 8002086:	d508      	bpl.n	800209a <_printf_i+0x112>
 8002088:	6923      	ldr	r3, [r4, #16]
 800208a:	6862      	ldr	r2, [r4, #4]
 800208c:	429a      	cmp	r2, r3
 800208e:	bfde      	ittt	le
 8002090:	2330      	movle	r3, #48	; 0x30
 8002092:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002096:	f105 35ff 	addle.w	r5, r5, #4294967295
 800209a:	ebac 0305 	sub.w	r3, ip, r5
 800209e:	6123      	str	r3, [r4, #16]
 80020a0:	f8cd 8000 	str.w	r8, [sp]
 80020a4:	463b      	mov	r3, r7
 80020a6:	aa03      	add	r2, sp, #12
 80020a8:	4621      	mov	r1, r4
 80020aa:	4630      	mov	r0, r6
 80020ac:	f7ff fef6 	bl	8001e9c <_printf_common>
 80020b0:	3001      	adds	r0, #1
 80020b2:	d14d      	bne.n	8002150 <_printf_i+0x1c8>
 80020b4:	f04f 30ff 	mov.w	r0, #4294967295
 80020b8:	b005      	add	sp, #20
 80020ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020be:	4839      	ldr	r0, [pc, #228]	; (80021a4 <_printf_i+0x21c>)
 80020c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80020c4:	6813      	ldr	r3, [r2, #0]
 80020c6:	6821      	ldr	r1, [r4, #0]
 80020c8:	1d1d      	adds	r5, r3, #4
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6015      	str	r5, [r2, #0]
 80020ce:	060a      	lsls	r2, r1, #24
 80020d0:	d50b      	bpl.n	80020ea <_printf_i+0x162>
 80020d2:	07ca      	lsls	r2, r1, #31
 80020d4:	bf44      	itt	mi
 80020d6:	f041 0120 	orrmi.w	r1, r1, #32
 80020da:	6021      	strmi	r1, [r4, #0]
 80020dc:	b91b      	cbnz	r3, 80020e6 <_printf_i+0x15e>
 80020de:	6822      	ldr	r2, [r4, #0]
 80020e0:	f022 0220 	bic.w	r2, r2, #32
 80020e4:	6022      	str	r2, [r4, #0]
 80020e6:	2210      	movs	r2, #16
 80020e8:	e7b7      	b.n	800205a <_printf_i+0xd2>
 80020ea:	064d      	lsls	r5, r1, #25
 80020ec:	bf48      	it	mi
 80020ee:	b29b      	uxthmi	r3, r3
 80020f0:	e7ef      	b.n	80020d2 <_printf_i+0x14a>
 80020f2:	4665      	mov	r5, ip
 80020f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80020f8:	fb02 3311 	mls	r3, r2, r1, r3
 80020fc:	5cc3      	ldrb	r3, [r0, r3]
 80020fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002102:	460b      	mov	r3, r1
 8002104:	2900      	cmp	r1, #0
 8002106:	d1f5      	bne.n	80020f4 <_printf_i+0x16c>
 8002108:	e7b9      	b.n	800207e <_printf_i+0xf6>
 800210a:	6813      	ldr	r3, [r2, #0]
 800210c:	6825      	ldr	r5, [r4, #0]
 800210e:	6961      	ldr	r1, [r4, #20]
 8002110:	1d18      	adds	r0, r3, #4
 8002112:	6010      	str	r0, [r2, #0]
 8002114:	0628      	lsls	r0, r5, #24
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	d501      	bpl.n	800211e <_printf_i+0x196>
 800211a:	6019      	str	r1, [r3, #0]
 800211c:	e002      	b.n	8002124 <_printf_i+0x19c>
 800211e:	066a      	lsls	r2, r5, #25
 8002120:	d5fb      	bpl.n	800211a <_printf_i+0x192>
 8002122:	8019      	strh	r1, [r3, #0]
 8002124:	2300      	movs	r3, #0
 8002126:	6123      	str	r3, [r4, #16]
 8002128:	4665      	mov	r5, ip
 800212a:	e7b9      	b.n	80020a0 <_printf_i+0x118>
 800212c:	6813      	ldr	r3, [r2, #0]
 800212e:	1d19      	adds	r1, r3, #4
 8002130:	6011      	str	r1, [r2, #0]
 8002132:	681d      	ldr	r5, [r3, #0]
 8002134:	6862      	ldr	r2, [r4, #4]
 8002136:	2100      	movs	r1, #0
 8002138:	4628      	mov	r0, r5
 800213a:	f7fe f859 	bl	80001f0 <memchr>
 800213e:	b108      	cbz	r0, 8002144 <_printf_i+0x1bc>
 8002140:	1b40      	subs	r0, r0, r5
 8002142:	6060      	str	r0, [r4, #4]
 8002144:	6863      	ldr	r3, [r4, #4]
 8002146:	6123      	str	r3, [r4, #16]
 8002148:	2300      	movs	r3, #0
 800214a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800214e:	e7a7      	b.n	80020a0 <_printf_i+0x118>
 8002150:	6923      	ldr	r3, [r4, #16]
 8002152:	462a      	mov	r2, r5
 8002154:	4639      	mov	r1, r7
 8002156:	4630      	mov	r0, r6
 8002158:	47c0      	blx	r8
 800215a:	3001      	adds	r0, #1
 800215c:	d0aa      	beq.n	80020b4 <_printf_i+0x12c>
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	079b      	lsls	r3, r3, #30
 8002162:	d413      	bmi.n	800218c <_printf_i+0x204>
 8002164:	68e0      	ldr	r0, [r4, #12]
 8002166:	9b03      	ldr	r3, [sp, #12]
 8002168:	4298      	cmp	r0, r3
 800216a:	bfb8      	it	lt
 800216c:	4618      	movlt	r0, r3
 800216e:	e7a3      	b.n	80020b8 <_printf_i+0x130>
 8002170:	2301      	movs	r3, #1
 8002172:	464a      	mov	r2, r9
 8002174:	4639      	mov	r1, r7
 8002176:	4630      	mov	r0, r6
 8002178:	47c0      	blx	r8
 800217a:	3001      	adds	r0, #1
 800217c:	d09a      	beq.n	80020b4 <_printf_i+0x12c>
 800217e:	3501      	adds	r5, #1
 8002180:	68e3      	ldr	r3, [r4, #12]
 8002182:	9a03      	ldr	r2, [sp, #12]
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	42ab      	cmp	r3, r5
 8002188:	dcf2      	bgt.n	8002170 <_printf_i+0x1e8>
 800218a:	e7eb      	b.n	8002164 <_printf_i+0x1dc>
 800218c:	2500      	movs	r5, #0
 800218e:	f104 0919 	add.w	r9, r4, #25
 8002192:	e7f5      	b.n	8002180 <_printf_i+0x1f8>
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1ac      	bne.n	80020f2 <_printf_i+0x16a>
 8002198:	7803      	ldrb	r3, [r0, #0]
 800219a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800219e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021a2:	e76c      	b.n	800207e <_printf_i+0xf6>
 80021a4:	08002825 	.word	0x08002825
 80021a8:	08002836 	.word	0x08002836

080021ac <_sbrk_r>:
 80021ac:	b538      	push	{r3, r4, r5, lr}
 80021ae:	4c06      	ldr	r4, [pc, #24]	; (80021c8 <_sbrk_r+0x1c>)
 80021b0:	2300      	movs	r3, #0
 80021b2:	4605      	mov	r5, r0
 80021b4:	4608      	mov	r0, r1
 80021b6:	6023      	str	r3, [r4, #0]
 80021b8:	f7fe fa30 	bl	800061c <_sbrk>
 80021bc:	1c43      	adds	r3, r0, #1
 80021be:	d102      	bne.n	80021c6 <_sbrk_r+0x1a>
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	b103      	cbz	r3, 80021c6 <_sbrk_r+0x1a>
 80021c4:	602b      	str	r3, [r5, #0]
 80021c6:	bd38      	pop	{r3, r4, r5, pc}
 80021c8:	200000b0 	.word	0x200000b0

080021cc <__sread>:
 80021cc:	b510      	push	{r4, lr}
 80021ce:	460c      	mov	r4, r1
 80021d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021d4:	f000 fa96 	bl	8002704 <_read_r>
 80021d8:	2800      	cmp	r0, #0
 80021da:	bfab      	itete	ge
 80021dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80021de:	89a3      	ldrhlt	r3, [r4, #12]
 80021e0:	181b      	addge	r3, r3, r0
 80021e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80021e6:	bfac      	ite	ge
 80021e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80021ea:	81a3      	strhlt	r3, [r4, #12]
 80021ec:	bd10      	pop	{r4, pc}

080021ee <__swrite>:
 80021ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021f2:	461f      	mov	r7, r3
 80021f4:	898b      	ldrh	r3, [r1, #12]
 80021f6:	05db      	lsls	r3, r3, #23
 80021f8:	4605      	mov	r5, r0
 80021fa:	460c      	mov	r4, r1
 80021fc:	4616      	mov	r6, r2
 80021fe:	d505      	bpl.n	800220c <__swrite+0x1e>
 8002200:	2302      	movs	r3, #2
 8002202:	2200      	movs	r2, #0
 8002204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002208:	f000 f9b6 	bl	8002578 <_lseek_r>
 800220c:	89a3      	ldrh	r3, [r4, #12]
 800220e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002212:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002216:	81a3      	strh	r3, [r4, #12]
 8002218:	4632      	mov	r2, r6
 800221a:	463b      	mov	r3, r7
 800221c:	4628      	mov	r0, r5
 800221e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002222:	f000 b869 	b.w	80022f8 <_write_r>

08002226 <__sseek>:
 8002226:	b510      	push	{r4, lr}
 8002228:	460c      	mov	r4, r1
 800222a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800222e:	f000 f9a3 	bl	8002578 <_lseek_r>
 8002232:	1c43      	adds	r3, r0, #1
 8002234:	89a3      	ldrh	r3, [r4, #12]
 8002236:	bf15      	itete	ne
 8002238:	6560      	strne	r0, [r4, #84]	; 0x54
 800223a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800223e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002242:	81a3      	strheq	r3, [r4, #12]
 8002244:	bf18      	it	ne
 8002246:	81a3      	strhne	r3, [r4, #12]
 8002248:	bd10      	pop	{r4, pc}

0800224a <__sclose>:
 800224a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800224e:	f000 b8d3 	b.w	80023f8 <_close_r>
	...

08002254 <__swbuf_r>:
 8002254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002256:	460e      	mov	r6, r1
 8002258:	4614      	mov	r4, r2
 800225a:	4605      	mov	r5, r0
 800225c:	b118      	cbz	r0, 8002266 <__swbuf_r+0x12>
 800225e:	6983      	ldr	r3, [r0, #24]
 8002260:	b90b      	cbnz	r3, 8002266 <__swbuf_r+0x12>
 8002262:	f7ff fbf7 	bl	8001a54 <__sinit>
 8002266:	4b21      	ldr	r3, [pc, #132]	; (80022ec <__swbuf_r+0x98>)
 8002268:	429c      	cmp	r4, r3
 800226a:	d12a      	bne.n	80022c2 <__swbuf_r+0x6e>
 800226c:	686c      	ldr	r4, [r5, #4]
 800226e:	69a3      	ldr	r3, [r4, #24]
 8002270:	60a3      	str	r3, [r4, #8]
 8002272:	89a3      	ldrh	r3, [r4, #12]
 8002274:	071a      	lsls	r2, r3, #28
 8002276:	d52e      	bpl.n	80022d6 <__swbuf_r+0x82>
 8002278:	6923      	ldr	r3, [r4, #16]
 800227a:	b363      	cbz	r3, 80022d6 <__swbuf_r+0x82>
 800227c:	6923      	ldr	r3, [r4, #16]
 800227e:	6820      	ldr	r0, [r4, #0]
 8002280:	1ac0      	subs	r0, r0, r3
 8002282:	6963      	ldr	r3, [r4, #20]
 8002284:	b2f6      	uxtb	r6, r6
 8002286:	4283      	cmp	r3, r0
 8002288:	4637      	mov	r7, r6
 800228a:	dc04      	bgt.n	8002296 <__swbuf_r+0x42>
 800228c:	4621      	mov	r1, r4
 800228e:	4628      	mov	r0, r5
 8002290:	f000 f948 	bl	8002524 <_fflush_r>
 8002294:	bb28      	cbnz	r0, 80022e2 <__swbuf_r+0x8e>
 8002296:	68a3      	ldr	r3, [r4, #8]
 8002298:	3b01      	subs	r3, #1
 800229a:	60a3      	str	r3, [r4, #8]
 800229c:	6823      	ldr	r3, [r4, #0]
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	6022      	str	r2, [r4, #0]
 80022a2:	701e      	strb	r6, [r3, #0]
 80022a4:	6963      	ldr	r3, [r4, #20]
 80022a6:	3001      	adds	r0, #1
 80022a8:	4283      	cmp	r3, r0
 80022aa:	d004      	beq.n	80022b6 <__swbuf_r+0x62>
 80022ac:	89a3      	ldrh	r3, [r4, #12]
 80022ae:	07db      	lsls	r3, r3, #31
 80022b0:	d519      	bpl.n	80022e6 <__swbuf_r+0x92>
 80022b2:	2e0a      	cmp	r6, #10
 80022b4:	d117      	bne.n	80022e6 <__swbuf_r+0x92>
 80022b6:	4621      	mov	r1, r4
 80022b8:	4628      	mov	r0, r5
 80022ba:	f000 f933 	bl	8002524 <_fflush_r>
 80022be:	b190      	cbz	r0, 80022e6 <__swbuf_r+0x92>
 80022c0:	e00f      	b.n	80022e2 <__swbuf_r+0x8e>
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <__swbuf_r+0x9c>)
 80022c4:	429c      	cmp	r4, r3
 80022c6:	d101      	bne.n	80022cc <__swbuf_r+0x78>
 80022c8:	68ac      	ldr	r4, [r5, #8]
 80022ca:	e7d0      	b.n	800226e <__swbuf_r+0x1a>
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <__swbuf_r+0xa0>)
 80022ce:	429c      	cmp	r4, r3
 80022d0:	bf08      	it	eq
 80022d2:	68ec      	ldreq	r4, [r5, #12]
 80022d4:	e7cb      	b.n	800226e <__swbuf_r+0x1a>
 80022d6:	4621      	mov	r1, r4
 80022d8:	4628      	mov	r0, r5
 80022da:	f000 f81f 	bl	800231c <__swsetup_r>
 80022de:	2800      	cmp	r0, #0
 80022e0:	d0cc      	beq.n	800227c <__swbuf_r+0x28>
 80022e2:	f04f 37ff 	mov.w	r7, #4294967295
 80022e6:	4638      	mov	r0, r7
 80022e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022ea:	bf00      	nop
 80022ec:	080027d4 	.word	0x080027d4
 80022f0:	080027f4 	.word	0x080027f4
 80022f4:	080027b4 	.word	0x080027b4

080022f8 <_write_r>:
 80022f8:	b538      	push	{r3, r4, r5, lr}
 80022fa:	4c07      	ldr	r4, [pc, #28]	; (8002318 <_write_r+0x20>)
 80022fc:	4605      	mov	r5, r0
 80022fe:	4608      	mov	r0, r1
 8002300:	4611      	mov	r1, r2
 8002302:	2200      	movs	r2, #0
 8002304:	6022      	str	r2, [r4, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	f7fe f937 	bl	800057a <_write>
 800230c:	1c43      	adds	r3, r0, #1
 800230e:	d102      	bne.n	8002316 <_write_r+0x1e>
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	b103      	cbz	r3, 8002316 <_write_r+0x1e>
 8002314:	602b      	str	r3, [r5, #0]
 8002316:	bd38      	pop	{r3, r4, r5, pc}
 8002318:	200000b0 	.word	0x200000b0

0800231c <__swsetup_r>:
 800231c:	4b32      	ldr	r3, [pc, #200]	; (80023e8 <__swsetup_r+0xcc>)
 800231e:	b570      	push	{r4, r5, r6, lr}
 8002320:	681d      	ldr	r5, [r3, #0]
 8002322:	4606      	mov	r6, r0
 8002324:	460c      	mov	r4, r1
 8002326:	b125      	cbz	r5, 8002332 <__swsetup_r+0x16>
 8002328:	69ab      	ldr	r3, [r5, #24]
 800232a:	b913      	cbnz	r3, 8002332 <__swsetup_r+0x16>
 800232c:	4628      	mov	r0, r5
 800232e:	f7ff fb91 	bl	8001a54 <__sinit>
 8002332:	4b2e      	ldr	r3, [pc, #184]	; (80023ec <__swsetup_r+0xd0>)
 8002334:	429c      	cmp	r4, r3
 8002336:	d10f      	bne.n	8002358 <__swsetup_r+0x3c>
 8002338:	686c      	ldr	r4, [r5, #4]
 800233a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800233e:	b29a      	uxth	r2, r3
 8002340:	0715      	lsls	r5, r2, #28
 8002342:	d42c      	bmi.n	800239e <__swsetup_r+0x82>
 8002344:	06d0      	lsls	r0, r2, #27
 8002346:	d411      	bmi.n	800236c <__swsetup_r+0x50>
 8002348:	2209      	movs	r2, #9
 800234a:	6032      	str	r2, [r6, #0]
 800234c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002350:	81a3      	strh	r3, [r4, #12]
 8002352:	f04f 30ff 	mov.w	r0, #4294967295
 8002356:	e03e      	b.n	80023d6 <__swsetup_r+0xba>
 8002358:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <__swsetup_r+0xd4>)
 800235a:	429c      	cmp	r4, r3
 800235c:	d101      	bne.n	8002362 <__swsetup_r+0x46>
 800235e:	68ac      	ldr	r4, [r5, #8]
 8002360:	e7eb      	b.n	800233a <__swsetup_r+0x1e>
 8002362:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <__swsetup_r+0xd8>)
 8002364:	429c      	cmp	r4, r3
 8002366:	bf08      	it	eq
 8002368:	68ec      	ldreq	r4, [r5, #12]
 800236a:	e7e6      	b.n	800233a <__swsetup_r+0x1e>
 800236c:	0751      	lsls	r1, r2, #29
 800236e:	d512      	bpl.n	8002396 <__swsetup_r+0x7a>
 8002370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002372:	b141      	cbz	r1, 8002386 <__swsetup_r+0x6a>
 8002374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002378:	4299      	cmp	r1, r3
 800237a:	d002      	beq.n	8002382 <__swsetup_r+0x66>
 800237c:	4630      	mov	r0, r6
 800237e:	f000 f973 	bl	8002668 <_free_r>
 8002382:	2300      	movs	r3, #0
 8002384:	6363      	str	r3, [r4, #52]	; 0x34
 8002386:	89a3      	ldrh	r3, [r4, #12]
 8002388:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800238c:	81a3      	strh	r3, [r4, #12]
 800238e:	2300      	movs	r3, #0
 8002390:	6063      	str	r3, [r4, #4]
 8002392:	6923      	ldr	r3, [r4, #16]
 8002394:	6023      	str	r3, [r4, #0]
 8002396:	89a3      	ldrh	r3, [r4, #12]
 8002398:	f043 0308 	orr.w	r3, r3, #8
 800239c:	81a3      	strh	r3, [r4, #12]
 800239e:	6923      	ldr	r3, [r4, #16]
 80023a0:	b94b      	cbnz	r3, 80023b6 <__swsetup_r+0x9a>
 80023a2:	89a3      	ldrh	r3, [r4, #12]
 80023a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80023a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ac:	d003      	beq.n	80023b6 <__swsetup_r+0x9a>
 80023ae:	4621      	mov	r1, r4
 80023b0:	4630      	mov	r0, r6
 80023b2:	f000 f917 	bl	80025e4 <__smakebuf_r>
 80023b6:	89a2      	ldrh	r2, [r4, #12]
 80023b8:	f012 0301 	ands.w	r3, r2, #1
 80023bc:	d00c      	beq.n	80023d8 <__swsetup_r+0xbc>
 80023be:	2300      	movs	r3, #0
 80023c0:	60a3      	str	r3, [r4, #8]
 80023c2:	6963      	ldr	r3, [r4, #20]
 80023c4:	425b      	negs	r3, r3
 80023c6:	61a3      	str	r3, [r4, #24]
 80023c8:	6923      	ldr	r3, [r4, #16]
 80023ca:	b953      	cbnz	r3, 80023e2 <__swsetup_r+0xc6>
 80023cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023d0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80023d4:	d1ba      	bne.n	800234c <__swsetup_r+0x30>
 80023d6:	bd70      	pop	{r4, r5, r6, pc}
 80023d8:	0792      	lsls	r2, r2, #30
 80023da:	bf58      	it	pl
 80023dc:	6963      	ldrpl	r3, [r4, #20]
 80023de:	60a3      	str	r3, [r4, #8]
 80023e0:	e7f2      	b.n	80023c8 <__swsetup_r+0xac>
 80023e2:	2000      	movs	r0, #0
 80023e4:	e7f7      	b.n	80023d6 <__swsetup_r+0xba>
 80023e6:	bf00      	nop
 80023e8:	20000000 	.word	0x20000000
 80023ec:	080027d4 	.word	0x080027d4
 80023f0:	080027f4 	.word	0x080027f4
 80023f4:	080027b4 	.word	0x080027b4

080023f8 <_close_r>:
 80023f8:	b538      	push	{r3, r4, r5, lr}
 80023fa:	4c06      	ldr	r4, [pc, #24]	; (8002414 <_close_r+0x1c>)
 80023fc:	2300      	movs	r3, #0
 80023fe:	4605      	mov	r5, r0
 8002400:	4608      	mov	r0, r1
 8002402:	6023      	str	r3, [r4, #0]
 8002404:	f7fe f8d5 	bl	80005b2 <_close>
 8002408:	1c43      	adds	r3, r0, #1
 800240a:	d102      	bne.n	8002412 <_close_r+0x1a>
 800240c:	6823      	ldr	r3, [r4, #0]
 800240e:	b103      	cbz	r3, 8002412 <_close_r+0x1a>
 8002410:	602b      	str	r3, [r5, #0]
 8002412:	bd38      	pop	{r3, r4, r5, pc}
 8002414:	200000b0 	.word	0x200000b0

08002418 <__sflush_r>:
 8002418:	898a      	ldrh	r2, [r1, #12]
 800241a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800241e:	4605      	mov	r5, r0
 8002420:	0710      	lsls	r0, r2, #28
 8002422:	460c      	mov	r4, r1
 8002424:	d458      	bmi.n	80024d8 <__sflush_r+0xc0>
 8002426:	684b      	ldr	r3, [r1, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	dc05      	bgt.n	8002438 <__sflush_r+0x20>
 800242c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800242e:	2b00      	cmp	r3, #0
 8002430:	dc02      	bgt.n	8002438 <__sflush_r+0x20>
 8002432:	2000      	movs	r0, #0
 8002434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800243a:	2e00      	cmp	r6, #0
 800243c:	d0f9      	beq.n	8002432 <__sflush_r+0x1a>
 800243e:	2300      	movs	r3, #0
 8002440:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002444:	682f      	ldr	r7, [r5, #0]
 8002446:	6a21      	ldr	r1, [r4, #32]
 8002448:	602b      	str	r3, [r5, #0]
 800244a:	d032      	beq.n	80024b2 <__sflush_r+0x9a>
 800244c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800244e:	89a3      	ldrh	r3, [r4, #12]
 8002450:	075a      	lsls	r2, r3, #29
 8002452:	d505      	bpl.n	8002460 <__sflush_r+0x48>
 8002454:	6863      	ldr	r3, [r4, #4]
 8002456:	1ac0      	subs	r0, r0, r3
 8002458:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800245a:	b10b      	cbz	r3, 8002460 <__sflush_r+0x48>
 800245c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800245e:	1ac0      	subs	r0, r0, r3
 8002460:	2300      	movs	r3, #0
 8002462:	4602      	mov	r2, r0
 8002464:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002466:	6a21      	ldr	r1, [r4, #32]
 8002468:	4628      	mov	r0, r5
 800246a:	47b0      	blx	r6
 800246c:	1c43      	adds	r3, r0, #1
 800246e:	89a3      	ldrh	r3, [r4, #12]
 8002470:	d106      	bne.n	8002480 <__sflush_r+0x68>
 8002472:	6829      	ldr	r1, [r5, #0]
 8002474:	291d      	cmp	r1, #29
 8002476:	d848      	bhi.n	800250a <__sflush_r+0xf2>
 8002478:	4a29      	ldr	r2, [pc, #164]	; (8002520 <__sflush_r+0x108>)
 800247a:	40ca      	lsrs	r2, r1
 800247c:	07d6      	lsls	r6, r2, #31
 800247e:	d544      	bpl.n	800250a <__sflush_r+0xf2>
 8002480:	2200      	movs	r2, #0
 8002482:	6062      	str	r2, [r4, #4]
 8002484:	04d9      	lsls	r1, r3, #19
 8002486:	6922      	ldr	r2, [r4, #16]
 8002488:	6022      	str	r2, [r4, #0]
 800248a:	d504      	bpl.n	8002496 <__sflush_r+0x7e>
 800248c:	1c42      	adds	r2, r0, #1
 800248e:	d101      	bne.n	8002494 <__sflush_r+0x7c>
 8002490:	682b      	ldr	r3, [r5, #0]
 8002492:	b903      	cbnz	r3, 8002496 <__sflush_r+0x7e>
 8002494:	6560      	str	r0, [r4, #84]	; 0x54
 8002496:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002498:	602f      	str	r7, [r5, #0]
 800249a:	2900      	cmp	r1, #0
 800249c:	d0c9      	beq.n	8002432 <__sflush_r+0x1a>
 800249e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80024a2:	4299      	cmp	r1, r3
 80024a4:	d002      	beq.n	80024ac <__sflush_r+0x94>
 80024a6:	4628      	mov	r0, r5
 80024a8:	f000 f8de 	bl	8002668 <_free_r>
 80024ac:	2000      	movs	r0, #0
 80024ae:	6360      	str	r0, [r4, #52]	; 0x34
 80024b0:	e7c0      	b.n	8002434 <__sflush_r+0x1c>
 80024b2:	2301      	movs	r3, #1
 80024b4:	4628      	mov	r0, r5
 80024b6:	47b0      	blx	r6
 80024b8:	1c41      	adds	r1, r0, #1
 80024ba:	d1c8      	bne.n	800244e <__sflush_r+0x36>
 80024bc:	682b      	ldr	r3, [r5, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0c5      	beq.n	800244e <__sflush_r+0x36>
 80024c2:	2b1d      	cmp	r3, #29
 80024c4:	d001      	beq.n	80024ca <__sflush_r+0xb2>
 80024c6:	2b16      	cmp	r3, #22
 80024c8:	d101      	bne.n	80024ce <__sflush_r+0xb6>
 80024ca:	602f      	str	r7, [r5, #0]
 80024cc:	e7b1      	b.n	8002432 <__sflush_r+0x1a>
 80024ce:	89a3      	ldrh	r3, [r4, #12]
 80024d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024d4:	81a3      	strh	r3, [r4, #12]
 80024d6:	e7ad      	b.n	8002434 <__sflush_r+0x1c>
 80024d8:	690f      	ldr	r7, [r1, #16]
 80024da:	2f00      	cmp	r7, #0
 80024dc:	d0a9      	beq.n	8002432 <__sflush_r+0x1a>
 80024de:	0793      	lsls	r3, r2, #30
 80024e0:	680e      	ldr	r6, [r1, #0]
 80024e2:	bf08      	it	eq
 80024e4:	694b      	ldreq	r3, [r1, #20]
 80024e6:	600f      	str	r7, [r1, #0]
 80024e8:	bf18      	it	ne
 80024ea:	2300      	movne	r3, #0
 80024ec:	eba6 0807 	sub.w	r8, r6, r7
 80024f0:	608b      	str	r3, [r1, #8]
 80024f2:	f1b8 0f00 	cmp.w	r8, #0
 80024f6:	dd9c      	ble.n	8002432 <__sflush_r+0x1a>
 80024f8:	4643      	mov	r3, r8
 80024fa:	463a      	mov	r2, r7
 80024fc:	6a21      	ldr	r1, [r4, #32]
 80024fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002500:	4628      	mov	r0, r5
 8002502:	47b0      	blx	r6
 8002504:	2800      	cmp	r0, #0
 8002506:	dc06      	bgt.n	8002516 <__sflush_r+0xfe>
 8002508:	89a3      	ldrh	r3, [r4, #12]
 800250a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800250e:	81a3      	strh	r3, [r4, #12]
 8002510:	f04f 30ff 	mov.w	r0, #4294967295
 8002514:	e78e      	b.n	8002434 <__sflush_r+0x1c>
 8002516:	4407      	add	r7, r0
 8002518:	eba8 0800 	sub.w	r8, r8, r0
 800251c:	e7e9      	b.n	80024f2 <__sflush_r+0xda>
 800251e:	bf00      	nop
 8002520:	20400001 	.word	0x20400001

08002524 <_fflush_r>:
 8002524:	b538      	push	{r3, r4, r5, lr}
 8002526:	690b      	ldr	r3, [r1, #16]
 8002528:	4605      	mov	r5, r0
 800252a:	460c      	mov	r4, r1
 800252c:	b1db      	cbz	r3, 8002566 <_fflush_r+0x42>
 800252e:	b118      	cbz	r0, 8002538 <_fflush_r+0x14>
 8002530:	6983      	ldr	r3, [r0, #24]
 8002532:	b90b      	cbnz	r3, 8002538 <_fflush_r+0x14>
 8002534:	f7ff fa8e 	bl	8001a54 <__sinit>
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <_fflush_r+0x48>)
 800253a:	429c      	cmp	r4, r3
 800253c:	d109      	bne.n	8002552 <_fflush_r+0x2e>
 800253e:	686c      	ldr	r4, [r5, #4]
 8002540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002544:	b17b      	cbz	r3, 8002566 <_fflush_r+0x42>
 8002546:	4621      	mov	r1, r4
 8002548:	4628      	mov	r0, r5
 800254a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800254e:	f7ff bf63 	b.w	8002418 <__sflush_r>
 8002552:	4b07      	ldr	r3, [pc, #28]	; (8002570 <_fflush_r+0x4c>)
 8002554:	429c      	cmp	r4, r3
 8002556:	d101      	bne.n	800255c <_fflush_r+0x38>
 8002558:	68ac      	ldr	r4, [r5, #8]
 800255a:	e7f1      	b.n	8002540 <_fflush_r+0x1c>
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <_fflush_r+0x50>)
 800255e:	429c      	cmp	r4, r3
 8002560:	bf08      	it	eq
 8002562:	68ec      	ldreq	r4, [r5, #12]
 8002564:	e7ec      	b.n	8002540 <_fflush_r+0x1c>
 8002566:	2000      	movs	r0, #0
 8002568:	bd38      	pop	{r3, r4, r5, pc}
 800256a:	bf00      	nop
 800256c:	080027d4 	.word	0x080027d4
 8002570:	080027f4 	.word	0x080027f4
 8002574:	080027b4 	.word	0x080027b4

08002578 <_lseek_r>:
 8002578:	b538      	push	{r3, r4, r5, lr}
 800257a:	4c07      	ldr	r4, [pc, #28]	; (8002598 <_lseek_r+0x20>)
 800257c:	4605      	mov	r5, r0
 800257e:	4608      	mov	r0, r1
 8002580:	4611      	mov	r1, r2
 8002582:	2200      	movs	r2, #0
 8002584:	6022      	str	r2, [r4, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	f7fe f83a 	bl	8000600 <_lseek>
 800258c:	1c43      	adds	r3, r0, #1
 800258e:	d102      	bne.n	8002596 <_lseek_r+0x1e>
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	b103      	cbz	r3, 8002596 <_lseek_r+0x1e>
 8002594:	602b      	str	r3, [r5, #0]
 8002596:	bd38      	pop	{r3, r4, r5, pc}
 8002598:	200000b0 	.word	0x200000b0

0800259c <__swhatbuf_r>:
 800259c:	b570      	push	{r4, r5, r6, lr}
 800259e:	460e      	mov	r6, r1
 80025a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025a4:	2900      	cmp	r1, #0
 80025a6:	b096      	sub	sp, #88	; 0x58
 80025a8:	4614      	mov	r4, r2
 80025aa:	461d      	mov	r5, r3
 80025ac:	da07      	bge.n	80025be <__swhatbuf_r+0x22>
 80025ae:	2300      	movs	r3, #0
 80025b0:	602b      	str	r3, [r5, #0]
 80025b2:	89b3      	ldrh	r3, [r6, #12]
 80025b4:	061a      	lsls	r2, r3, #24
 80025b6:	d410      	bmi.n	80025da <__swhatbuf_r+0x3e>
 80025b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025bc:	e00e      	b.n	80025dc <__swhatbuf_r+0x40>
 80025be:	466a      	mov	r2, sp
 80025c0:	f000 f8b2 	bl	8002728 <_fstat_r>
 80025c4:	2800      	cmp	r0, #0
 80025c6:	dbf2      	blt.n	80025ae <__swhatbuf_r+0x12>
 80025c8:	9a01      	ldr	r2, [sp, #4]
 80025ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80025ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80025d2:	425a      	negs	r2, r3
 80025d4:	415a      	adcs	r2, r3
 80025d6:	602a      	str	r2, [r5, #0]
 80025d8:	e7ee      	b.n	80025b8 <__swhatbuf_r+0x1c>
 80025da:	2340      	movs	r3, #64	; 0x40
 80025dc:	2000      	movs	r0, #0
 80025de:	6023      	str	r3, [r4, #0]
 80025e0:	b016      	add	sp, #88	; 0x58
 80025e2:	bd70      	pop	{r4, r5, r6, pc}

080025e4 <__smakebuf_r>:
 80025e4:	898b      	ldrh	r3, [r1, #12]
 80025e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80025e8:	079d      	lsls	r5, r3, #30
 80025ea:	4606      	mov	r6, r0
 80025ec:	460c      	mov	r4, r1
 80025ee:	d507      	bpl.n	8002600 <__smakebuf_r+0x1c>
 80025f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80025f4:	6023      	str	r3, [r4, #0]
 80025f6:	6123      	str	r3, [r4, #16]
 80025f8:	2301      	movs	r3, #1
 80025fa:	6163      	str	r3, [r4, #20]
 80025fc:	b002      	add	sp, #8
 80025fe:	bd70      	pop	{r4, r5, r6, pc}
 8002600:	ab01      	add	r3, sp, #4
 8002602:	466a      	mov	r2, sp
 8002604:	f7ff ffca 	bl	800259c <__swhatbuf_r>
 8002608:	9900      	ldr	r1, [sp, #0]
 800260a:	4605      	mov	r5, r0
 800260c:	4630      	mov	r0, r6
 800260e:	f7ff faab 	bl	8001b68 <_malloc_r>
 8002612:	b948      	cbnz	r0, 8002628 <__smakebuf_r+0x44>
 8002614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002618:	059a      	lsls	r2, r3, #22
 800261a:	d4ef      	bmi.n	80025fc <__smakebuf_r+0x18>
 800261c:	f023 0303 	bic.w	r3, r3, #3
 8002620:	f043 0302 	orr.w	r3, r3, #2
 8002624:	81a3      	strh	r3, [r4, #12]
 8002626:	e7e3      	b.n	80025f0 <__smakebuf_r+0xc>
 8002628:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <__smakebuf_r+0x7c>)
 800262a:	62b3      	str	r3, [r6, #40]	; 0x28
 800262c:	89a3      	ldrh	r3, [r4, #12]
 800262e:	6020      	str	r0, [r4, #0]
 8002630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002634:	81a3      	strh	r3, [r4, #12]
 8002636:	9b00      	ldr	r3, [sp, #0]
 8002638:	6163      	str	r3, [r4, #20]
 800263a:	9b01      	ldr	r3, [sp, #4]
 800263c:	6120      	str	r0, [r4, #16]
 800263e:	b15b      	cbz	r3, 8002658 <__smakebuf_r+0x74>
 8002640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002644:	4630      	mov	r0, r6
 8002646:	f000 f881 	bl	800274c <_isatty_r>
 800264a:	b128      	cbz	r0, 8002658 <__smakebuf_r+0x74>
 800264c:	89a3      	ldrh	r3, [r4, #12]
 800264e:	f023 0303 	bic.w	r3, r3, #3
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	81a3      	strh	r3, [r4, #12]
 8002658:	89a3      	ldrh	r3, [r4, #12]
 800265a:	431d      	orrs	r5, r3
 800265c:	81a5      	strh	r5, [r4, #12]
 800265e:	e7cd      	b.n	80025fc <__smakebuf_r+0x18>
 8002660:	08001a1d 	.word	0x08001a1d

08002664 <__malloc_lock>:
 8002664:	4770      	bx	lr

08002666 <__malloc_unlock>:
 8002666:	4770      	bx	lr

08002668 <_free_r>:
 8002668:	b538      	push	{r3, r4, r5, lr}
 800266a:	4605      	mov	r5, r0
 800266c:	2900      	cmp	r1, #0
 800266e:	d045      	beq.n	80026fc <_free_r+0x94>
 8002670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002674:	1f0c      	subs	r4, r1, #4
 8002676:	2b00      	cmp	r3, #0
 8002678:	bfb8      	it	lt
 800267a:	18e4      	addlt	r4, r4, r3
 800267c:	f7ff fff2 	bl	8002664 <__malloc_lock>
 8002680:	4a1f      	ldr	r2, [pc, #124]	; (8002700 <_free_r+0x98>)
 8002682:	6813      	ldr	r3, [r2, #0]
 8002684:	4610      	mov	r0, r2
 8002686:	b933      	cbnz	r3, 8002696 <_free_r+0x2e>
 8002688:	6063      	str	r3, [r4, #4]
 800268a:	6014      	str	r4, [r2, #0]
 800268c:	4628      	mov	r0, r5
 800268e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002692:	f7ff bfe8 	b.w	8002666 <__malloc_unlock>
 8002696:	42a3      	cmp	r3, r4
 8002698:	d90c      	bls.n	80026b4 <_free_r+0x4c>
 800269a:	6821      	ldr	r1, [r4, #0]
 800269c:	1862      	adds	r2, r4, r1
 800269e:	4293      	cmp	r3, r2
 80026a0:	bf04      	itt	eq
 80026a2:	681a      	ldreq	r2, [r3, #0]
 80026a4:	685b      	ldreq	r3, [r3, #4]
 80026a6:	6063      	str	r3, [r4, #4]
 80026a8:	bf04      	itt	eq
 80026aa:	1852      	addeq	r2, r2, r1
 80026ac:	6022      	streq	r2, [r4, #0]
 80026ae:	6004      	str	r4, [r0, #0]
 80026b0:	e7ec      	b.n	800268c <_free_r+0x24>
 80026b2:	4613      	mov	r3, r2
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	b10a      	cbz	r2, 80026bc <_free_r+0x54>
 80026b8:	42a2      	cmp	r2, r4
 80026ba:	d9fa      	bls.n	80026b2 <_free_r+0x4a>
 80026bc:	6819      	ldr	r1, [r3, #0]
 80026be:	1858      	adds	r0, r3, r1
 80026c0:	42a0      	cmp	r0, r4
 80026c2:	d10b      	bne.n	80026dc <_free_r+0x74>
 80026c4:	6820      	ldr	r0, [r4, #0]
 80026c6:	4401      	add	r1, r0
 80026c8:	1858      	adds	r0, r3, r1
 80026ca:	4282      	cmp	r2, r0
 80026cc:	6019      	str	r1, [r3, #0]
 80026ce:	d1dd      	bne.n	800268c <_free_r+0x24>
 80026d0:	6810      	ldr	r0, [r2, #0]
 80026d2:	6852      	ldr	r2, [r2, #4]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	4401      	add	r1, r0
 80026d8:	6019      	str	r1, [r3, #0]
 80026da:	e7d7      	b.n	800268c <_free_r+0x24>
 80026dc:	d902      	bls.n	80026e4 <_free_r+0x7c>
 80026de:	230c      	movs	r3, #12
 80026e0:	602b      	str	r3, [r5, #0]
 80026e2:	e7d3      	b.n	800268c <_free_r+0x24>
 80026e4:	6820      	ldr	r0, [r4, #0]
 80026e6:	1821      	adds	r1, r4, r0
 80026e8:	428a      	cmp	r2, r1
 80026ea:	bf04      	itt	eq
 80026ec:	6811      	ldreq	r1, [r2, #0]
 80026ee:	6852      	ldreq	r2, [r2, #4]
 80026f0:	6062      	str	r2, [r4, #4]
 80026f2:	bf04      	itt	eq
 80026f4:	1809      	addeq	r1, r1, r0
 80026f6:	6021      	streq	r1, [r4, #0]
 80026f8:	605c      	str	r4, [r3, #4]
 80026fa:	e7c7      	b.n	800268c <_free_r+0x24>
 80026fc:	bd38      	pop	{r3, r4, r5, pc}
 80026fe:	bf00      	nop
 8002700:	20000088 	.word	0x20000088

08002704 <_read_r>:
 8002704:	b538      	push	{r3, r4, r5, lr}
 8002706:	4c07      	ldr	r4, [pc, #28]	; (8002724 <_read_r+0x20>)
 8002708:	4605      	mov	r5, r0
 800270a:	4608      	mov	r0, r1
 800270c:	4611      	mov	r1, r2
 800270e:	2200      	movs	r2, #0
 8002710:	6022      	str	r2, [r4, #0]
 8002712:	461a      	mov	r2, r3
 8002714:	f7fd ff14 	bl	8000540 <_read>
 8002718:	1c43      	adds	r3, r0, #1
 800271a:	d102      	bne.n	8002722 <_read_r+0x1e>
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	b103      	cbz	r3, 8002722 <_read_r+0x1e>
 8002720:	602b      	str	r3, [r5, #0]
 8002722:	bd38      	pop	{r3, r4, r5, pc}
 8002724:	200000b0 	.word	0x200000b0

08002728 <_fstat_r>:
 8002728:	b538      	push	{r3, r4, r5, lr}
 800272a:	4c07      	ldr	r4, [pc, #28]	; (8002748 <_fstat_r+0x20>)
 800272c:	2300      	movs	r3, #0
 800272e:	4605      	mov	r5, r0
 8002730:	4608      	mov	r0, r1
 8002732:	4611      	mov	r1, r2
 8002734:	6023      	str	r3, [r4, #0]
 8002736:	f7fd ff48 	bl	80005ca <_fstat>
 800273a:	1c43      	adds	r3, r0, #1
 800273c:	d102      	bne.n	8002744 <_fstat_r+0x1c>
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	b103      	cbz	r3, 8002744 <_fstat_r+0x1c>
 8002742:	602b      	str	r3, [r5, #0]
 8002744:	bd38      	pop	{r3, r4, r5, pc}
 8002746:	bf00      	nop
 8002748:	200000b0 	.word	0x200000b0

0800274c <_isatty_r>:
 800274c:	b538      	push	{r3, r4, r5, lr}
 800274e:	4c06      	ldr	r4, [pc, #24]	; (8002768 <_isatty_r+0x1c>)
 8002750:	2300      	movs	r3, #0
 8002752:	4605      	mov	r5, r0
 8002754:	4608      	mov	r0, r1
 8002756:	6023      	str	r3, [r4, #0]
 8002758:	f7fd ff47 	bl	80005ea <_isatty>
 800275c:	1c43      	adds	r3, r0, #1
 800275e:	d102      	bne.n	8002766 <_isatty_r+0x1a>
 8002760:	6823      	ldr	r3, [r4, #0]
 8002762:	b103      	cbz	r3, 8002766 <_isatty_r+0x1a>
 8002764:	602b      	str	r3, [r5, #0]
 8002766:	bd38      	pop	{r3, r4, r5, pc}
 8002768:	200000b0 	.word	0x200000b0

0800276c <_init>:
 800276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276e:	bf00      	nop
 8002770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002772:	bc08      	pop	{r3}
 8002774:	469e      	mov	lr, r3
 8002776:	4770      	bx	lr

08002778 <_fini>:
 8002778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277a:	bf00      	nop
 800277c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277e:	bc08      	pop	{r3}
 8002780:	469e      	mov	lr, r3
 8002782:	4770      	bx	lr
