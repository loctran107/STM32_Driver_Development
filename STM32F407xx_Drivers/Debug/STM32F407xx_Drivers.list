
STM32F407xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e48  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000ff0  08000ff0  00010ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001010  08001010  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08001010  08001010  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001010  08001010  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001010  08001010  00011010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001014  08001014  00011014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08001018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000020  08001038  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08001038  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002a59  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000006b5  00000000  00000000  00022aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000160  00000000  00000000  00023160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000128  00000000  00000000  000232c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002606  00000000  00000000  000233e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001759  00000000  00000000  000259ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a654  00000000  00000000  00027147  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003179b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000510  00000000  00000000  00031818  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000020 	.word	0x20000020
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000fd8 	.word	0x08000fd8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000024 	.word	0x20000024
 80001e4:	08000fd8 	.word	0x08000fd8

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <main>:

//some data
//Note: data should be less than 32 bytes in one transaction (a.k.a less than 32 characters)
uint8_t data[30] = " Testing I2C Master Tx\n";

int main() {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b090      	sub	sp, #64	; 0x40
 80001fc:	af00      	add	r7, sp, #0


	//Define the handle structures
	GPIO_Handle_t GPIO_Button, I2C_GPIO;
	I2C_Handle_t  I2C_Handler;
	memset(&GPIO_Button, 0, sizeof(GPIO_Button));
 80001fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000202:	221c      	movs	r2, #28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f000 fede 	bl	8000fc8 <memset>
	memset(&I2C_GPIO, 0, sizeof(GPIO_Button));
 800020c:	f107 0308 	add.w	r3, r7, #8
 8000210:	221c      	movs	r2, #28
 8000212:	2100      	movs	r1, #0
 8000214:	4618      	mov	r0, r3
 8000216:	f000 fed7 	bl	8000fc8 <memset>
	memset(&I2C_Handler, 0, sizeof(GPIO_Button));
 800021a:	463b      	mov	r3, r7
 800021c:	221c      	movs	r2, #28
 800021e:	2100      	movs	r1, #0
 8000220:	4618      	mov	r0, r3
 8000222:	f000 fed1 	bl	8000fc8 <memset>

	GPIO_ButtonInit(&GPIO_Button);
 8000226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800022a:	4618      	mov	r0, r3
 800022c:	f000 f826 	bl	800027c <GPIO_ButtonInit>
	GPIO_I2CInit(&I2C_GPIO);
 8000230:	f107 0308 	add.w	r3, r7, #8
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f843 	bl	80002c0 <GPIO_I2CInit>
	I2C_HandlerInit(&I2C_Handler);
 800023a:	463b      	mov	r3, r7
 800023c:	4618      	mov	r0, r3
 800023e:	f000 f867 	bl	8000310 <I2C_HandlerInit>


	//Enable the I2C Peripheral enable
	I2C_PeripheralEnable(I2C_Handler.pI2Cx, ENABLE);
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	2101      	movs	r1, #1
 8000246:	4618      	mov	r0, r3
 8000248:	f000 fa8e 	bl	8000768 <I2C_PeripheralEnable>


	while (1) {
		while(!GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_0));
 800024c:	bf00      	nop
 800024e:	2101      	movs	r1, #1
 8000250:	4808      	ldr	r0, [pc, #32]	; (8000274 <main+0x7c>)
 8000252:	f000 fe7f 	bl	8000f54 <GPIO_ReadFromInputPin>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d0f8      	beq.n	800024e <main+0x56>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 800025c:	f000 f87a 	bl	8000354 <delay>

		I2C_MasterSendData(&I2C_Handler, data, strlen((char*) data), SLAVE_ADDR);
 8000260:	4805      	ldr	r0, [pc, #20]	; (8000278 <main+0x80>)
 8000262:	f7ff ffc1 	bl	80001e8 <strlen>
 8000266:	4602      	mov	r2, r0
 8000268:	4638      	mov	r0, r7
 800026a:	2368      	movs	r3, #104	; 0x68
 800026c:	4902      	ldr	r1, [pc, #8]	; (8000278 <main+0x80>)
 800026e:	f000 fa9d 	bl	80007ac <I2C_MasterSendData>
		while(!GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_0));
 8000272:	e7eb      	b.n	800024c <main+0x54>
 8000274:	40020000 	.word	0x40020000
 8000278:	20000000 	.word	0x20000000

0800027c <GPIO_ButtonInit>:
	}

	return EXIT_SUCCESS;
}

void GPIO_ButtonInit(GPIO_Handle_t* GPIO_Button) {
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	GPIO_Button->pGPIOx = GPIOA;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a0d      	ldr	r2, [pc, #52]	; (80002bc <GPIO_ButtonInit+0x40>)
 8000288:	601a      	str	r2, [r3, #0]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinMode = GPIO_INPUT_MODE;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2200      	movs	r2, #0
 800028e:	609a      	str	r2, [r3, #8]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2201      	movs	r2, #1
 8000294:	605a      	str	r2, [r3, #4]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinPuPdCtrl = GPIO_NO_PU_PD;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2200      	movs	r2, #0
 800029a:	611a      	str	r2, [r3, #16]
	GPIO_Button->GPIOx_PinConfig.GPIO_PinSpeed = GPIO_HIGH_SPEED;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2202      	movs	r2, #2
 80002a0:	60da      	str	r2, [r3, #12]

	GPIO_DeInit(GPIO_Button->pGPIOx);
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 fd78 	bl	8000d9c <GPIO_DeInit>
	GPIO_Init(GPIO_Button);
 80002ac:	6878      	ldr	r0, [r7, #4]
 80002ae:	f000 fc47 	bl	8000b40 <GPIO_Init>
}
 80002b2:	bf00      	nop
 80002b4:	3708      	adds	r7, #8
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40020000 	.word	0x40020000

080002c0 <GPIO_I2CInit>:

void GPIO_I2CInit(GPIO_Handle_t* I2C_GPIO) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	I2C_GPIO->pGPIOx = GPIOB;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4a10      	ldr	r2, [pc, #64]	; (800030c <GPIO_I2CInit+0x4c>)
 80002cc:	601a      	str	r2, [r3, #0]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinMode = GPIO_ALT_FUNC_MODE;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2202      	movs	r2, #2
 80002d2:	609a      	str	r2, [r3, #8]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinAltFuncMode = AF4;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2204      	movs	r2, #4
 80002d8:	619a      	str	r2, [r3, #24]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinNumber = GPIO_PIN_6 | GPIO_PIN_9;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	f44f 7210 	mov.w	r2, #576	; 0x240
 80002e0:	605a      	str	r2, [r3, #4]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinOPType = GPIO_OPEN_DRAIN;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2201      	movs	r2, #1
 80002e6:	615a      	str	r2, [r3, #20]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinPuPdCtrl = GPIO_PU;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2201      	movs	r2, #1
 80002ec:	611a      	str	r2, [r3, #16]
	I2C_GPIO->GPIOx_PinConfig.GPIO_PinSpeed = GPIO_MEDIUM_SPEED;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2201      	movs	r2, #1
 80002f2:	60da      	str	r2, [r3, #12]

	GPIO_DeInit(I2C_GPIO->pGPIOx);
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fd4f 	bl	8000d9c <GPIO_DeInit>
	GPIO_Init(I2C_GPIO);
 80002fe:	6878      	ldr	r0, [r7, #4]
 8000300:	f000 fc1e 	bl	8000b40 <GPIO_Init>
}
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40020400 	.word	0x40020400

08000310 <I2C_HandlerInit>:

void I2C_HandlerInit(I2C_Handle_t* I2C_Handler) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	I2C_Handler->pI2Cx = I2C1;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a0d      	ldr	r2, [pc, #52]	; (8000350 <I2C_HandlerInit+0x40>)
 800031c:	601a      	str	r2, [r3, #0]
	I2C_Handler->I2C_Config.ACKControl = I2C_ACK_EN;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2201      	movs	r2, #1
 8000322:	719a      	strb	r2, [r3, #6]
	I2C_Handler->I2C_Config.FMDutyCycle = I2C_FM_DUTY_2;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2200      	movs	r2, #0
 8000328:	71da      	strb	r2, [r3, #7]
	I2C_Handler->I2C_Config.SCLSpeed = I2C_SCL_SPEED_SM;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2200      	movs	r2, #0
 800032e:	711a      	strb	r2, [r3, #4]
	I2C_Handler->I2C_Config.DeviceAddress = MY_ADDR;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2261      	movs	r2, #97	; 0x61
 8000334:	715a      	strb	r2, [r3, #5]

	I2C_DeInit(I2C_Handler->pI2Cx);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4618      	mov	r0, r3
 800033c:	f000 f9d6 	bl	80006ec <I2C_DeInit>
	I2C_Init(I2C_Handler);
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f000 f905 	bl	8000550 <I2C_Init>
}
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40005400 	.word	0x40005400

08000354 <delay>:

void delay() {
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
	for (uint32_t i; i < 10000000; i++);
 800035a:	e002      	b.n	8000362 <delay+0xe>
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	3301      	adds	r3, #1
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a04      	ldr	r2, [pc, #16]	; (8000378 <delay+0x24>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d9f8      	bls.n	800035c <delay+0x8>
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	0098967f 	.word	0x0098967f

0800037c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000380:	480d      	ldr	r0, [pc, #52]	; (80003b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000382:	490e      	ldr	r1, [pc, #56]	; (80003bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000384:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <LoopForever+0xe>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000388:	e002      	b.n	8000390 <LoopCopyDataInit>

0800038a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800038c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038e:	3304      	adds	r3, #4

08000390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000394:	d3f9      	bcc.n	800038a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000396:	4a0b      	ldr	r2, [pc, #44]	; (80003c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000398:	4c0b      	ldr	r4, [pc, #44]	; (80003c8 <LoopForever+0x16>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800039c:	e001      	b.n	80003a2 <LoopFillZerobss>

0800039e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a0:	3204      	adds	r2, #4

080003a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a4:	d3fb      	bcc.n	800039e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003a6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80003aa:	f000 fde9 	bl	8000f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ae:	f7ff ff23 	bl	80001f8 <main>

080003b2 <LoopForever>:

LoopForever:
    b LoopForever
 80003b2:	e7fe      	b.n	80003b2 <LoopForever>
  ldr   r0, =_estack
 80003b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003bc:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80003c0:	08001018 	.word	0x08001018
  ldr r2, =_sbss
 80003c4:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80003c8:	2000003c 	.word	0x2000003c

080003cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003cc:	e7fe      	b.n	80003cc <ADC_IRQHandler>
	...

080003d0 <I2C_PeriClkCtrl>:
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void I2C_PeriClkCtrl(I2C_Reg_t* pI2Cx, uint8_t EnOrDi) {
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	460b      	mov	r3, r1
 80003da:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 80003dc:	78fb      	ldrb	r3, [r7, #3]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d01c      	beq.n	800041c <I2C_PeriClkCtrl+0x4c>
		I2Cx_PCLK_EN(pI2Cx); //Go to I2Cx_PCLK_EN macro for more details
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a1e      	ldr	r2, [pc, #120]	; (8000460 <I2C_PeriClkCtrl+0x90>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d106      	bne.n	80003f8 <I2C_PeriClkCtrl+0x28>
 80003ea:	4b1e      	ldr	r3, [pc, #120]	; (8000464 <I2C_PeriClkCtrl+0x94>)
 80003ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003ee:	4a1d      	ldr	r2, [pc, #116]	; (8000464 <I2C_PeriClkCtrl+0x94>)
 80003f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003f4:	6413      	str	r3, [r2, #64]	; 0x40
	} else {
		I2Cx_PCLK_DI(pI2Cx); //Go to I2Cx_PCLK_DI macro for more details
	}
}
 80003f6:	e02d      	b.n	8000454 <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_EN(pI2Cx); //Go to I2Cx_PCLK_EN macro for more details
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a1b      	ldr	r2, [pc, #108]	; (8000468 <I2C_PeriClkCtrl+0x98>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d106      	bne.n	800040e <I2C_PeriClkCtrl+0x3e>
 8000400:	4b18      	ldr	r3, [pc, #96]	; (8000464 <I2C_PeriClkCtrl+0x94>)
 8000402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000404:	4a17      	ldr	r2, [pc, #92]	; (8000464 <I2C_PeriClkCtrl+0x94>)
 8000406:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800040a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800040c:	e022      	b.n	8000454 <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_EN(pI2Cx); //Go to I2Cx_PCLK_EN macro for more details
 800040e:	4b15      	ldr	r3, [pc, #84]	; (8000464 <I2C_PeriClkCtrl+0x94>)
 8000410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000412:	4a14      	ldr	r2, [pc, #80]	; (8000464 <I2C_PeriClkCtrl+0x94>)
 8000414:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000418:	6413      	str	r3, [r2, #64]	; 0x40
}
 800041a:	e01b      	b.n	8000454 <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_DI(pI2Cx); //Go to I2Cx_PCLK_DI macro for more details
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a10      	ldr	r2, [pc, #64]	; (8000460 <I2C_PeriClkCtrl+0x90>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d106      	bne.n	8000432 <I2C_PeriClkCtrl+0x62>
 8000424:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <I2C_PeriClkCtrl+0x94>)
 8000426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000428:	4a0e      	ldr	r2, [pc, #56]	; (8000464 <I2C_PeriClkCtrl+0x94>)
 800042a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800042e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000430:	e010      	b.n	8000454 <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_DI(pI2Cx); //Go to I2Cx_PCLK_DI macro for more details
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a0c      	ldr	r2, [pc, #48]	; (8000468 <I2C_PeriClkCtrl+0x98>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d106      	bne.n	8000448 <I2C_PeriClkCtrl+0x78>
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <I2C_PeriClkCtrl+0x94>)
 800043c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800043e:	4a09      	ldr	r2, [pc, #36]	; (8000464 <I2C_PeriClkCtrl+0x94>)
 8000440:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000444:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000446:	e005      	b.n	8000454 <I2C_PeriClkCtrl+0x84>
		I2Cx_PCLK_DI(pI2Cx); //Go to I2Cx_PCLK_DI macro for more details
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <I2C_PeriClkCtrl+0x94>)
 800044a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800044c:	4a05      	ldr	r2, [pc, #20]	; (8000464 <I2C_PeriClkCtrl+0x94>)
 800044e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000452:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	40005400 	.word	0x40005400
 8000464:	40023800 	.word	0x40023800
 8000468:	40005800 	.word	0x40005800

0800046c <getPLLClkFreq>:

static uint32_t getPLLClkFreq() {
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0

	//Implemented later
	return 0;
 8000470:	2300      	movs	r3, #0
}
 8000472:	4618      	mov	r0, r3
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <getAPB1ClkFreq>:
 * @param[in]			-
 *
 * @return				- none
 * @note				- See the Clock Tree diagram in STM32F4xx Reference Manual for details
 */
static uint32_t getAPB1ClkFreq() {
 800047c:	b5b0      	push	{r4, r5, r7, lr}
 800047e:	b08a      	sub	sp, #40	; 0x28
 8000480:	af00      	add	r7, sp, #0

	uint16_t temp, AHB1Prescalar,  APB1Prescalar;
	uint16_t AHB1PreSclr[9] = {1, 2, 4, 6, 16, 64, 128, 256, 512};
 8000482:	4b2e      	ldr	r3, [pc, #184]	; (800053c <getAPB1ClkFreq+0xc0>)
 8000484:	f107 040c 	add.w	r4, r7, #12
 8000488:	461d      	mov	r5, r3
 800048a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800048c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800048e:	682b      	ldr	r3, [r5, #0]
 8000490:	8023      	strh	r3, [r4, #0]
	uint16_t APB1PreSclr[5] = {1, 2, 4, 8, 16};
 8000492:	4a2b      	ldr	r2, [pc, #172]	; (8000540 <getAPB1ClkFreq+0xc4>)
 8000494:	463b      	mov	r3, r7
 8000496:	ca07      	ldmia	r2, {r0, r1, r2}
 8000498:	c303      	stmia	r3!, {r0, r1}
 800049a:	801a      	strh	r2, [r3, #0]
	uint32_t sysClk;

	//Determine what system clock the MCU is running
	switch ((RCC->CFGR >> 2U) & 0x3) {
 800049c:	4b29      	ldr	r3, [pc, #164]	; (8000544 <getAPB1ClkFreq+0xc8>)
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	089b      	lsrs	r3, r3, #2
 80004a2:	f003 0303 	and.w	r3, r3, #3
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d004      	beq.n	80004b4 <getAPB1ClkFreq+0x38>
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d305      	bcc.n	80004ba <getAPB1ClkFreq+0x3e>
 80004ae:	2b02      	cmp	r3, #2
 80004b0:	d006      	beq.n	80004c0 <getAPB1ClkFreq+0x44>
 80004b2:	e009      	b.n	80004c8 <getAPB1ClkFreq+0x4c>
	case RCC_HSE:	sysClk = HSE_CLK_FREQ; break; //8MHz
 80004b4:	4b24      	ldr	r3, [pc, #144]	; (8000548 <getAPB1ClkFreq+0xcc>)
 80004b6:	627b      	str	r3, [r7, #36]	; 0x24
 80004b8:	e006      	b.n	80004c8 <getAPB1ClkFreq+0x4c>
	case RCC_HSI:	sysClk = HSI_CLK_FREQ; break; //16MHz
 80004ba:	4b24      	ldr	r3, [pc, #144]	; (800054c <getAPB1ClkFreq+0xd0>)
 80004bc:	627b      	str	r3, [r7, #36]	; 0x24
 80004be:	e003      	b.n	80004c8 <getAPB1ClkFreq+0x4c>
	case RCC_PLL:	sysClk = getPLLClkFreq(); break; //See this function implementation for details
 80004c0:	f7ff ffd4 	bl	800046c <getPLLClkFreq>
 80004c4:	6278      	str	r0, [r7, #36]	; 0x24
 80004c6:	bf00      	nop
	}

	//Determine the prescalar factor AHB1 is using
	temp = (RCC->CFGR >> 4U) & 0xF;
 80004c8:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <getAPB1ClkFreq+0xc8>)
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	091b      	lsrs	r3, r3, #4
 80004ce:	b29b      	uxth	r3, r3
 80004d0:	f003 030f 	and.w	r3, r3, #15
 80004d4:	847b      	strh	r3, [r7, #34]	; 0x22
	AHB1Prescalar = (temp < 8U) ? AHB1PreSclr[0] : AHB1PreSclr[temp % 8 + 1];
 80004d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80004d8:	2b07      	cmp	r3, #7
 80004da:	d801      	bhi.n	80004e0 <getAPB1ClkFreq+0x64>
 80004dc:	89bb      	ldrh	r3, [r7, #12]
 80004de:	e009      	b.n	80004f4 <getAPB1ClkFreq+0x78>
 80004e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80004e2:	f003 0307 	and.w	r3, r3, #7
 80004e6:	3301      	adds	r3, #1
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80004ee:	4413      	add	r3, r2
 80004f0:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 80004f4:	843b      	strh	r3, [r7, #32]

	//Determine the prescalar factor APB1 is using
	temp = (RCC->CFGR >> 10U) & 0x7;
 80004f6:	4b13      	ldr	r3, [pc, #76]	; (8000544 <getAPB1ClkFreq+0xc8>)
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	0a9b      	lsrs	r3, r3, #10
 80004fc:	b29b      	uxth	r3, r3
 80004fe:	f003 0307 	and.w	r3, r3, #7
 8000502:	847b      	strh	r3, [r7, #34]	; 0x22
	APB1Prescalar = (temp < 4U) ? APB1PreSclr[0] : APB1PreSclr[temp % 8 + 1];
 8000504:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000506:	2b03      	cmp	r3, #3
 8000508:	d801      	bhi.n	800050e <getAPB1ClkFreq+0x92>
 800050a:	883b      	ldrh	r3, [r7, #0]
 800050c:	e009      	b.n	8000522 <getAPB1ClkFreq+0xa6>
 800050e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000510:	f003 0307 	and.w	r3, r3, #7
 8000514:	3301      	adds	r3, #1
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800051c:	4413      	add	r3, r2
 800051e:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8000522:	83fb      	strh	r3, [r7, #30]

	//Return the APB1 clock freq
	return (sysClk / AHB1Prescalar) / APB1Prescalar;
 8000524:	8c3b      	ldrh	r3, [r7, #32]
 8000526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000528:	fbb2 f2f3 	udiv	r2, r2, r3
 800052c:	8bfb      	ldrh	r3, [r7, #30]
 800052e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000532:	4618      	mov	r0, r3
 8000534:	3728      	adds	r7, #40	; 0x28
 8000536:	46bd      	mov	sp, r7
 8000538:	bdb0      	pop	{r4, r5, r7, pc}
 800053a:	bf00      	nop
 800053c:	08000ff0 	.word	0x08000ff0
 8000540:	08001004 	.word	0x08001004
 8000544:	40023800 	.word	0x40023800
 8000548:	007a1200 	.word	0x007a1200
 800054c:	00f42400 	.word	0x00f42400

08000550 <I2C_Init>:
 * 						  and port
 *
 * @return				- none
 * @note				- none
 */
void I2C_Init(I2C_Handle_t* pI2CHandler) {
 8000550:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000554:	b088      	sub	sp, #32
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]

	uint16_t ccr_value;
	uint32_t APB1ClkFreq;
	uint64_t temp;
	temp = 0;
 800055a:	f04f 0300 	mov.w	r3, #0
 800055e:	f04f 0400 	mov.w	r4, #0
 8000562:	e9c7 3404 	strd	r3, r4, [r7, #16]

	//Enable the peripheral clock
	I2C_PeriClkCtrl(pI2CHandler->pI2Cx, ENABLE);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2101      	movs	r1, #1
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ff2f 	bl	80003d0 <I2C_PeriClkCtrl>

	//I2C1->CR1 |= (1 << I2C_CR1_ACK);

	//Select the peripheral clock frequency
	//The other bits are ignored and set to 0 by default
	APB1ClkFreq = getAPB1ClkFreq();
 8000572:	f7ff ff83 	bl	800047c <getAPB1ClkFreq>
 8000576:	60f8      	str	r0, [r7, #12]
	pI2CHandler->pI2Cx->CR2 |= (APB1ClkFreq / 1000000U) & 0x3F;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	6859      	ldr	r1, [r3, #4]
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	4a52      	ldr	r2, [pc, #328]	; (80006cc <I2C_Init+0x17c>)
 8000582:	fba2 2303 	umull	r2, r3, r2, r3
 8000586:	0c9b      	lsrs	r3, r3, #18
 8000588:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	430a      	orrs	r2, r1
 8000592:	605a      	str	r2, [r3, #4]
	//I2C1->CR2 |= (APB1ClkFreq / 1000000U) & 0x3F;
	//You may have option to configure the addressing mode in the I2C_OAR1
	//register. However, we don't implement that as part of the configuration
	//option in I2C. If you so wish to do it, implement that yourself!!!
	pI2CHandler->pI2Cx->OAR1 |= pI2CHandler->I2C_Config.DeviceAddress & 0xFF;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	689a      	ldr	r2, [r3, #8]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	795b      	ldrb	r3, [r3, #5]
 800059e:	4619      	mov	r1, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	430a      	orrs	r2, r1
 80005a6:	609a      	str	r2, [r3, #8]

	//SPECIAL NOTE: Bit 14 of I2C_OAR1 register should be on kept at 1
	//by the software. Reason: I don't know, figure it out if you can.
	pI2CHandler->pI2Cx->OAR1 |= (1 << 14U);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	689a      	ldr	r2, [r3, #8]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80005b6:	609a      	str	r2, [r3, #8]

	//Configure the SCL clock frequencies depending on the mode
	//standard mode/Fast mode and duty cycle bit
	temp |= pI2CHandler->I2C_Config.SCLSpeed << I2C_CCR_F_S;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	791b      	ldrb	r3, [r3, #4]
 80005bc:	03db      	lsls	r3, r3, #15
 80005be:	469b      	mov	fp, r3
 80005c0:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80005c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80005c8:	ea4b 0301 	orr.w	r3, fp, r1
 80005cc:	ea4c 0402 	orr.w	r4, ip, r2
 80005d0:	e9c7 3404 	strd	r3, r4, [r7, #16]
	temp |= pI2CHandler->I2C_Config.FMDutyCycle << I2C_CCR_DUTY;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	79db      	ldrb	r3, [r3, #7]
 80005d8:	039b      	lsls	r3, r3, #14
 80005da:	469b      	mov	fp, r3
 80005dc:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80005e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80005e4:	ea4b 0301 	orr.w	r3, fp, r1
 80005e8:	ea4c 0402 	orr.w	r4, ip, r2
 80005ec:	e9c7 3404 	strd	r3, r4, [r7, #16]

	//Given: T(High) + T(Low) = T(I2C_SCL_SPEED)
	//T_I2C_SCL_SPEED = (float) 1 / I2C_SCL_SPEED(pI2CHandler->I2C_Config.SCLSpeed);
	//T_APB1ClkFreq	= (float) 1 / APB1ClkFreq;
	if (pI2CHandler->pI2Cx->CCR & (1 << I2C_CCR_F_S)) { //Fast mode
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	69db      	ldr	r3, [r3, #28]
 80005f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d01e      	beq.n	800063c <I2C_Init+0xec>
		if (pI2CHandler->pI2Cx->CCR & (1 << I2C_CCR_DUTY)) { //To reach 400khz
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	69db      	ldr	r3, [r3, #28]
 8000604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000608:	2b00      	cmp	r3, #0
 800060a:	d00b      	beq.n	8000624 <I2C_Init+0xd4>
			/*	Calculation: T(High) = 9 * CCR * T(PCLK1)
			 *		   		 T(Low) = 16 * CCR * T(PCLK1)
			 *			     T(High) + T(Low) = 25 * CCR * T(PCLK1)
			 *			     CCR = (T(High) + T(Low)) / (25 * T(PCLK1))
			 */
			ccr_value = APB1ClkFreq / (25 * (I2C_SCL_SPEED(pI2CHandler->I2C_Config.SCLSpeed)));
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	791b      	ldrb	r3, [r3, #4]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d101      	bne.n	8000618 <I2C_Init+0xc8>
 8000614:	4b2e      	ldr	r3, [pc, #184]	; (80006d0 <I2C_Init+0x180>)
 8000616:	e000      	b.n	800061a <I2C_Init+0xca>
 8000618:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <I2C_Init+0x184>)
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000620:	83fb      	strh	r3, [r7, #30]
 8000622:	e016      	b.n	8000652 <I2C_Init+0x102>
			/*	Calculation: T(High) = 1 * CCR * T(PCLK1)
			 *		   		 T(Low) = 2 * CCR * T(PCLK1)
			 *			     T(High) + T(Low) = 3 * CCR * T(PCLK1)
			 *			     CCR = (T(High) + T(Low)) / (3 * T(PCLK1))
			 */
			ccr_value = APB1ClkFreq / (3 * (I2C_SCL_SPEED(pI2CHandler->I2C_Config.SCLSpeed)));
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	791b      	ldrb	r3, [r3, #4]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d101      	bne.n	8000630 <I2C_Init+0xe0>
 800062c:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <I2C_Init+0x188>)
 800062e:	e000      	b.n	8000632 <I2C_Init+0xe2>
 8000630:	4b2a      	ldr	r3, [pc, #168]	; (80006dc <I2C_Init+0x18c>)
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	fbb2 f3f3 	udiv	r3, r2, r3
 8000638:	83fb      	strh	r3, [r7, #30]
 800063a:	e00a      	b.n	8000652 <I2C_Init+0x102>
		/*	Calculation: T(High) = CCR * T(PCLK1)
		 *		   		 T(Low) =   CCR * T(PCLK1)
		 *			     T(High) + T(Low) = 2 * CCR * T(PCLK1)
		 *			     CCR = (T(High) + T(Low)) / (2 * T(PCLK1))
		 */
		ccr_value = APB1ClkFreq / (2 * (I2C_SCL_SPEED(pI2CHandler->I2C_Config.SCLSpeed)));
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	791b      	ldrb	r3, [r3, #4]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d101      	bne.n	8000648 <I2C_Init+0xf8>
 8000644:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <I2C_Init+0x190>)
 8000646:	e000      	b.n	800064a <I2C_Init+0xfa>
 8000648:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <I2C_Init+0x194>)
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000650:	83fb      	strh	r3, [r7, #30]
	}
	temp |= (ccr_value & 0xFFF);
 8000652:	8bfb      	ldrh	r3, [r7, #30]
 8000654:	f04f 0400 	mov.w	r4, #0
 8000658:	f640 71ff 	movw	r1, #4095	; 0xfff
 800065c:	f04f 0200 	mov.w	r2, #0
 8000660:	ea03 0b01 	and.w	fp, r3, r1
 8000664:	ea04 0c02 	and.w	ip, r4, r2
 8000668:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800066c:	ea4b 0301 	orr.w	r3, fp, r1
 8000670:	ea4c 0402 	orr.w	r4, ip, r2
 8000674:	e9c7 3404 	strd	r3, r4, [r7, #16]
	pI2CHandler->pI2Cx->CCR = temp;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	693a      	ldr	r2, [r7, #16]
 800067e:	61da      	str	r2, [r3, #28]

	//Clear the TRISE reg
	pI2CHandler->pI2Cx->TRISE &= ~((int) 1);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	6a1a      	ldr	r2, [r3, #32]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f022 0201 	bic.w	r2, r2, #1
 800068e:	621a      	str	r2, [r3, #32]

	//Configure the Rise Time (TRISE)
	temp = APB1ClkFreq * (I2C_T_RISE(pI2CHandler->I2C_Config.SCLSpeed)) / (10000000U);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	791b      	ldrb	r3, [r3, #4]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d101      	bne.n	800069c <I2C_Init+0x14c>
 8000698:	2303      	movs	r3, #3
 800069a:	e000      	b.n	800069e <I2C_Init+0x14e>
 800069c:	230a      	movs	r3, #10
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	fb02 f303 	mul.w	r3, r2, r3
 80006a4:	4a10      	ldr	r2, [pc, #64]	; (80006e8 <I2C_Init+0x198>)
 80006a6:	fba2 2303 	umull	r2, r3, r2, r3
 80006aa:	0d9b      	lsrs	r3, r3, #22
 80006ac:	f04f 0400 	mov.w	r4, #0
 80006b0:	e9c7 3404 	strd	r3, r4, [r7, #16]
	pI2CHandler->pI2Cx->TRISE = (temp + 1) & 0x3F;
 80006b4:	693b      	ldr	r3, [r7, #16]
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80006c0:	621a      	str	r2, [r3, #32]

}
 80006c2:	bf00      	nop
 80006c4:	3720      	adds	r7, #32
 80006c6:	46bd      	mov	sp, r7
 80006c8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80006cc:	431bde83 	.word	0x431bde83
 80006d0:	00989680 	.word	0x00989680
 80006d4:	002625a0 	.word	0x002625a0
 80006d8:	00124f80 	.word	0x00124f80
 80006dc:	000493e0 	.word	0x000493e0
 80006e0:	000c3500 	.word	0x000c3500
 80006e4:	00030d40 	.word	0x00030d40
 80006e8:	6b5fca6b 	.word	0x6b5fca6b

080006ec <I2C_DeInit>:
 * @param[in]			- Base address of the specific SPI peripherals (SPI_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- The implementation so far only covers only 3 I2C ports
 */
void I2C_DeInit(I2C_Reg_t* pI2Cx) {
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	if (pI2Cx == I2C1) {
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	4a19      	ldr	r2, [pc, #100]	; (800075c <I2C_DeInit+0x70>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d10c      	bne.n	8000716 <I2C_DeInit+0x2a>
		I2C1_PCLK_RST();
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <I2C_DeInit+0x74>)
 80006fe:	6a1b      	ldr	r3, [r3, #32]
 8000700:	4a17      	ldr	r2, [pc, #92]	; (8000760 <I2C_DeInit+0x74>)
 8000702:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000706:	6213      	str	r3, [r2, #32]
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <I2C_DeInit+0x74>)
 800070a:	6a1b      	ldr	r3, [r3, #32]
 800070c:	4a14      	ldr	r2, [pc, #80]	; (8000760 <I2C_DeInit+0x74>)
 800070e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000712:	6213      	str	r3, [r2, #32]
	} else if (pI2Cx == I2C2) {
		I2C2_PCLK_RST();
	} else {
		I2C3_PCLK_RST();
	}
}
 8000714:	e01c      	b.n	8000750 <I2C_DeInit+0x64>
	} else if (pI2Cx == I2C2) {
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a12      	ldr	r2, [pc, #72]	; (8000764 <I2C_DeInit+0x78>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d10c      	bne.n	8000738 <I2C_DeInit+0x4c>
		I2C2_PCLK_RST();
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <I2C_DeInit+0x74>)
 8000720:	6a1b      	ldr	r3, [r3, #32]
 8000722:	4a0f      	ldr	r2, [pc, #60]	; (8000760 <I2C_DeInit+0x74>)
 8000724:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000728:	6213      	str	r3, [r2, #32]
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <I2C_DeInit+0x74>)
 800072c:	6a1b      	ldr	r3, [r3, #32]
 800072e:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <I2C_DeInit+0x74>)
 8000730:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000734:	6213      	str	r3, [r2, #32]
}
 8000736:	e00b      	b.n	8000750 <I2C_DeInit+0x64>
		I2C3_PCLK_RST();
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <I2C_DeInit+0x74>)
 800073a:	6a1b      	ldr	r3, [r3, #32]
 800073c:	4a08      	ldr	r2, [pc, #32]	; (8000760 <I2C_DeInit+0x74>)
 800073e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000742:	6213      	str	r3, [r2, #32]
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <I2C_DeInit+0x74>)
 8000746:	6a1b      	ldr	r3, [r3, #32]
 8000748:	4a05      	ldr	r2, [pc, #20]	; (8000760 <I2C_DeInit+0x74>)
 800074a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800074e:	6213      	str	r3, [r2, #32]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	40005400 	.word	0x40005400
 8000760:	40023800 	.word	0x40023800
 8000764:	40005800 	.word	0x40005800

08000768 <I2C_PeripheralEnable>:
 * @param[in]			= ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void I2C_PeripheralEnable(I2C_Reg_t* pI2Cx, uint8_t EnOrDi) {
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi) {
 8000774:	78fb      	ldrb	r3, [r7, #3]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d00c      	beq.n	8000794 <I2C_PeripheralEnable+0x2c>
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f043 0201 	orr.w	r2, r3, #1
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	601a      	str	r2, [r3, #0]

		//Enable the Acknowledge bit
		pI2Cx->CR1 |=  1 << I2C_CR1_ACK;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	601a      	str	r2, [r3, #0]
	} else {
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE); //clearing PE also clears ACK
	}
}
 8000792:	e005      	b.n	80007a0 <I2C_PeripheralEnable+0x38>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE); //clearing PE also clears ACK
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f023 0201 	bic.w	r2, r3, #1
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	601a      	str	r2, [r3, #0]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <I2C_MasterSendData>:
 * @return				- none
 * @note				- See the Transfer Sequence diagram for master transmitter on page 849
 * 						  in MCU Reference Manual for more details
 */
void I2C_MasterSendData(I2C_Handle_t* pI2CHandler, uint8_t* pTxBuffer,
		                uint32_t len, uint8_t pSlaveAddress) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
 80007b8:	70fb      	strb	r3, [r7, #3]
    // Note: Setting the START bit causes the interface to generate
    //	  	a Start condition and switch to Master Mode (MSL bit set) when
    //	  	the BUSY bit is cleared.
    //	  	This also set the SB bit by hardware (see I2C_SR1 register for details)
    //      You may also need to enable the I2C_CR1 PE register
	generateStartCondition(pI2CHandler->pI2Cx);
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f872 	bl	80008a8 <generateStartCondition>

	// Poll until the SB bit in SR1 register is set
	// This is important if any of the bit is set by HARDWARE
	while (!I2C_CheckStatusFlag(&pI2CHandler->pI2Cx->SR1, I2C_FLAG_SR1_SB));
 80007c4:	bf00      	nop
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	3314      	adds	r3, #20
 80007cc:	2101      	movs	r1, #1
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f855 	bl	800087e <I2C_CheckStatusFlag>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d0f5      	beq.n	80007c6 <I2C_MasterSendData+0x1a>

	// Clear the SB bit by reading SR1 register followed by
	// writing DR register with Address. If SB bit not clear,
	// SCL will be pulled low and the transmission is delay (which
	// we don't want, obviously)
	clearFlagSB(pI2CHandler->pI2Cx);
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 f882 	bl	80008e8 <clearFlagSB>
	pI2CHandler->pI2Cx->DR = (pSlaveAddress << 1); //Write the slave address to DR register
 80007e4:	78fb      	ldrb	r3, [r7, #3]
 80007e6:	005a      	lsls	r2, r3, #1
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	611a      	str	r2, [r3, #16]

	//Polling until the ADDR bit is set
	while (!I2C_CheckStatusFlag(&pI2CHandler->pI2Cx->SR1, I2C_FLAG_SR1_ADDR));
 80007ee:	bf00      	nop
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	3314      	adds	r3, #20
 80007f6:	2102      	movs	r1, #2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 f840 	bl	800087e <I2C_CheckStatusFlag>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d0f5      	beq.n	80007f0 <I2C_MasterSendData+0x44>

	//As soon as the slave address is sent, the ADDR bit is set by HARDWARE
	//and an interrupt is generated if the ITEVFEN bit is set (which we don't cover in
	//this case). Clear this by reading SR1 register followed by reading SR2
	clearFlagADDR(pI2CHandler->pI2Cx);
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f87a 	bl	8000902 <clearFlagADDR>

	//Sending bytes of data to slave
	//Note: writing TxBuffer to DR register clears the BTF bit
	while (len) {
 800080e:	e015      	b.n	800083c <I2C_MasterSendData+0x90>

		//Polling until the Transmit register buffer is empty (TXE = 1)
		//Then write first data into DR
		while (!I2C_CheckStatusFlag(&pI2CHandler->pI2Cx->SR1, I2C_FLAG_SR1_TXE));
 8000810:	bf00      	nop
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3314      	adds	r3, #20
 8000818:	2180      	movs	r1, #128	; 0x80
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f82f 	bl	800087e <I2C_CheckStatusFlag>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f5      	beq.n	8000812 <I2C_MasterSendData+0x66>

		//Write TxBuffer into DR
		pI2CHandler->pI2Cx->DR = *pTxBuffer;
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	781a      	ldrb	r2, [r3, #0]
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	611a      	str	r2, [r3, #16]
		len--;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	3b01      	subs	r3, #1
 8000834:	607b      	str	r3, [r7, #4]
		pTxBuffer++;
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	3301      	adds	r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
	while (len) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1e6      	bne.n	8000810 <I2C_MasterSendData+0x64>
	}

	//Wait for both TXE and BTF is set before closing the communication
	while (!(I2C_CheckStatusFlag(&pI2CHandler->pI2Cx->SR1, I2C_FLAG_SR1_BTF) &&
 8000842:	bf00      	nop
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	3314      	adds	r3, #20
 800084a:	2104      	movs	r1, #4
 800084c:	4618      	mov	r0, r3
 800084e:	f000 f816 	bl	800087e <I2C_CheckStatusFlag>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d0f5      	beq.n	8000844 <I2C_MasterSendData+0x98>
			 I2C_CheckStatusFlag(&pI2CHandler->pI2Cx->SR1, I2C_FLAG_SR1_TXE)));
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	3314      	adds	r3, #20
 800085e:	2180      	movs	r1, #128	; 0x80
 8000860:	4618      	mov	r0, r3
 8000862:	f000 f80c 	bl	800087e <I2C_CheckStatusFlag>
 8000866:	4603      	mov	r3, r0
	while (!(I2C_CheckStatusFlag(&pI2CHandler->pI2Cx->SR1, I2C_FLAG_SR1_BTF) &&
 8000868:	2b00      	cmp	r3, #0
 800086a:	d0eb      	beq.n	8000844 <I2C_MasterSendData+0x98>

	//Generate the Stop condition to terminate the communication_SR1_BTF
	generateStopCondition(pI2CHandler->pI2Cx);
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4618      	mov	r0, r3
 8000872:	f000 f829 	bl	80008c8 <generateStopCondition>

	//Memo: Cover the 10-bit addressing mode scenario later

}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <I2C_CheckStatusFlag>:
 * @param[in]			- the status flag
 *
 * @return				- none
 * @note				- none
 */
uint8_t I2C_CheckStatusFlag(__vo uint32_t* statusReg, uint8_t flag) {
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	460b      	mov	r3, r1
 8000888:	70fb      	strb	r3, [r7, #3]
	if ((*statusReg) & flag) {
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	78fb      	ldrb	r3, [r7, #3]
 8000890:	4013      	ands	r3, r2
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <I2C_CheckStatusFlag+0x1c>
		return FLAG_SET;
 8000896:	2301      	movs	r3, #1
 8000898:	e000      	b.n	800089c <I2C_CheckStatusFlag+0x1e>
	}
	return FLAG_RESET;
 800089a:	2300      	movs	r3, #0
}
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <generateStartCondition>:
 * @param[in]			- Base address of the specific I2C peripherals (I2C_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- none
 */
static void generateStartCondition(I2C_Reg_t* pI2Cx) {
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= 1 << I2C_CR1_START;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	601a      	str	r2, [r3, #0]
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <generateStopCondition>:
 * @param[in]			- Base address of the specific I2C peripherals (I2C_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- none
 */
static void generateStopCondition(I2C_Reg_t* pI2Cx) {
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= 1 << I2C_CR1_STOP;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	601a      	str	r2, [r3, #0]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <clearFlagSB>:
 * @param[in]			- Base address of the specific I2C peripherals (I2C_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- none
 */
static void clearFlagSB(I2C_Reg_t* pI2Cx) {
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	temp = pI2Cx->SR1;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	60fb      	str	r3, [r7, #12]
	(void) temp; //resolve unused variable warning
}
 80008f6:	bf00      	nop
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <clearFlagADDR>:
 * @param[in]			- Base address of the specific I2C peripherals (I2C_Reg_t* pI2Cx)
 *
 * @return				- none
 * @note				- none
 */
static void clearFlagADDR(I2C_Reg_t* pI2Cx) {
 8000902:	b480      	push	{r7}
 8000904:	b085      	sub	sp, #20
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	temp = pI2Cx->SR1;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	60fb      	str	r3, [r7, #12]
	temp = pI2Cx->SR2;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	60fb      	str	r3, [r7, #12]
	(void) temp; //resolve unused variable warning
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <GPIO_PeriClkCtrl>:
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void GPIO_PeriClkCtrl(GPIO_Reg_t* pGPIOx, uint8_t EnOrDi) {
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	70fb      	strb	r3, [r7, #3]

	//Enable or disable the GPIO clock peripherals
	if (EnOrDi) {
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d074      	beq.n	8000a20 <GPIO_PeriClkCtrl+0xfc>
		//Special note: switch cannot be used for pointer, only integer
		GPIO_PCLK_EN(pGPIOx);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a76      	ldr	r2, [pc, #472]	; (8000b14 <GPIO_PeriClkCtrl+0x1f0>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d106      	bne.n	800094c <GPIO_PeriClkCtrl+0x28>
 800093e:	4b76      	ldr	r3, [pc, #472]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a75      	ldr	r2, [pc, #468]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
	} else {
		GPIO_PCLK_DI(pGPIOx);
	}
}
 800094a:	e0dd      	b.n	8000b08 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a73      	ldr	r2, [pc, #460]	; (8000b1c <GPIO_PeriClkCtrl+0x1f8>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d106      	bne.n	8000962 <GPIO_PeriClkCtrl+0x3e>
 8000954:	4b70      	ldr	r3, [pc, #448]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	4a6f      	ldr	r2, [pc, #444]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 800095a:	f043 0302 	orr.w	r3, r3, #2
 800095e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000960:	e0d2      	b.n	8000b08 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a6e      	ldr	r2, [pc, #440]	; (8000b20 <GPIO_PeriClkCtrl+0x1fc>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d106      	bne.n	8000978 <GPIO_PeriClkCtrl+0x54>
 800096a:	4b6b      	ldr	r3, [pc, #428]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a6a      	ldr	r2, [pc, #424]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000976:	e0c7      	b.n	8000b08 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a6a      	ldr	r2, [pc, #424]	; (8000b24 <GPIO_PeriClkCtrl+0x200>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d106      	bne.n	800098e <GPIO_PeriClkCtrl+0x6a>
 8000980:	4b65      	ldr	r3, [pc, #404]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000984:	4a64      	ldr	r2, [pc, #400]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000986:	f043 0308 	orr.w	r3, r3, #8
 800098a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800098c:	e0bc      	b.n	8000b08 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a65      	ldr	r2, [pc, #404]	; (8000b28 <GPIO_PeriClkCtrl+0x204>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d106      	bne.n	80009a4 <GPIO_PeriClkCtrl+0x80>
 8000996:	4b60      	ldr	r3, [pc, #384]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a5f      	ldr	r2, [pc, #380]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 800099c:	f043 0310 	orr.w	r3, r3, #16
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009a2:	e0b1      	b.n	8000b08 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a61      	ldr	r2, [pc, #388]	; (8000b2c <GPIO_PeriClkCtrl+0x208>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d106      	bne.n	80009ba <GPIO_PeriClkCtrl+0x96>
 80009ac:	4b5a      	ldr	r3, [pc, #360]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b0:	4a59      	ldr	r2, [pc, #356]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 80009b2:	f043 0320 	orr.w	r3, r3, #32
 80009b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009b8:	e0a6      	b.n	8000b08 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a5c      	ldr	r2, [pc, #368]	; (8000b30 <GPIO_PeriClkCtrl+0x20c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d106      	bne.n	80009d0 <GPIO_PeriClkCtrl+0xac>
 80009c2:	4b55      	ldr	r3, [pc, #340]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a54      	ldr	r2, [pc, #336]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 80009c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009ce:	e09b      	b.n	8000b08 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a58      	ldr	r2, [pc, #352]	; (8000b34 <GPIO_PeriClkCtrl+0x210>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d106      	bne.n	80009e6 <GPIO_PeriClkCtrl+0xc2>
 80009d8:	4b4f      	ldr	r3, [pc, #316]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009dc:	4a4e      	ldr	r2, [pc, #312]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 80009de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009e4:	e090      	b.n	8000b08 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a53      	ldr	r2, [pc, #332]	; (8000b38 <GPIO_PeriClkCtrl+0x214>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d106      	bne.n	80009fc <GPIO_PeriClkCtrl+0xd8>
 80009ee:	4b4a      	ldr	r3, [pc, #296]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a49      	ldr	r2, [pc, #292]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 80009f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80009fa:	e085      	b.n	8000b08 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a4f      	ldr	r2, [pc, #316]	; (8000b3c <GPIO_PeriClkCtrl+0x218>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d106      	bne.n	8000a12 <GPIO_PeriClkCtrl+0xee>
 8000a04:	4b44      	ldr	r3, [pc, #272]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a08:	4a43      	ldr	r2, [pc, #268]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a0e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a10:	e07a      	b.n	8000b08 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_EN(pGPIOx);
 8000a12:	4b41      	ldr	r3, [pc, #260]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a40      	ldr	r2, [pc, #256]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000a18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a1e:	e073      	b.n	8000b08 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a3c      	ldr	r2, [pc, #240]	; (8000b14 <GPIO_PeriClkCtrl+0x1f0>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d106      	bne.n	8000a36 <GPIO_PeriClkCtrl+0x112>
 8000a28:	4b3b      	ldr	r3, [pc, #236]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	4a3a      	ldr	r2, [pc, #232]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000a2e:	f023 0301 	bic.w	r3, r3, #1
 8000a32:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a34:	e068      	b.n	8000b08 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a38      	ldr	r2, [pc, #224]	; (8000b1c <GPIO_PeriClkCtrl+0x1f8>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d106      	bne.n	8000a4c <GPIO_PeriClkCtrl+0x128>
 8000a3e:	4b36      	ldr	r3, [pc, #216]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a35      	ldr	r2, [pc, #212]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000a44:	f023 0302 	bic.w	r3, r3, #2
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a4a:	e05d      	b.n	8000b08 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a34      	ldr	r2, [pc, #208]	; (8000b20 <GPIO_PeriClkCtrl+0x1fc>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d106      	bne.n	8000a62 <GPIO_PeriClkCtrl+0x13e>
 8000a54:	4b30      	ldr	r3, [pc, #192]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	4a2f      	ldr	r2, [pc, #188]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000a5a:	f023 0304 	bic.w	r3, r3, #4
 8000a5e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a60:	e052      	b.n	8000b08 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a2f      	ldr	r2, [pc, #188]	; (8000b24 <GPIO_PeriClkCtrl+0x200>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d106      	bne.n	8000a78 <GPIO_PeriClkCtrl+0x154>
 8000a6a:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a2a      	ldr	r2, [pc, #168]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000a70:	f023 0308 	bic.w	r3, r3, #8
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a76:	e047      	b.n	8000b08 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a2b      	ldr	r2, [pc, #172]	; (8000b28 <GPIO_PeriClkCtrl+0x204>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d106      	bne.n	8000a8e <GPIO_PeriClkCtrl+0x16a>
 8000a80:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	4a24      	ldr	r2, [pc, #144]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000a86:	f023 0310 	bic.w	r3, r3, #16
 8000a8a:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000a8c:	e03c      	b.n	8000b08 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a26      	ldr	r2, [pc, #152]	; (8000b2c <GPIO_PeriClkCtrl+0x208>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d106      	bne.n	8000aa4 <GPIO_PeriClkCtrl+0x180>
 8000a96:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a1f      	ldr	r2, [pc, #124]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000a9c:	f023 0320 	bic.w	r3, r3, #32
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000aa2:	e031      	b.n	8000b08 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4a22      	ldr	r2, [pc, #136]	; (8000b30 <GPIO_PeriClkCtrl+0x20c>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d106      	bne.n	8000aba <GPIO_PeriClkCtrl+0x196>
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ab6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ab8:	e026      	b.n	8000b08 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a1d      	ldr	r2, [pc, #116]	; (8000b34 <GPIO_PeriClkCtrl+0x210>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d106      	bne.n	8000ad0 <GPIO_PeriClkCtrl+0x1ac>
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ace:	e01b      	b.n	8000b08 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a19      	ldr	r2, [pc, #100]	; (8000b38 <GPIO_PeriClkCtrl+0x214>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d106      	bne.n	8000ae6 <GPIO_PeriClkCtrl+0x1c2>
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ae2:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000ae4:	e010      	b.n	8000b08 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <GPIO_PeriClkCtrl+0x218>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d106      	bne.n	8000afc <GPIO_PeriClkCtrl+0x1d8>
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a09      	ldr	r2, [pc, #36]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000af4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000afa:	e005      	b.n	8000b08 <GPIO_PeriClkCtrl+0x1e4>
		GPIO_PCLK_DI(pGPIOx);
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <GPIO_PeriClkCtrl+0x1f4>)
 8000b02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b06:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020400 	.word	0x40020400
 8000b20:	40020800 	.word	0x40020800
 8000b24:	40020c00 	.word	0x40020c00
 8000b28:	40020100 	.word	0x40020100
 8000b2c:	40021400 	.word	0x40021400
 8000b30:	40021800 	.word	0x40021800
 8000b34:	40021c00 	.word	0x40021c00
 8000b38:	40022000 	.word	0x40022000
 8000b3c:	40022400 	.word	0x40022400

08000b40 <GPIO_Init>:
 * @param[in]			-
 *
 * @return				- none
 * @note				- none
 */
void GPIO_Init(GPIO_Handle_t* pGPIOHandler) {
 8000b40:	b5b0      	push	{r4, r5, r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	//uint32_t temp;
	GPIO_Reg_t* GPIOx = pGPIOHandler->pGPIOx;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	623b      	str	r3, [r7, #32]
	GPIO_PinConfig_t GPIOx_PinConf = pGPIOHandler->GPIOx_PinConfig;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f107 0408 	add.w	r4, r7, #8
 8000b54:	1d1d      	adds	r5, r3, #4
 8000b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b5e:	e884 0003 	stmia.w	r4, {r0, r1}

	//Enable the GPIO Clock
	GPIO_PeriClkCtrl(GPIOx, ENABLE);
 8000b62:	2101      	movs	r1, #1
 8000b64:	6a38      	ldr	r0, [r7, #32]
 8000b66:	f7ff fedd 	bl	8000924 <GPIO_PeriClkCtrl>

	/*Note: before setting the bits: make sure those registers are clear */
	//Clearing the registers
	//Setting the bits register
	for (uint16_t i = 0U; i < GPIO_PIN_NUMBER; i++) {
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000b6e:	e0f7      	b.n	8000d60 <GPIO_Init+0x220>

		//Check if the ith bit is set
		if (GPIOx_PinConf.GPIO_PinNumber & (1 << i)) {
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000b74:	2101      	movs	r1, #1
 8000b76:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	f000 80ec 	beq.w	8000d5a <GPIO_Init+0x21a>

			//Handle the GPIO pin alternate function mode and GPIO output mode
			if (GPIOx_PinConf.GPIO_PinMode == GPIO_ALT_FUNC_MODE || GPIOx_PinConf.GPIO_PinMode == GPIO_OUTPUT_MODE) {
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d002      	beq.n	8000b8e <GPIO_Init+0x4e>
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d12c      	bne.n	8000be8 <GPIO_Init+0xa8>
				if (i < (GPIO_PIN_NUMBER / 2)) {
 8000b8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b90:	2b07      	cmp	r3, #7
 8000b92:	d80a      	bhi.n	8000baa <GPIO_Init+0x6a>
					GPIOx->AFR[0] |= (GPIOx_PinConf.GPIO_PinAltFuncMode << i * 4U);
 8000b94:	6a3b      	ldr	r3, [r7, #32]
 8000b96:	6a1a      	ldr	r2, [r3, #32]
 8000b98:	69f9      	ldr	r1, [r7, #28]
 8000b9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	6a3b      	ldr	r3, [r7, #32]
 8000ba6:	621a      	str	r2, [r3, #32]
 8000ba8:	e00b      	b.n	8000bc2 <GPIO_Init+0x82>
				} else {
					GPIOx->AFR[1] |= (GPIOx_PinConf.GPIO_PinAltFuncMode << (i % (GPIO_PIN_NUMBER / 2)) * 4U);
 8000baa:	6a3b      	ldr	r3, [r7, #32]
 8000bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bae:	69f9      	ldr	r1, [r7, #28]
 8000bb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	6a3b      	ldr	r3, [r7, #32]
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24
				}

				//Configure the OTYPER register
				GPIOx->OTYPER |= (GPIOx_PinConf.GPIO_PinOPType << i);
 8000bc2:	6a3b      	ldr	r3, [r7, #32]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	69b9      	ldr	r1, [r7, #24]
 8000bc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bca:	fa01 f303 	lsl.w	r3, r1, r3
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	6a3b      	ldr	r3, [r7, #32]
 8000bd2:	605a      	str	r2, [r3, #4]

				//Configure the OSPEED register
				GPIOx->OSPEEDR |= (GPIOx_PinConf.GPIO_PinSpeed << i * 2U);
 8000bd4:	6a3b      	ldr	r3, [r7, #32]
 8000bd6:	689a      	ldr	r2, [r3, #8]
 8000bd8:	6939      	ldr	r1, [r7, #16]
 8000bda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	431a      	orrs	r2, r3
 8000be4:	6a3b      	ldr	r3, [r7, #32]
 8000be6:	609a      	str	r2, [r3, #8]
			}

			//Handle the GPIO pin interrupt mode
			if ((GPIOx_PinConf.GPIO_PinMode == GPIO_IT_FT_MODE) || (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RT_MODE)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	d006      	beq.n	8000bfc <GPIO_Init+0xbc>
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	2b05      	cmp	r3, #5
 8000bf2:	d003      	beq.n	8000bfc <GPIO_Init+0xbc>
				|| (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RFT_MODE)) {
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2b06      	cmp	r3, #6
 8000bf8:	f040 809b 	bne.w	8000d32 <GPIO_Init+0x1f2>

				//Enable the clock for SYSCFG registers
				SYSCFG_PCLK_EN();
 8000bfc:	4b5c      	ldr	r3, [pc, #368]	; (8000d70 <GPIO_Init+0x230>)
 8000bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c00:	4a5b      	ldr	r2, [pc, #364]	; (8000d70 <GPIO_Init+0x230>)
 8000c02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c06:	6453      	str	r3, [r2, #68]	; 0x44

				//Handling the falling edge cases
				if (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_FT_MODE) {
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	d115      	bne.n	8000c3a <GPIO_Init+0xfa>
					//Configure the FTSR
					EXTI->FTSR |= (1 << i);
 8000c0e:	4b59      	ldr	r3, [pc, #356]	; (8000d74 <GPIO_Init+0x234>)
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000c14:	2101      	movs	r1, #1
 8000c16:	fa01 f202 	lsl.w	r2, r1, r2
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4a55      	ldr	r2, [pc, #340]	; (8000d74 <GPIO_Init+0x234>)
 8000c1e:	430b      	orrs	r3, r1
 8000c20:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR &= ~(1 << i); //Clear the corresponding RTSR bit
 8000c22:	4b54      	ldr	r3, [pc, #336]	; (8000d74 <GPIO_Init+0x234>)
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000c28:	2101      	movs	r1, #1
 8000c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2e:	43d2      	mvns	r2, r2
 8000c30:	4611      	mov	r1, r2
 8000c32:	4a50      	ldr	r2, [pc, #320]	; (8000d74 <GPIO_Init+0x234>)
 8000c34:	400b      	ands	r3, r1
 8000c36:	6093      	str	r3, [r2, #8]
 8000c38:	e02c      	b.n	8000c94 <GPIO_Init+0x154>
				} else if (GPIOx_PinConf.GPIO_PinMode == GPIO_IT_RT_MODE) {
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2b05      	cmp	r3, #5
 8000c3e:	d115      	bne.n	8000c6c <GPIO_Init+0x12c>
					//Configure the RTSR
					EXTI->RTSR |= (1 << i);
 8000c40:	4b4c      	ldr	r3, [pc, #304]	; (8000d74 <GPIO_Init+0x234>)
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000c46:	2101      	movs	r1, #1
 8000c48:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	4a49      	ldr	r2, [pc, #292]	; (8000d74 <GPIO_Init+0x234>)
 8000c50:	430b      	orrs	r3, r1
 8000c52:	6093      	str	r3, [r2, #8]
					EXTI->FTSR &= ~(1 << i); //Clear the corresponding FTSR bit
 8000c54:	4b47      	ldr	r3, [pc, #284]	; (8000d74 <GPIO_Init+0x234>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c60:	43d2      	mvns	r2, r2
 8000c62:	4611      	mov	r1, r2
 8000c64:	4a43      	ldr	r2, [pc, #268]	; (8000d74 <GPIO_Init+0x234>)
 8000c66:	400b      	ands	r3, r1
 8000c68:	60d3      	str	r3, [r2, #12]
 8000c6a:	e013      	b.n	8000c94 <GPIO_Init+0x154>
				}  else {
					//Configure both the FTSR and RTSR
					EXTI->FTSR |= (1 << i);
 8000c6c:	4b41      	ldr	r3, [pc, #260]	; (8000d74 <GPIO_Init+0x234>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000c72:	2101      	movs	r1, #1
 8000c74:	fa01 f202 	lsl.w	r2, r1, r2
 8000c78:	4611      	mov	r1, r2
 8000c7a:	4a3e      	ldr	r2, [pc, #248]	; (8000d74 <GPIO_Init+0x234>)
 8000c7c:	430b      	orrs	r3, r1
 8000c7e:	60d3      	str	r3, [r2, #12]
					EXTI->RTSR |= (1 << i);
 8000c80:	4b3c      	ldr	r3, [pc, #240]	; (8000d74 <GPIO_Init+0x234>)
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000c86:	2101      	movs	r1, #1
 8000c88:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4a39      	ldr	r2, [pc, #228]	; (8000d74 <GPIO_Init+0x234>)
 8000c90:	430b      	orrs	r3, r1
 8000c92:	6093      	str	r3, [r2, #8]
				//Configure the GPIO port selection in SYSCFG_EXTICR
				//Rule: int quotient = n >> z
				//		int remainder = n & (~(~(int) 0) << z)
				//In this case, since we always want z = 2, as we divide by 4,
				//the term ~(~(int) 0) << z) = 0x03U
				SYSCFG->EXTICR[i >> 2U] |= GPIO_PORT_INDEX(GPIOx) << ((i & 0x03U) * 4U);
 8000c94:	4a38      	ldr	r2, [pc, #224]	; (8000d78 <GPIO_Init+0x238>)
 8000c96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c98:	089b      	lsrs	r3, r3, #2
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ca2:	6a3b      	ldr	r3, [r7, #32]
 8000ca4:	4935      	ldr	r1, [pc, #212]	; (8000d7c <GPIO_Init+0x23c>)
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d02b      	beq.n	8000d02 <GPIO_Init+0x1c2>
 8000caa:	6a3b      	ldr	r3, [r7, #32]
 8000cac:	4934      	ldr	r1, [pc, #208]	; (8000d80 <GPIO_Init+0x240>)
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d025      	beq.n	8000cfe <GPIO_Init+0x1be>
 8000cb2:	6a3b      	ldr	r3, [r7, #32]
 8000cb4:	4933      	ldr	r1, [pc, #204]	; (8000d84 <GPIO_Init+0x244>)
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d01f      	beq.n	8000cfa <GPIO_Init+0x1ba>
 8000cba:	6a3b      	ldr	r3, [r7, #32]
 8000cbc:	4932      	ldr	r1, [pc, #200]	; (8000d88 <GPIO_Init+0x248>)
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d019      	beq.n	8000cf6 <GPIO_Init+0x1b6>
 8000cc2:	6a3b      	ldr	r3, [r7, #32]
 8000cc4:	4931      	ldr	r1, [pc, #196]	; (8000d8c <GPIO_Init+0x24c>)
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d013      	beq.n	8000cf2 <GPIO_Init+0x1b2>
 8000cca:	6a3b      	ldr	r3, [r7, #32]
 8000ccc:	4930      	ldr	r1, [pc, #192]	; (8000d90 <GPIO_Init+0x250>)
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d00d      	beq.n	8000cee <GPIO_Init+0x1ae>
 8000cd2:	6a3b      	ldr	r3, [r7, #32]
 8000cd4:	492f      	ldr	r1, [pc, #188]	; (8000d94 <GPIO_Init+0x254>)
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d007      	beq.n	8000cea <GPIO_Init+0x1aa>
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	492e      	ldr	r1, [pc, #184]	; (8000d98 <GPIO_Init+0x258>)
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d101      	bne.n	8000ce6 <GPIO_Init+0x1a6>
 8000ce2:	2307      	movs	r3, #7
 8000ce4:	e00e      	b.n	8000d04 <GPIO_Init+0x1c4>
 8000ce6:	2308      	movs	r3, #8
 8000ce8:	e00c      	b.n	8000d04 <GPIO_Init+0x1c4>
 8000cea:	2306      	movs	r3, #6
 8000cec:	e00a      	b.n	8000d04 <GPIO_Init+0x1c4>
 8000cee:	2305      	movs	r3, #5
 8000cf0:	e008      	b.n	8000d04 <GPIO_Init+0x1c4>
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	e006      	b.n	8000d04 <GPIO_Init+0x1c4>
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e004      	b.n	8000d04 <GPIO_Init+0x1c4>
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	e002      	b.n	8000d04 <GPIO_Init+0x1c4>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e000      	b.n	8000d04 <GPIO_Init+0x1c4>
 8000d02:	2300      	movs	r3, #0
 8000d04:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8000d06:	f001 0103 	and.w	r1, r1, #3
 8000d0a:	0089      	lsls	r1, r1, #2
 8000d0c:	408b      	lsls	r3, r1
 8000d0e:	481a      	ldr	r0, [pc, #104]	; (8000d78 <GPIO_Init+0x238>)
 8000d10:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8000d12:	0889      	lsrs	r1, r1, #2
 8000d14:	b289      	uxth	r1, r1
 8000d16:	431a      	orrs	r2, r3
 8000d18:	1c8b      	adds	r3, r1, #2
 8000d1a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

				//Enable the EXTI interrupt delivery using IMR
				EXTI->IMR |= (1 << i);
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <GPIO_Init+0x234>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000d24:	2101      	movs	r1, #1
 8000d26:	fa01 f202 	lsl.w	r2, r1, r2
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4a11      	ldr	r2, [pc, #68]	; (8000d74 <GPIO_Init+0x234>)
 8000d2e:	430b      	orrs	r3, r1
 8000d30:	6013      	str	r3, [r2, #0]
			}

			//Handle the MODER register
			GPIOx->MODER |= (GPIOx_PinConf.GPIO_PinMode << i * 2U);
 8000d32:	6a3b      	ldr	r3, [r7, #32]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	68f9      	ldr	r1, [r7, #12]
 8000d38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d40:	431a      	orrs	r2, r3
 8000d42:	6a3b      	ldr	r3, [r7, #32]
 8000d44:	601a      	str	r2, [r3, #0]

			//Handle the PuPdCtrl Register
			GPIOx->PUPDR |= (GPIOx_PinConf.GPIO_PinPuPdCtrl << i * 2U);
 8000d46:	6a3b      	ldr	r3, [r7, #32]
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	6979      	ldr	r1, [r7, #20]
 8000d4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	431a      	orrs	r2, r3
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	60da      	str	r2, [r3, #12]
	for (uint16_t i = 0U; i < GPIO_PIN_NUMBER; i++) {
 8000d5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000d60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d62:	2b0f      	cmp	r3, #15
 8000d64:	f67f af04 	bls.w	8000b70 <GPIO_Init+0x30>
		}
	}
}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	; 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40013c00 	.word	0x40013c00
 8000d78:	40013800 	.word	0x40013800
 8000d7c:	40020000 	.word	0x40020000
 8000d80:	40020400 	.word	0x40020400
 8000d84:	40020800 	.word	0x40020800
 8000d88:	40020c00 	.word	0x40020c00
 8000d8c:	40020100 	.word	0x40020100
 8000d90:	40021400 	.word	0x40021400
 8000d94:	40021800 	.word	0x40021800
 8000d98:	40021c00 	.word	0x40021c00

08000d9c <GPIO_DeInit>:
 *
 * @return				- none
 * @note				-  Consult the RCC Peripheral reset registers to reset
 * 					       all the registers of the peripherals
 */
void GPIO_DeInit(GPIO_Reg_t *pGPIOx) {
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

	//Reset all the registers of the respective GPIO peripherals
	if (pGPIOx == GPIOA) {
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4a5f      	ldr	r2, [pc, #380]	; (8000f24 <GPIO_DeInit+0x188>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d10c      	bne.n	8000dc6 <GPIO_DeInit+0x2a>
		GPIOA_PCLK_RST();
 8000dac:	4b5e      	ldr	r3, [pc, #376]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000dae:	691b      	ldr	r3, [r3, #16]
 8000db0:	4a5d      	ldr	r2, [pc, #372]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6113      	str	r3, [r2, #16]
 8000db8:	4b5b      	ldr	r3, [pc, #364]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	4a5a      	ldr	r2, [pc, #360]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000dbe:	f023 0301 	bic.w	r3, r3, #1
 8000dc2:	6113      	str	r3, [r2, #16]
	} else if (pGPIOx == GPIOJ) {
		GPIOJ_PCLK_RST();
	} else if (pGPIOx == GPIOK) {
		GPIOK_PCLK_RST();
	}
}
 8000dc4:	e0a8      	b.n	8000f18 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOB) {
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a58      	ldr	r2, [pc, #352]	; (8000f2c <GPIO_DeInit+0x190>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d10c      	bne.n	8000de8 <GPIO_DeInit+0x4c>
		GPIOB_PCLK_RST();
 8000dce:	4b56      	ldr	r3, [pc, #344]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	4a55      	ldr	r2, [pc, #340]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	6113      	str	r3, [r2, #16]
 8000dda:	4b53      	ldr	r3, [pc, #332]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	4a52      	ldr	r2, [pc, #328]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000de0:	f023 0302 	bic.w	r3, r3, #2
 8000de4:	6113      	str	r3, [r2, #16]
}
 8000de6:	e097      	b.n	8000f18 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOC) {
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a51      	ldr	r2, [pc, #324]	; (8000f30 <GPIO_DeInit+0x194>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d10c      	bne.n	8000e0a <GPIO_DeInit+0x6e>
		GPIOC_PCLK_RST();
 8000df0:	4b4d      	ldr	r3, [pc, #308]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000df2:	691b      	ldr	r3, [r3, #16]
 8000df4:	4a4c      	ldr	r2, [pc, #304]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	6113      	str	r3, [r2, #16]
 8000dfc:	4b4a      	ldr	r3, [pc, #296]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	4a49      	ldr	r2, [pc, #292]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000e02:	f023 0304 	bic.w	r3, r3, #4
 8000e06:	6113      	str	r3, [r2, #16]
}
 8000e08:	e086      	b.n	8000f18 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOD) {
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a49      	ldr	r2, [pc, #292]	; (8000f34 <GPIO_DeInit+0x198>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d10c      	bne.n	8000e2c <GPIO_DeInit+0x90>
		GPIOD_PCLK_RST();
 8000e12:	4b45      	ldr	r3, [pc, #276]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000e14:	691b      	ldr	r3, [r3, #16]
 8000e16:	4a44      	ldr	r2, [pc, #272]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	6113      	str	r3, [r2, #16]
 8000e1e:	4b42      	ldr	r3, [pc, #264]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	4a41      	ldr	r2, [pc, #260]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000e24:	f023 0308 	bic.w	r3, r3, #8
 8000e28:	6113      	str	r3, [r2, #16]
}
 8000e2a:	e075      	b.n	8000f18 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOE) {
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a42      	ldr	r2, [pc, #264]	; (8000f38 <GPIO_DeInit+0x19c>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d10c      	bne.n	8000e4e <GPIO_DeInit+0xb2>
		GPIOE_PCLK_RST();
 8000e34:	4b3c      	ldr	r3, [pc, #240]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000e36:	691b      	ldr	r3, [r3, #16]
 8000e38:	4a3b      	ldr	r2, [pc, #236]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000e3a:	f043 0310 	orr.w	r3, r3, #16
 8000e3e:	6113      	str	r3, [r2, #16]
 8000e40:	4b39      	ldr	r3, [pc, #228]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000e42:	691b      	ldr	r3, [r3, #16]
 8000e44:	4a38      	ldr	r2, [pc, #224]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000e46:	f023 0310 	bic.w	r3, r3, #16
 8000e4a:	6113      	str	r3, [r2, #16]
}
 8000e4c:	e064      	b.n	8000f18 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOF) {
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a3a      	ldr	r2, [pc, #232]	; (8000f3c <GPIO_DeInit+0x1a0>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d10c      	bne.n	8000e70 <GPIO_DeInit+0xd4>
		GPIOF_PCLK_RST();
 8000e56:	4b34      	ldr	r3, [pc, #208]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000e58:	691b      	ldr	r3, [r3, #16]
 8000e5a:	4a33      	ldr	r2, [pc, #204]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000e5c:	f043 0320 	orr.w	r3, r3, #32
 8000e60:	6113      	str	r3, [r2, #16]
 8000e62:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	4a30      	ldr	r2, [pc, #192]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000e68:	f023 0320 	bic.w	r3, r3, #32
 8000e6c:	6113      	str	r3, [r2, #16]
}
 8000e6e:	e053      	b.n	8000f18 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOG) {
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a33      	ldr	r2, [pc, #204]	; (8000f40 <GPIO_DeInit+0x1a4>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d10c      	bne.n	8000e92 <GPIO_DeInit+0xf6>
		GPIOG_PCLK_RST();
 8000e78:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	4a2a      	ldr	r2, [pc, #168]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e82:	6113      	str	r3, [r2, #16]
 8000e84:	4b28      	ldr	r3, [pc, #160]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	4a27      	ldr	r2, [pc, #156]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e8e:	6113      	str	r3, [r2, #16]
}
 8000e90:	e042      	b.n	8000f18 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOH) {
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a2b      	ldr	r2, [pc, #172]	; (8000f44 <GPIO_DeInit+0x1a8>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d10c      	bne.n	8000eb4 <GPIO_DeInit+0x118>
		GPIOH_PCLK_RST();
 8000e9a:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	4a22      	ldr	r2, [pc, #136]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea4:	6113      	str	r3, [r2, #16]
 8000ea6:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	4a1f      	ldr	r2, [pc, #124]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000eac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000eb0:	6113      	str	r3, [r2, #16]
}
 8000eb2:	e031      	b.n	8000f18 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOI) {
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a24      	ldr	r2, [pc, #144]	; (8000f48 <GPIO_DeInit+0x1ac>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d10c      	bne.n	8000ed6 <GPIO_DeInit+0x13a>
		GPIOI_PCLK_RST();
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec6:	6113      	str	r3, [r2, #16]
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000eca:	691b      	ldr	r3, [r3, #16]
 8000ecc:	4a16      	ldr	r2, [pc, #88]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000ece:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ed2:	6113      	str	r3, [r2, #16]
}
 8000ed4:	e020      	b.n	8000f18 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOJ) {
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a1c      	ldr	r2, [pc, #112]	; (8000f4c <GPIO_DeInit+0x1b0>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d10c      	bne.n	8000ef8 <GPIO_DeInit+0x15c>
		GPIOJ_PCLK_RST();
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000ee0:	691b      	ldr	r3, [r3, #16]
 8000ee2:	4a11      	ldr	r2, [pc, #68]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000ee4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee8:	6113      	str	r3, [r2, #16]
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000ef0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ef4:	6113      	str	r3, [r2, #16]
}
 8000ef6:	e00f      	b.n	8000f18 <GPIO_DeInit+0x17c>
	} else if (pGPIOx == GPIOK) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a15      	ldr	r2, [pc, #84]	; (8000f50 <GPIO_DeInit+0x1b4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d10b      	bne.n	8000f18 <GPIO_DeInit+0x17c>
		GPIOK_PCLK_RST();
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000f02:	691b      	ldr	r3, [r3, #16]
 8000f04:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0a:	6113      	str	r3, [r2, #16]
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <GPIO_DeInit+0x18c>)
 8000f12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f16:	6113      	str	r3, [r2, #16]
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	40020000 	.word	0x40020000
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40020800 	.word	0x40020800
 8000f34:	40020c00 	.word	0x40020c00
 8000f38:	40020100 	.word	0x40020100
 8000f3c:	40021400 	.word	0x40021400
 8000f40:	40021800 	.word	0x40021800
 8000f44:	40021c00 	.word	0x40021c00
 8000f48:	40022000 	.word	0x40022000
 8000f4c:	40022400 	.word	0x40022400
 8000f50:	40022800 	.word	0x40022800

08000f54 <GPIO_ReadFromInputPin>:
 * @param[in]			- The pin number
 *
 * @return				- unsigned 8 bit integer
 * @note				- none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_Reg_t* pGPIOx, uint16_t pinNumber) {
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	807b      	strh	r3, [r7, #2]
	//value = (uint8_t) ((pGPIOx->IDR & (1 << pinNumber)) >> pinNumber);
	/*or value = (uint8_t) ((pGPIOx->IDR >> pinNumber) & 0x1);*/
	return ((pGPIOx->IDR & pinNumber) == pinNumber) ? 1 : 0;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	691a      	ldr	r2, [r3, #16]
 8000f64:	887b      	ldrh	r3, [r7, #2]
 8000f66:	401a      	ands	r2, r3
 8000f68:	887b      	ldrh	r3, [r7, #2]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	bf0c      	ite	eq
 8000f6e:	2301      	moveq	r3, #1
 8000f70:	2300      	movne	r3, #0
 8000f72:	b2db      	uxtb	r3, r3
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <__libc_init_array>:
 8000f80:	b570      	push	{r4, r5, r6, lr}
 8000f82:	4e0d      	ldr	r6, [pc, #52]	; (8000fb8 <__libc_init_array+0x38>)
 8000f84:	4c0d      	ldr	r4, [pc, #52]	; (8000fbc <__libc_init_array+0x3c>)
 8000f86:	1ba4      	subs	r4, r4, r6
 8000f88:	10a4      	asrs	r4, r4, #2
 8000f8a:	2500      	movs	r5, #0
 8000f8c:	42a5      	cmp	r5, r4
 8000f8e:	d109      	bne.n	8000fa4 <__libc_init_array+0x24>
 8000f90:	4e0b      	ldr	r6, [pc, #44]	; (8000fc0 <__libc_init_array+0x40>)
 8000f92:	4c0c      	ldr	r4, [pc, #48]	; (8000fc4 <__libc_init_array+0x44>)
 8000f94:	f000 f820 	bl	8000fd8 <_init>
 8000f98:	1ba4      	subs	r4, r4, r6
 8000f9a:	10a4      	asrs	r4, r4, #2
 8000f9c:	2500      	movs	r5, #0
 8000f9e:	42a5      	cmp	r5, r4
 8000fa0:	d105      	bne.n	8000fae <__libc_init_array+0x2e>
 8000fa2:	bd70      	pop	{r4, r5, r6, pc}
 8000fa4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fa8:	4798      	blx	r3
 8000faa:	3501      	adds	r5, #1
 8000fac:	e7ee      	b.n	8000f8c <__libc_init_array+0xc>
 8000fae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fb2:	4798      	blx	r3
 8000fb4:	3501      	adds	r5, #1
 8000fb6:	e7f2      	b.n	8000f9e <__libc_init_array+0x1e>
 8000fb8:	08001010 	.word	0x08001010
 8000fbc:	08001010 	.word	0x08001010
 8000fc0:	08001010 	.word	0x08001010
 8000fc4:	08001014 	.word	0x08001014

08000fc8 <memset>:
 8000fc8:	4402      	add	r2, r0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d100      	bne.n	8000fd2 <memset+0xa>
 8000fd0:	4770      	bx	lr
 8000fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8000fd6:	e7f9      	b.n	8000fcc <memset+0x4>

08000fd8 <_init>:
 8000fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fda:	bf00      	nop
 8000fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fde:	bc08      	pop	{r3}
 8000fe0:	469e      	mov	lr, r3
 8000fe2:	4770      	bx	lr

08000fe4 <_fini>:
 8000fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe6:	bf00      	nop
 8000fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fea:	bc08      	pop	{r3}
 8000fec:	469e      	mov	lr, r3
 8000fee:	4770      	bx	lr
