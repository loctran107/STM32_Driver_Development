/*
 * STM32F407xx_SPI_Driver.c
 *
 *  Created on: Aug 28, 2020
 *      Author: Donavan Tran
 *      Description: This source file contains specific definitions of SPI
 *      			 function API
 */

#include "../Inc/STM32F407xx_SPI_Driver.h"

/*****************************************************
 * @fn					- SPI_PeriClkCtrl
 *
 * @brief				- Enable or disable the SPIx clock peripherals
 *
 * @param[in]			- SPI_Reg_t* pSPIx: Base address of the specific SPI
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void SPI_PeriClkCtrl(SPI_Reg_t* pSPIx, uint8_t EnOrDi) {
	if (EnOrDi) {
		SPIx_PCLK_EN(pSPIx); //Go to SPIx_PCLK_EN macro for more details
	} else {
		SPIx_PCLK_DI(pSPIx); //Go to SPIx_PCLK_DI macro for more details
	}
}

/*****************************************************
 * @fn					- SPI_Init
 *
 * @brief				- Initialize the SPI port given the handle structure
 *
 * @param[in]			- Handle Structure of SPI that contains all SPI configuration and port
 *
 * @return				- none
 * @note				- none
 */
void SPI_Init(SPI_Handle_t* pSPIHandler) {
	SPI_Reg_t*	 SPIx 	 = pSPIHandler->pSPIx;
	SPI_Config_t SPIConf = pSPIHandler->SPI_Config;
	//Slave mode
	if (SPIConf.DeviceMode == SPI_SLAVE_MODE) {

		//Configure Clock baud rate
		//SPIx->SPI_CR1 |= (SPIConf.SclkSpeed << 3);

		//Set the DFF bit to define 8- or 16-bit data frame format
		SPIx->SPI_CR1 |= SPIConf.DFF << 11;

		//Select the CPOL and CPHA bits to define one of the 4 relationships
		//between the data transfer and the serial clock
		SPIx->SPI_CR1 |= SPIConf.CPOL << 1;
		SPIx->SPI_CR1 |= SPIConf.CPHA;

		//Set the SSM pin to select either Hardware Slave Management
		//Software Slave Management (potentially configure the SSI pin)
		SPIx->SPI_CR1 |= SPIConf.SSM << 9;
	}
}

/*****************************************************
 * @fn					- SPI_DeInit
 *
 * @brief				- Reset the entire register configuration of the specific SPI port
 *
 * @param[in]			- Base address of the specific SPI peripherals (SPI_Reg_t* pSPIx)
 *
 * @return				- none
 * @note				- The implementation so far only covers only 3 SPI ports
 */
void SPI_DeInit(SPI_Reg_t* pSPIx) {
	if (pSPIx == SPI1) {
		SPI1_PCLK_RST();
	} else if (pSPIx == SPI2) {
		SPI2_PCLK_RST();
	} else {
		SPI3_PCLK_RST();
	}
}

/*****************************************************
 * @fn					- GPIO_PeriClkCtrl
 *
 * @brief				- Enable or disable the GPIOx clock peripherals
 *
 * @param[in]			- GPIO_Reg_t* pGPIOx: Base address of the GPIO port
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void SPI_SendData(SPI_Reg_t* pSPIx, uint8_t* pTxBuffer, uint32_t len); //Note: it is a standard practice to define len as uint32_t

/*****************************************************
 * @fn					- GPIO_PeriClkCtrl
 *
 * @brief				- Enable or disable the GPIOx clock peripherals
 *
 * @param[in]			- GPIO_Reg_t* pGPIOx: Base address of the GPIO port
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void SPI_ReceiveData(SPI_Reg_t* pSPIx, uint8_t* pRxBuffer, uint32_t len);


/*****************************************************
 * @fn					- GPIO_PeriClkCtrl
 *
 * @brief				- Enable or disable the GPIOx clock peripherals
 *
 * @param[in]			- GPIO_Reg_t* pGPIOx: Base address of the GPIO port
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void SPI_IRQITConfig(uint8_t IRQNumber, uint8_t EnOrDi);

/*****************************************************
 * @fn					- GPIO_PeriClkCtrl
 *
 * @brief				- Enable or disable the GPIOx clock peripherals
 *
 * @param[in]			- GPIO_Reg_t* pGPIOx: Base address of the GPIO port
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriorityValue);

/*****************************************************
 * @fn					- GPIO_PeriClkCtrl
 *
 * @brief				- Enable or disable the GPIOx clock peripherals
 *
 * @param[in]			- GPIO_Reg_t* pGPIOx: Base address of the GPIO port
 * @param[in]			- ENABLE or DISABLE macro
 *
 * @return				- none
 * @note				- none
 */
void SPI_IRQHandling(SPI_Handle_t* pSPIHandler);

